
test_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080091f8  080091f8  000191f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009624  08009624  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009624  08009624  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009624  08009624  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800962c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001e4  08009810  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08009810  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a451  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca8  00000000  00000000  0002a65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002cd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001801b  00000000  00000000  0002d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfe4  00000000  00000000  00045793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ee6  00000000  00000000  00051777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d865d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd0  00000000  00000000  000d86b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080091e0 	.word	0x080091e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080091e0 	.word	0x080091e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO sensor
void BNO055_Init_I2C(I2C_HandleTypeDef * hi2c_device) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b090      	sub	sp, #64	; 0x40
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
    uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 8000f4c:	233d      	movs	r3, #61	; 0x3d
 8000f4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 100);
 8000f50:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f54:	2364      	movs	r3, #100	; 0x64
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2302      	movs	r3, #2
 8000f5a:	2150      	movs	r1, #80	; 0x50
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f001 fc31 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Write(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_OPR_MODE, I2C_MEMADD_SIZE_8BIT, CONFIGMODE, I2C_MEMADD_SIZE_8BIT, 100);
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	223d      	movs	r2, #61	; 0x3d
 8000f72:	2150      	movs	r1, #80	; 0x50
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f001 fd23 	bl	80029c0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f000 fe0c 	bl	8001b98 <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 8000f80:	f240 1307 	movw	r3, #263	; 0x107
 8000f84:	853b      	strh	r3, [r7, #40]	; 0x28
    HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 100);
 8000f86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f8a:	2364      	movs	r3, #100	; 0x64
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	2150      	movs	r1, #80	; 0x50
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f001 fc16 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Write(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_PAGE_ID, I2C_MEMADD_SIZE_8BIT, 0x01 , I2C_MEMADD_SIZE_8BIT, 100);
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	2150      	movs	r1, #80	; 0x50
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f001 fd08 	bl	80029c0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f000 fdf1 	bl	8001b98 <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000fbc:	4b68      	ldr	r3, [pc, #416]	; (8001160 <BNO055_Init_I2C+0x21c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	b25a      	sxtb	r2, r3
 8000fc4:	4b67      	ldr	r3, [pc, #412]	; (8001164 <BNO055_Init_I2C+0x220>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b25a      	sxtb	r2, r3
 8000fd0:	4b65      	ldr	r3, [pc, #404]	; (8001168 <BNO055_Init_I2C+0x224>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), HAL_MAX_DELAY);
 8000fe0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	2150      	movs	r1, #80	; 0x50
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f001 fbe8 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Write(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_ACC_CONFIG, I2C_MEMADD_SIZE_8BIT, conf_acc + 1 , I2C_MEMADD_SIZE_8BIT, 100);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	2264      	movs	r2, #100	; 0x64
 8000ffc:	9202      	str	r2, [sp, #8]
 8000ffe:	2201      	movs	r2, #1
 8001000:	9201      	str	r2, [sp, #4]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	2208      	movs	r2, #8
 8001008:	2150      	movs	r1, #80	; 0x50
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f001 fcd8 	bl	80029c0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f000 fdc1 	bl	8001b98 <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 8001016:	230a      	movs	r3, #10
 8001018:	f887 3020 	strb.w	r3, [r7, #32]
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <BNO055_Init_I2C+0x228>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	b25a      	sxtb	r2, r3
 8001024:	4b52      	ldr	r3, [pc, #328]	; (8001170 <BNO055_Init_I2C+0x22c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b25b      	sxtb	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), HAL_MAX_DELAY);
 8001034:	f107 0220 	add.w	r2, r7, #32
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2302      	movs	r3, #2
 8001040:	2150      	movs	r1, #80	; 0x50
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f001 fbbe 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Write(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_GYRO_CONFIG_0, I2C_MEMADD_SIZE_8BIT, conf_acc + 1 , I2C_MEMADD_SIZE_8BIT, 100);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	3301      	adds	r3, #1
 800104e:	2264      	movs	r2, #100	; 0x64
 8001050:	9202      	str	r2, [sp, #8]
 8001052:	2201      	movs	r2, #1
 8001054:	9201      	str	r2, [sp, #4]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	220a      	movs	r2, #10
 800105c:	2150      	movs	r1, #80	; 0x50
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f001 fcae 	bl	80029c0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001064:	2064      	movs	r0, #100	; 0x64
 8001066:	f000 fd97 	bl	8001b98 <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 800106a:	230b      	movs	r3, #11
 800106c:	773b      	strb	r3, [r7, #28]
 800106e:	4b41      	ldr	r3, [pc, #260]	; (8001174 <BNO055_Init_I2C+0x230>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), HAL_MAX_DELAY);
 8001074:	f107 021c 	add.w	r2, r7, #28
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2302      	movs	r3, #2
 8001080:	2150      	movs	r1, #80	; 0x50
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f001 fb9e 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Write(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, conf_gyro_pwr + 1 , I2C_MEMADD_SIZE_8BIT, 100);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	3301      	adds	r3, #1
 800108e:	2264      	movs	r2, #100	; 0x64
 8001090:	9202      	str	r2, [sp, #8]
 8001092:	2201      	movs	r2, #1
 8001094:	9201      	str	r2, [sp, #4]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	220b      	movs	r2, #11
 800109c:	2150      	movs	r1, #80	; 0x50
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 fc8e 	bl	80029c0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80010a4:	2064      	movs	r0, #100	; 0x64
 80010a6:	f000 fd77 	bl	8001b98 <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 80010aa:	2300      	movs	r3, #0
 80010ac:	763b      	strb	r3, [r7, #24]
 80010ae:	2309      	movs	r3, #9
 80010b0:	767b      	strb	r3, [r7, #25]
 80010b2:	2301      	movs	r3, #1
 80010b4:	76bb      	strb	r3, [r7, #26]
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <BNO055_Init_I2C+0x234>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	015b      	lsls	r3, r3, #5
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <BNO055_Init_I2C+0x238>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <BNO055_Init_I2C+0x23c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), HAL_MAX_DELAY);
 80010d8:	f107 0218 	add.w	r2, r7, #24
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2304      	movs	r3, #4
 80010e4:	2150      	movs	r1, #80	; 0x50
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f001 fb6c 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 80010ec:	2064      	movs	r0, #100	; 0x64
 80010ee:	f000 fd53 	bl	8001b98 <HAL_Delay>

	// Select BNO055 gyro temperature source
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );

	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 80010f2:	2307      	movs	r3, #7
 80010f4:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), HAL_MAX_DELAY);
 80010f6:	f107 0214 	add.w	r2, r7, #20
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2302      	movs	r3, #2
 8001102:	2150      	movs	r1, #80	; 0x50
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 fb5d 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f000 fd44 	bl	8001b98 <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 8001110:	233e      	movs	r3, #62	; 0x3e
 8001112:	743b      	strb	r3, [r7, #16]
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <BNO055_Init_I2C+0x240>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), HAL_MAX_DELAY);
 800111a:	f107 0210 	add.w	r2, r7, #16
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2302      	movs	r3, #2
 8001126:	2150      	movs	r1, #80	; 0x50
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f001 fb4b 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f000 fd32 	bl	8001b98 <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 8001134:	233d      	movs	r3, #61	; 0x3d
 8001136:	733b      	strb	r3, [r7, #12]
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <BNO055_Init_I2C+0x244>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), HAL_MAX_DELAY);
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2302      	movs	r3, #2
 800114a:	2150      	movs	r1, #80	; 0x50
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f001 fb39 	bl	80027c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001152:	2064      	movs	r0, #100	; 0x64
 8001154:	f000 fd20 	bl	8001b98 <HAL_Delay>
}
 8001158:	bf00      	nop
 800115a:	3730      	adds	r7, #48	; 0x30
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000202 	.word	0x20000202
 8001164:	20000002 	.word	0x20000002
 8001168:	20000001 	.word	0x20000001
 800116c:	20000000 	.word	0x20000000
 8001170:	20000201 	.word	0x20000201
 8001174:	20000200 	.word	0x20000200
 8001178:	20000203 	.word	0x20000203
 800117c:	20000003 	.word	0x20000003
 8001180:	20000004 	.word	0x20000004
 8001184:	20000204 	.word	0x20000204
 8001188:	20000005 	.word	0x20000005

0800118c <GetAccelData>:



// Send data to BNO055 over I2C
uint8_t GetAccelData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af04      	add	r7, sp, #16
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 8001196:	2364      	movs	r3, #100	; 0x64
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2312      	movs	r3, #18
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	2208      	movs	r2, #8
 80011a6:	2150      	movs	r1, #80	; 0x50
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f001 fd03 	bl	8002bb4 <HAL_I2C_Mem_Read>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
    //while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
	str = &status;
 80011b2:	f107 030f 	add.w	r3, r7, #15
 80011b6:	603b      	str	r3, [r7, #0]
	return status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011c8:	b096      	sub	sp, #88	; 0x58
 80011ca:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011cc:	f000 fc82 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d0:	f000 f886 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d4:	f000 f972 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 80011d8:	f000 f916 	bl	8001408 <MX_DMA_Init>
  MX_I2C1_Init();
 80011dc:	f000 f8bc 	bl	8001358 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80011e0:	f000 f8e8 	bl	80013b4 <MX_USART1_UART_Init>

  BNO055_Init_I2C(&hi2c1);
 80011e4:	483a      	ldr	r0, [pc, #232]	; (80012d0 <main+0x10c>)
 80011e6:	f7ff fead 	bl	8000f44 <BNO055_Init_I2C>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


          HAL_Delay(300);
 80011ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011ee:	f000 fcd3 	bl	8001b98 <HAL_Delay>
    	  GetAccelData(&hi2c1, (uint8_t*)imu_readings);
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4835      	ldr	r0, [pc, #212]	; (80012d0 <main+0x10c>)
 80011fa:	f7ff ffc7 	bl	800118c <GetAccelData>
    	  accel_data[0] = (((int16_t)((uint8_t *)(imu_readings))[1] << 8) | ((uint8_t *)(imu_readings))[0]);      // Turn the MSB and LSB into a signed 16-bit value
 80011fe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	843b      	strh	r3, [r7, #32]
    	  accel_data[1] = (((int16_t)((uint8_t *)(imu_readings))[3] << 8) | ((uint8_t *)(imu_readings))[2]);
 8001212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21b      	sxth	r3, r3
 8001224:	847b      	strh	r3, [r7, #34]	; 0x22
    	  accel_data[2] = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 8001226:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21b      	sxth	r3, r3
 8001238:	84bb      	strh	r3, [r7, #36]	; 0x24
    	  acc_x = ((float)(accel_data[0]))/100.0f; //m/s2
 800123a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fcdc 	bl	8000bfc <__aeabi_i2f>
 8001244:	4603      	mov	r3, r0
 8001246:	4923      	ldr	r1, [pc, #140]	; (80012d4 <main+0x110>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fddf 	bl	8000e0c <__aeabi_fdiv>
 800124e:	4603      	mov	r3, r0
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
    	  acc_y = ((float)(accel_data[1]))/100.0f;
 8001252:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fcd0 	bl	8000bfc <__aeabi_i2f>
 800125c:	4603      	mov	r3, r0
 800125e:	491d      	ldr	r1, [pc, #116]	; (80012d4 <main+0x110>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fdd3 	bl	8000e0c <__aeabi_fdiv>
 8001266:	4603      	mov	r3, r0
 8001268:	643b      	str	r3, [r7, #64]	; 0x40
    	  acc_z = ((float)(accel_data[2]))/100.0f;
 800126a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fcc4 	bl	8000bfc <__aeabi_i2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4917      	ldr	r1, [pc, #92]	; (80012d4 <main+0x110>)
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fdc7 	bl	8000e0c <__aeabi_fdiv>
 800127e:	4603      	mov	r3, r0
 8001280:	63fb      	str	r3, [r7, #60]	; 0x3c


	 	 sprintf((char*)buf," accX: %0.2f accY:%0.2f accZ:%0.2f \r\n",((float)acc_x),((float)acc_y),((float)acc_z));
 8001282:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001284:	f7ff f8d0 	bl	8000428 <__aeabi_f2d>
 8001288:	4680      	mov	r8, r0
 800128a:	4689      	mov	r9, r1
 800128c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800128e:	f7ff f8cb 	bl	8000428 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001298:	f7ff f8c6 	bl	8000428 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	1d38      	adds	r0, r7, #4
 80012a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012a6:	e9cd 4500 	strd	r4, r5, [sp]
 80012aa:	4642      	mov	r2, r8
 80012ac:	464b      	mov	r3, r9
 80012ae:	490a      	ldr	r1, [pc, #40]	; (80012d8 <main+0x114>)
 80012b0:	f005 fd1c 	bl	8006cec <siprintf>
	 	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7fe ff4a 	bl	8000150 <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	1d39      	adds	r1, r7, #4
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <main+0x118>)
 80012c8:	f004 fbf3 	bl	8005ab2 <HAL_UART_Transmit>
  {
 80012cc:	e78d      	b.n	80011ea <main+0x26>
 80012ce:	bf00      	nop
 80012d0:	20000208 	.word	0x20000208
 80012d4:	42c80000 	.word	0x42c80000
 80012d8:	080091f8 	.word	0x080091f8
 80012dc:	200002e4 	.word	0x200002e4

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	; 0x40
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	2228      	movs	r2, #40	; 0x28
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f005 f894 	bl	800641c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f003 ff65 	bl	80051e4 <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8001320:	f000 f8fa 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001324:	230f      	movs	r3, #15
 8001326:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001328:	2301      	movs	r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f004 f9d2 	bl	80056e8 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800134a:	f000 f8e5 	bl	8001518 <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3740      	adds	r7, #64	; 0x40
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C1_Init+0x50>)
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <MX_I2C1_Init+0x54>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_I2C1_Init+0x58>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_I2C1_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_I2C1_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_I2C1_Init+0x50>)
 8001396:	f001 f8d1 	bl	800253c <HAL_I2C_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a0:	f000 f8ba 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000208 	.word	0x20000208
 80013ac:	40005400 	.word	0x40005400
 80013b0:	00061a80 	.word	0x00061a80

080013b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ec:	f004 fb14 	bl	8005a18 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f000 f88f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002e4 	.word	0x200002e4
 8001404:	40013800 	.word	0x40013800

08001408 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <MX_DMA_Init+0xa8>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <MX_DMA_Init+0xa8>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6153      	str	r3, [r2, #20]
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <MX_DMA_Init+0xa8>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <MX_DMA_Init+0xac>)
 8001428:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <MX_DMA_Init+0xb0>)
 800142a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_DMA_Init+0xac>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_DMA_Init+0xac>)
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_DMA_Init+0xac>)
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_DMA_Init+0xac>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_DMA_Init+0xac>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_DMA_Init+0xac>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_DMA_Init+0xac>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <MX_DMA_Init+0xac>)
 800145a:	f000 fccf 	bl	8001dfc <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_DMA_Init+0x60>
  {
    Error_Handler( );
 8001464:	f000 f858 	bl	8001518 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	200e      	movs	r0, #14
 800146e:	f000 fc8e 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001472:	200e      	movs	r0, #14
 8001474:	f000 fca7 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	200f      	movs	r0, #15
 800147e:	f000 fc86 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001482:	200f      	movs	r0, #15
 8001484:	f000 fc9f 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2010      	movs	r0, #16
 800148e:	f000 fc7e 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001492:	2010      	movs	r0, #16
 8001494:	f000 fc97 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2011      	movs	r0, #17
 800149e:	f000 fc76 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014a2:	2011      	movs	r0, #17
 80014a4:	f000 fc8f 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	200003b0 	.word	0x200003b0
 80014b8:	40020008 	.word	0x40020008

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_GPIO_Init+0x58>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_GPIO_Init+0x58>)
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_GPIO_Init+0x58>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_GPIO_Init+0x58>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <MX_GPIO_Init+0x58>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_GPIO_Init+0x58>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_GPIO_Init+0x58>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a07      	ldr	r2, [pc, #28]	; (8001514 <MX_GPIO_Init+0x58>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <MX_GPIO_Init+0x58>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_MspInit+0x5c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_MspInit+0x5c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_MspInit+0x5c>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_MspInit+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_MspInit+0x5c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_MspInit+0x5c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_MspInit+0x60>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_MspInit+0x60>)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a43      	ldr	r2, [pc, #268]	; (80016b0 <HAL_I2C_MspInit+0x128>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d17f      	bne.n	80016a8 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a8:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a41      	ldr	r2, [pc, #260]	; (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015ae:	f043 0308 	orr.w	r3, r3, #8
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c0:	23c0      	movs	r3, #192	; 0xc0
 80015c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	4839      	ldr	r0, [pc, #228]	; (80016b8 <HAL_I2C_MspInit+0x130>)
 80015d4:	f000 fe2e 	bl	8002234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e2:	61d3      	str	r3, [r2, #28]
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_I2C_MspInit+0x134>)
 80015f2:	4a33      	ldr	r2, [pc, #204]	; (80016c0 <HAL_I2C_MspInit+0x138>)
 80015f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_I2C_MspInit+0x134>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_I2C_MspInit+0x134>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <HAL_I2C_MspInit+0x134>)
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_I2C_MspInit+0x134>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_I2C_MspInit+0x134>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_I2C_MspInit+0x134>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_I2C_MspInit+0x134>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001620:	4826      	ldr	r0, [pc, #152]	; (80016bc <HAL_I2C_MspInit+0x134>)
 8001622:	f000 fbeb 	bl	8001dfc <HAL_DMA_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 800162c:	f7ff ff74 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <HAL_I2C_MspInit+0x134>)
 8001634:	639a      	str	r2, [r3, #56]	; 0x38
 8001636:	4a21      	ldr	r2, [pc, #132]	; (80016bc <HAL_I2C_MspInit+0x134>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 800163e:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <HAL_I2C_MspInit+0x140>)
 8001640:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 8001644:	2210      	movs	r2, #16
 8001646:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800166c:	4815      	ldr	r0, [pc, #84]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 800166e:	f000 fbc5 	bl	8001dfc <HAL_DMA_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8001678:	f7ff ff4e 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_I2C_MspInit+0x13c>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	201f      	movs	r0, #31
 800168e:	f000 fb7e 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001692:	201f      	movs	r0, #31
 8001694:	f000 fb97 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2020      	movs	r0, #32
 800169e:	f000 fb76 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016a2:	2020      	movs	r0, #32
 80016a4:	f000 fb8f 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	2000025c 	.word	0x2000025c
 80016c0:	40020080 	.word	0x40020080
 80016c4:	200002a0 	.word	0x200002a0
 80016c8:	4002006c 	.word	0x4002006c

080016cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a47      	ldr	r2, [pc, #284]	; (8001804 <HAL_UART_MspInit+0x138>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f040 8086 	bne.w	80017fa <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_UART_MspInit+0x13c>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	4a45      	ldr	r2, [pc, #276]	; (8001808 <HAL_UART_MspInit+0x13c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6193      	str	r3, [r2, #24]
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_UART_MspInit+0x13c>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_UART_MspInit+0x13c>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a3f      	ldr	r2, [pc, #252]	; (8001808 <HAL_UART_MspInit+0x13c>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_UART_MspInit+0x13c>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800171e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	4836      	ldr	r0, [pc, #216]	; (800180c <HAL_UART_MspInit+0x140>)
 8001734:	f000 fd7e 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	4619      	mov	r1, r3
 800174c:	482f      	ldr	r0, [pc, #188]	; (800180c <HAL_UART_MspInit+0x140>)
 800174e:	f000 fd71 	bl	8002234 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_UART_MspInit+0x144>)
 8001754:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001758:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_UART_MspInit+0x144>)
 800175a:	2210      	movs	r2, #16
 800175c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_UART_MspInit+0x144>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_UART_MspInit+0x144>)
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_UART_MspInit+0x144>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <HAL_UART_MspInit+0x144>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_UART_MspInit+0x144>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_UART_MspInit+0x144>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001782:	4823      	ldr	r0, [pc, #140]	; (8001810 <HAL_UART_MspInit+0x144>)
 8001784:	f000 fb3a 	bl	8001dfc <HAL_DMA_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800178e:	f7ff fec3 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_UART_MspInit+0x144>)
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_UART_MspInit+0x144>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_UART_MspInit+0x150>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ce:	4812      	ldr	r0, [pc, #72]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017d0:	f000 fb14 	bl	8001dfc <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80017da:	f7ff fe9d 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017e2:	639a      	str	r2, [r3, #56]	; 0x38
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <HAL_UART_MspInit+0x14c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2025      	movs	r0, #37	; 0x25
 80017f0:	f000 facd 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017f4:	2025      	movs	r0, #37	; 0x25
 80017f6:	f000 fae6 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40013800 	.word	0x40013800
 8001808:	40021000 	.word	0x40021000
 800180c:	40010800 	.word	0x40010800
 8001810:	20000328 	.word	0x20000328
 8001814:	40020044 	.word	0x40020044
 8001818:	2000036c 	.word	0x2000036c
 800181c:	40020058 	.word	0x40020058

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001866:	f000 f97b 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <DMA1_Channel4_IRQHandler+0x10>)
 8001876:	f000 fbcb 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000328 	.word	0x20000328

08001884 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <DMA1_Channel5_IRQHandler+0x10>)
 800188a:	f000 fbc1 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000036c 	.word	0x2000036c

08001898 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA1_Channel6_IRQHandler+0x10>)
 800189e:	f000 fbb7 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002a0 	.word	0x200002a0

080018ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <DMA1_Channel7_IRQHandler+0x10>)
 80018b2:	f000 fbad 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000025c 	.word	0x2000025c

080018c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <I2C1_EV_IRQHandler+0x10>)
 80018c6:	f001 fbdd 	bl	8003084 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000208 	.word	0x20000208

080018d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <I2C1_ER_IRQHandler+0x10>)
 80018da:	f001 fd44 	bl	8003366 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000208 	.word	0x20000208

080018e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <USART1_IRQHandler+0x10>)
 80018ee:	f004 f973 	bl	8005bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002e4 	.word	0x200002e4

080018fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <_kill>:

int _kill(int pid, int sig)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001914:	f004 fd58 	bl	80063c8 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	2216      	movs	r2, #22
 800191c:	601a      	str	r2, [r3, #0]
  return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_exit>:

void _exit (int status)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001932:	f04f 31ff 	mov.w	r1, #4294967295
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffe7 	bl	800190a <_kill>
  while (1) {}    /* Make sure we hang here */
 800193c:	e7fe      	b.n	800193c <_exit+0x12>

0800193e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e00a      	b.n	8001966 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001950:	f3af 8000 	nop.w
 8001954:	4601      	mov	r1, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	60ba      	str	r2, [r7, #8]
 800195c:	b2ca      	uxtb	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3301      	adds	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	dbf0      	blt.n	8001950 <_read+0x12>
  }

  return len;
 800196e:	687b      	ldr	r3, [r7, #4]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e009      	b.n	800199e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	60ba      	str	r2, [r7, #8]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbf1      	blt.n	800198a <_write+0x12>
  }
  return len;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_close>:

int _close(int file)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d6:	605a      	str	r2, [r3, #4]
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <_isatty>:

int _isatty(int file)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f004 fcc2 	bl	80063c8 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20005000 	.word	0x20005000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	200003f4 	.word	0x200003f4
 8001a78:	20000410 	.word	0x20000410

08001a7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <LoopFillZerobss+0x12>)

  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	; (8001acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aae:	f7ff ffe5 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f004 fc8f 	bl	80063d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab6:	f7ff fb85 	bl	80011c4 <main>
  bx lr
 8001aba:	4770      	bx	lr
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ac4:	0800962c 	.word	0x0800962c
  ldr r2, =_sbss
 8001ac8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001acc:	2000040c 	.word	0x2000040c

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x28>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f947 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fd18 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f95f 	bl	8001de2 <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f927 	bl	8001d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000010 	.word	0x20000010
 8001b5c:	2000000c 	.word	0x2000000c

08001b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_IncTick+0x1c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x20>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_IncTick+0x20>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000010 	.word	0x20000010
 8001b80:	200003f8 	.word	0x200003f8

08001b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <HAL_GetTick+0x10>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	200003f8 	.word	0x200003f8

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffe0 	bl	8001b84 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000010 	.word	0x20000010

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db0b      	blt.n	8001c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4906      	ldr	r1, [pc, #24]	; (8001c78 <__NVIC_EnableIRQ+0x34>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2001      	movs	r0, #1
 8001c66:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff90 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff2d 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff42 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff90 	bl	8001cd0 <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5f 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff35 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffa2 	bl	8001d34 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e043      	b.n	8001e9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_DMA_Init+0xa8>)
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_DMA_Init+0xac>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	009a      	lsls	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_DMA_Init+0xb0>)
 8001e2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	bffdfff8 	.word	0xbffdfff8
 8001ea8:	cccccccd 	.word	0xcccccccd
 8001eac:	40020000 	.word	0x40020000

08001eb0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d008      	beq.n	8001ed8 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e020      	b.n	8001f1a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 020e 	bic.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	2101      	movs	r1, #1
 8001f02:	fa01 f202 	lsl.w	r2, r1, r2
 8001f06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d005      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e051      	b.n	8001fea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 020e 	bic.w	r2, r2, #14
 8001f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_DMA_Abort_IT+0xd0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d029      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xa0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <HAL_DMA_Abort_IT+0xd4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d022      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x9c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_DMA_Abort_IT+0xd8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d01a      	beq.n	8001fba <HAL_DMA_Abort_IT+0x96>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_DMA_Abort_IT+0xdc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d012      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x90>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_DMA_Abort_IT+0xe0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00a      	beq.n	8001fae <HAL_DMA_Abort_IT+0x8a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_DMA_Abort_IT+0xe4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d102      	bne.n	8001fa8 <HAL_DMA_Abort_IT+0x84>
 8001fa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fa6:	e00e      	b.n	8001fc6 <HAL_DMA_Abort_IT+0xa2>
 8001fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fac:	e00b      	b.n	8001fc6 <HAL_DMA_Abort_IT+0xa2>
 8001fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb2:	e008      	b.n	8001fc6 <HAL_DMA_Abort_IT+0xa2>
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	e005      	b.n	8001fc6 <HAL_DMA_Abort_IT+0xa2>
 8001fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbe:	e002      	b.n	8001fc6 <HAL_DMA_Abort_IT+0xa2>
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	e000      	b.n	8001fc6 <HAL_DMA_Abort_IT+0xa2>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_DMA_Abort_IT+0xe8>)
 8001fc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
    } 
  }
  return status;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40020008 	.word	0x40020008
 8001ff8:	4002001c 	.word	0x4002001c
 8001ffc:	40020030 	.word	0x40020030
 8002000:	40020044 	.word	0x40020044
 8002004:	40020058 	.word	0x40020058
 8002008:	4002006c 	.word	0x4002006c
 800200c:	40020000 	.word	0x40020000

08002010 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2204      	movs	r2, #4
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d04f      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xc8>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d04a      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0204 	bic.w	r2, r2, #4
 800205e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a66      	ldr	r2, [pc, #408]	; (8002200 <HAL_DMA_IRQHandler+0x1f0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d029      	beq.n	80020be <HAL_DMA_IRQHandler+0xae>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_DMA_IRQHandler+0x1f4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d022      	beq.n	80020ba <HAL_DMA_IRQHandler+0xaa>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a63      	ldr	r2, [pc, #396]	; (8002208 <HAL_DMA_IRQHandler+0x1f8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01a      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xa4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a62      	ldr	r2, [pc, #392]	; (800220c <HAL_DMA_IRQHandler+0x1fc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d012      	beq.n	80020ae <HAL_DMA_IRQHandler+0x9e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a60      	ldr	r2, [pc, #384]	; (8002210 <HAL_DMA_IRQHandler+0x200>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00a      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x98>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5f      	ldr	r2, [pc, #380]	; (8002214 <HAL_DMA_IRQHandler+0x204>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d102      	bne.n	80020a2 <HAL_DMA_IRQHandler+0x92>
 800209c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a0:	e00e      	b.n	80020c0 <HAL_DMA_IRQHandler+0xb0>
 80020a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020a6:	e00b      	b.n	80020c0 <HAL_DMA_IRQHandler+0xb0>
 80020a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020ac:	e008      	b.n	80020c0 <HAL_DMA_IRQHandler+0xb0>
 80020ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020b2:	e005      	b.n	80020c0 <HAL_DMA_IRQHandler+0xb0>
 80020b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b8:	e002      	b.n	80020c0 <HAL_DMA_IRQHandler+0xb0>
 80020ba:	2340      	movs	r3, #64	; 0x40
 80020bc:	e000      	b.n	80020c0 <HAL_DMA_IRQHandler+0xb0>
 80020be:	2304      	movs	r3, #4
 80020c0:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_DMA_IRQHandler+0x208>)
 80020c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8094 	beq.w	80021f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020d6:	e08e      	b.n	80021f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	2202      	movs	r2, #2
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d056      	beq.n	8002196 <HAL_DMA_IRQHandler+0x186>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d051      	beq.n	8002196 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 020a 	bic.w	r2, r2, #10
 800210e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a38      	ldr	r2, [pc, #224]	; (8002200 <HAL_DMA_IRQHandler+0x1f0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d029      	beq.n	8002176 <HAL_DMA_IRQHandler+0x166>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a37      	ldr	r2, [pc, #220]	; (8002204 <HAL_DMA_IRQHandler+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <HAL_DMA_IRQHandler+0x162>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a35      	ldr	r2, [pc, #212]	; (8002208 <HAL_DMA_IRQHandler+0x1f8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01a      	beq.n	800216c <HAL_DMA_IRQHandler+0x15c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a34      	ldr	r2, [pc, #208]	; (800220c <HAL_DMA_IRQHandler+0x1fc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d012      	beq.n	8002166 <HAL_DMA_IRQHandler+0x156>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a32      	ldr	r2, [pc, #200]	; (8002210 <HAL_DMA_IRQHandler+0x200>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00a      	beq.n	8002160 <HAL_DMA_IRQHandler+0x150>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a31      	ldr	r2, [pc, #196]	; (8002214 <HAL_DMA_IRQHandler+0x204>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <HAL_DMA_IRQHandler+0x14a>
 8002154:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002158:	e00e      	b.n	8002178 <HAL_DMA_IRQHandler+0x168>
 800215a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800215e:	e00b      	b.n	8002178 <HAL_DMA_IRQHandler+0x168>
 8002160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002164:	e008      	b.n	8002178 <HAL_DMA_IRQHandler+0x168>
 8002166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800216a:	e005      	b.n	8002178 <HAL_DMA_IRQHandler+0x168>
 800216c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002170:	e002      	b.n	8002178 <HAL_DMA_IRQHandler+0x168>
 8002172:	2320      	movs	r3, #32
 8002174:	e000      	b.n	8002178 <HAL_DMA_IRQHandler+0x168>
 8002176:	2302      	movs	r3, #2
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_DMA_IRQHandler+0x208>)
 800217a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d034      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002194:	e02f      	b.n	80021f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2208      	movs	r2, #8
 800219c:	409a      	lsls	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d028      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x1e8>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 020e 	bic.w	r2, r2, #14
 80021be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
    }
  }
  return;
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
}
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40020008 	.word	0x40020008
 8002204:	4002001c 	.word	0x4002001c
 8002208:	40020030 	.word	0x40020030
 800220c:	40020044 	.word	0x40020044
 8002210:	40020058 	.word	0x40020058
 8002214:	4002006c 	.word	0x4002006c
 8002218:	40020000 	.word	0x40020000

0800221c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b08b      	sub	sp, #44	; 0x2c
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002246:	e169      	b.n	800251c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002248:	2201      	movs	r2, #1
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8158 	bne.w	8002516 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a9a      	ldr	r2, [pc, #616]	; (80024d4 <HAL_GPIO_Init+0x2a0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d05e      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 8002270:	4a98      	ldr	r2, [pc, #608]	; (80024d4 <HAL_GPIO_Init+0x2a0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d875      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 8002276:	4a98      	ldr	r2, [pc, #608]	; (80024d8 <HAL_GPIO_Init+0x2a4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d058      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 800227c:	4a96      	ldr	r2, [pc, #600]	; (80024d8 <HAL_GPIO_Init+0x2a4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d86f      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 8002282:	4a96      	ldr	r2, [pc, #600]	; (80024dc <HAL_GPIO_Init+0x2a8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d052      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 8002288:	4a94      	ldr	r2, [pc, #592]	; (80024dc <HAL_GPIO_Init+0x2a8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d869      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 800228e:	4a94      	ldr	r2, [pc, #592]	; (80024e0 <HAL_GPIO_Init+0x2ac>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d04c      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 8002294:	4a92      	ldr	r2, [pc, #584]	; (80024e0 <HAL_GPIO_Init+0x2ac>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d863      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 800229a:	4a92      	ldr	r2, [pc, #584]	; (80024e4 <HAL_GPIO_Init+0x2b0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d046      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 80022a0:	4a90      	ldr	r2, [pc, #576]	; (80024e4 <HAL_GPIO_Init+0x2b0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d85d      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 80022a6:	2b12      	cmp	r3, #18
 80022a8:	d82a      	bhi.n	8002300 <HAL_GPIO_Init+0xcc>
 80022aa:	2b12      	cmp	r3, #18
 80022ac:	d859      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 80022ae:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <HAL_GPIO_Init+0x80>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	0800232f 	.word	0x0800232f
 80022b8:	08002309 	.word	0x08002309
 80022bc:	0800231b 	.word	0x0800231b
 80022c0:	0800235d 	.word	0x0800235d
 80022c4:	08002363 	.word	0x08002363
 80022c8:	08002363 	.word	0x08002363
 80022cc:	08002363 	.word	0x08002363
 80022d0:	08002363 	.word	0x08002363
 80022d4:	08002363 	.word	0x08002363
 80022d8:	08002363 	.word	0x08002363
 80022dc:	08002363 	.word	0x08002363
 80022e0:	08002363 	.word	0x08002363
 80022e4:	08002363 	.word	0x08002363
 80022e8:	08002363 	.word	0x08002363
 80022ec:	08002363 	.word	0x08002363
 80022f0:	08002363 	.word	0x08002363
 80022f4:	08002363 	.word	0x08002363
 80022f8:	08002311 	.word	0x08002311
 80022fc:	08002325 	.word	0x08002325
 8002300:	4a79      	ldr	r2, [pc, #484]	; (80024e8 <HAL_GPIO_Init+0x2b4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002306:	e02c      	b.n	8002362 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	623b      	str	r3, [r7, #32]
          break;
 800230e:	e029      	b.n	8002364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	3304      	adds	r3, #4
 8002316:	623b      	str	r3, [r7, #32]
          break;
 8002318:	e024      	b.n	8002364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	3308      	adds	r3, #8
 8002320:	623b      	str	r3, [r7, #32]
          break;
 8002322:	e01f      	b.n	8002364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	330c      	adds	r3, #12
 800232a:	623b      	str	r3, [r7, #32]
          break;
 800232c:	e01a      	b.n	8002364 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002336:	2304      	movs	r3, #4
 8002338:	623b      	str	r3, [r7, #32]
          break;
 800233a:	e013      	b.n	8002364 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002344:	2308      	movs	r3, #8
 8002346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	611a      	str	r2, [r3, #16]
          break;
 800234e:	e009      	b.n	8002364 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002350:	2308      	movs	r3, #8
 8002352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	615a      	str	r2, [r3, #20]
          break;
 800235a:	e003      	b.n	8002364 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
          break;
 8002360:	e000      	b.n	8002364 <HAL_GPIO_Init+0x130>
          break;
 8002362:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2bff      	cmp	r3, #255	; 0xff
 8002368:	d801      	bhi.n	800236e <HAL_GPIO_Init+0x13a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	e001      	b.n	8002372 <HAL_GPIO_Init+0x13e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2bff      	cmp	r3, #255	; 0xff
 8002378:	d802      	bhi.n	8002380 <HAL_GPIO_Init+0x14c>
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	e002      	b.n	8002386 <HAL_GPIO_Init+0x152>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3b08      	subs	r3, #8
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	210f      	movs	r1, #15
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	401a      	ands	r2, r3
 8002398:	6a39      	ldr	r1, [r7, #32]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	431a      	orrs	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80b1 	beq.w	8002516 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_GPIO_Init+0x2b8>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a4c      	ldr	r2, [pc, #304]	; (80024ec <HAL_GPIO_Init+0x2b8>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_GPIO_Init+0x2b8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023cc:	4a48      	ldr	r2, [pc, #288]	; (80024f0 <HAL_GPIO_Init+0x2bc>)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a40      	ldr	r2, [pc, #256]	; (80024f4 <HAL_GPIO_Init+0x2c0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_GPIO_Init+0x1ec>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a3f      	ldr	r2, [pc, #252]	; (80024f8 <HAL_GPIO_Init+0x2c4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00d      	beq.n	800241c <HAL_GPIO_Init+0x1e8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3e      	ldr	r2, [pc, #248]	; (80024fc <HAL_GPIO_Init+0x2c8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <HAL_GPIO_Init+0x1e4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3d      	ldr	r2, [pc, #244]	; (8002500 <HAL_GPIO_Init+0x2cc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_GPIO_Init+0x1e0>
 8002410:	2303      	movs	r3, #3
 8002412:	e006      	b.n	8002422 <HAL_GPIO_Init+0x1ee>
 8002414:	2304      	movs	r3, #4
 8002416:	e004      	b.n	8002422 <HAL_GPIO_Init+0x1ee>
 8002418:	2302      	movs	r3, #2
 800241a:	e002      	b.n	8002422 <HAL_GPIO_Init+0x1ee>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_GPIO_Init+0x1ee>
 8002420:	2300      	movs	r3, #0
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	f002 0203 	and.w	r2, r2, #3
 8002428:	0092      	lsls	r2, r2, #2
 800242a:	4093      	lsls	r3, r2
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002432:	492f      	ldr	r1, [pc, #188]	; (80024f0 <HAL_GPIO_Init+0x2bc>)
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	492c      	ldr	r1, [pc, #176]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	43db      	mvns	r3, r3
 8002462:	4928      	ldr	r1, [pc, #160]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002464:	4013      	ands	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4922      	ldr	r1, [pc, #136]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	491e      	ldr	r1, [pc, #120]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800248c:	4013      	ands	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4918      	ldr	r1, [pc, #96]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4914      	ldr	r1, [pc, #80]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d021      	beq.n	8002508 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	490e      	ldr	r1, [pc, #56]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
 80024d0:	e021      	b.n	8002516 <HAL_GPIO_Init+0x2e2>
 80024d2:	bf00      	nop
 80024d4:	10320000 	.word	0x10320000
 80024d8:	10310000 	.word	0x10310000
 80024dc:	10220000 	.word	0x10220000
 80024e0:	10210000 	.word	0x10210000
 80024e4:	10120000 	.word	0x10120000
 80024e8:	10110000 	.word	0x10110000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40010800 	.word	0x40010800
 80024f8:	40010c00 	.word	0x40010c00
 80024fc:	40011000 	.word	0x40011000
 8002500:	40011400 	.word	0x40011400
 8002504:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_GPIO_Init+0x304>)
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	43db      	mvns	r3, r3
 8002510:	4909      	ldr	r1, [pc, #36]	; (8002538 <HAL_GPIO_Init+0x304>)
 8002512:	4013      	ands	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	3301      	adds	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	f47f ae8e 	bne.w	8002248 <HAL_GPIO_Init+0x14>
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	372c      	adds	r7, #44	; 0x2c
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e12b      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff f810 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a0:	f003 f9f4 	bl	800598c <HAL_RCC_GetPCLK1Freq>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <HAL_I2C_Init+0x274>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d807      	bhi.n	80025c0 <HAL_I2C_Init+0x84>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_I2C_Init+0x278>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e006      	b.n	80025ce <HAL_I2C_Init+0x92>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a7d      	ldr	r2, [pc, #500]	; (80027b8 <HAL_I2C_Init+0x27c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e7      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_I2C_Init+0x280>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9b      	lsrs	r3, r3, #18
 80025e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d802      	bhi.n	8002610 <HAL_I2C_Init+0xd4>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	e009      	b.n	8002624 <HAL_I2C_Init+0xe8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4a69      	ldr	r2, [pc, #420]	; (80027c0 <HAL_I2C_Init+0x284>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	495c      	ldr	r1, [pc, #368]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002640:	428b      	cmp	r3, r1
 8002642:	d819      	bhi.n	8002678 <HAL_I2C_Init+0x13c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e59      	subs	r1, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002658:	400b      	ands	r3, r1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_I2C_Init+0x138>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e59      	subs	r1, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fbb1 f3f3 	udiv	r3, r1, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	e051      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002674:	2304      	movs	r3, #4
 8002676:	e04f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_I2C_Init+0x168>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e012      	b.n	80026ca <HAL_I2C_Init+0x18e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Init+0x196>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10e      	bne.n	80026f8 <HAL_I2C_Init+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e58      	subs	r0, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	440b      	add	r3, r1
 80026e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6911      	ldr	r1, [r2, #16]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	000186a0 	.word	0x000186a0
 80027b4:	001e847f 	.word	0x001e847f
 80027b8:	003d08ff 	.word	0x003d08ff
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	10624dd3 	.word	0x10624dd3

080027c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	461a      	mov	r2, r3
 80027d0:	460b      	mov	r3, r1
 80027d2:	817b      	strh	r3, [r7, #10]
 80027d4:	4613      	mov	r3, r2
 80027d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff f9d4 	bl	8001b84 <HAL_GetTick>
 80027dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	f040 80e0 	bne.w	80029ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2319      	movs	r3, #25
 80027f2:	2201      	movs	r2, #1
 80027f4:	4970      	ldr	r1, [pc, #448]	; (80029b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f002 facc 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
 8002804:	e0d3      	b.n	80029ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_I2C_Master_Transmit+0x50>
 8002810:	2302      	movs	r3, #2
 8002812:	e0cc      	b.n	80029ae <HAL_I2C_Master_Transmit+0x1ea>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d007      	beq.n	800283a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002848:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2221      	movs	r2, #33	; 0x21
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2210      	movs	r2, #16
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	893a      	ldrh	r2, [r7, #8]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a50      	ldr	r2, [pc, #320]	; (80029bc <HAL_I2C_Master_Transmit+0x1f8>)
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800287c:	8979      	ldrh	r1, [r7, #10]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f001 ffde 	bl	8004844 <I2C_MasterRequestWrite>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e08d      	b.n	80029ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028a8:	e066      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f002 fb46 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b04      	cmp	r3, #4
 8002912:	d11b      	bne.n	800294c <HAL_I2C_Master_Transmit+0x188>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	d017      	beq.n	800294c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6a39      	ldr	r1, [r7, #32]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f002 fb36 	bl	8004fc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b04      	cmp	r3, #4
 8002962:	d107      	bne.n	8002974 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e01a      	b.n	80029ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d194      	bne.n	80028aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	00100002 	.word	0x00100002
 80029bc:	ffff0000 	.word	0xffff0000

080029c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029da:	f7ff f8d3 	bl	8001b84 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	f040 80d9 	bne.w	8002ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2319      	movs	r3, #25
 80029f4:	2201      	movs	r2, #1
 80029f6:	496d      	ldr	r1, [pc, #436]	; (8002bac <HAL_I2C_Mem_Write+0x1ec>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f002 f9cb 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0cc      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Mem_Write+0x56>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0c5      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d007      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a4d      	ldr	r2, [pc, #308]	; (8002bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a7e:	88f8      	ldrh	r0, [r7, #6]
 8002a80:	893a      	ldrh	r2, [r7, #8]
 8002a82:	8979      	ldrh	r1, [r7, #10]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f001 ff5a 	bl	8004948 <I2C_RequestMemoryWrite>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d052      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e081      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f002 fa4c 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d107      	bne.n	8002ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06b      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d11b      	bne.n	8002b40 <HAL_I2C_Mem_Write+0x180>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d017      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1aa      	bne.n	8002a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f002 fa38 	bl	8004fc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e016      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	00100002 	.word	0x00100002
 8002bb0:	ffff0000 	.word	0xffff0000

08002bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd2:	f7fe ffd7 	bl	8001b84 <HAL_GetTick>
 8002bd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	f040 8244 	bne.w	800306e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2319      	movs	r3, #25
 8002bec:	2201      	movs	r2, #1
 8002bee:	4982      	ldr	r1, [pc, #520]	; (8002df8 <HAL_I2C_Mem_Read+0x244>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f002 f8cf 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e237      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Mem_Read+0x5a>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e230      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d007      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2222      	movs	r2, #34	; 0x22
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a62      	ldr	r2, [pc, #392]	; (8002dfc <HAL_I2C_Mem_Read+0x248>)
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c76:	88f8      	ldrh	r0, [r7, #6]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4603      	mov	r3, r0
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f001 fef4 	bl	8004a74 <I2C_RequestMemoryRead>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1ec      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d113      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e1c0      	b.n	8003048 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d11e      	bne.n	8002d0c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cde:	b672      	cpsid	i
}
 8002ce0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d08:	b662      	cpsie	i
}
 8002d0a:	e035      	b.n	8002d78 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d11e      	bne.n	8002d52 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d24:	b672      	cpsid	i
}
 8002d26:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d4e:	b662      	cpsie	i
}
 8002d50:	e012      	b.n	8002d78 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d60:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d78:	e166      	b.n	8003048 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	f200 811f 	bhi.w	8002fc2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d123      	bne.n	8002dd4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f002 f989 	bl	80050a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e167      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dd2:	e139      	b.n	8003048 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d152      	bne.n	8002e82 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	2200      	movs	r2, #0
 8002de4:	4906      	ldr	r1, [pc, #24]	; (8002e00 <HAL_I2C_Mem_Read+0x24c>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f001 ffd4 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e13c      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
 8002df6:	bf00      	nop
 8002df8:	00100002 	.word	0x00100002
 8002dfc:	ffff0000 	.word	0xffff0000
 8002e00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e04:	b672      	cpsid	i
}
 8002e06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e4a:	b662      	cpsie	i
}
 8002e4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e80:	e0e2      	b.n	8003048 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	2200      	movs	r2, #0
 8002e8a:	497b      	ldr	r1, [pc, #492]	; (8003078 <HAL_I2C_Mem_Read+0x4c4>)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f001 ff81 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0e9      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
}
 8002eae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ee2:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_I2C_Mem_Read+0x4c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	4a65      	ldr	r2, [pc, #404]	; (8003080 <HAL_I2C_Mem_Read+0x4cc>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	0a1a      	lsrs	r2, r3, #8
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00da      	lsls	r2, r3, #3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d118      	bne.n	8002f3a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f2a:	b662      	cpsie	i
}
 8002f2c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e09a      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d1d9      	bne.n	8002efc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f8a:	b662      	cpsie	i
}
 8002f8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fc0:	e042      	b.n	8003048 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f002 f86e 	bl	80050a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e04c      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b04      	cmp	r3, #4
 8003014:	d118      	bne.n	8003048 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f ae94 	bne.w	8002d7a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
  }
}
 8003070:	4618      	mov	r0, r3
 8003072:	3728      	adds	r7, #40	; 0x28
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	00010004 	.word	0x00010004
 800307c:	20000008 	.word	0x20000008
 8003080:	14f8b589 	.word	0x14f8b589

08003084 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d003      	beq.n	80030bc <HAL_I2C_EV_IRQHandler+0x38>
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	f040 80c1 	bne.w	800323e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030dc:	d003      	beq.n	80030e6 <HAL_I2C_EV_IRQHandler+0x62>
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030e4:	d101      	bne.n	80030ea <HAL_I2C_EV_IRQHandler+0x66>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x68>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f000 8132 	beq.w	8003356 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00c      	beq.n	8003116 <HAL_I2C_EV_IRQHandler+0x92>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	0a5b      	lsrs	r3, r3, #9
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f002 f851 	bl	80051b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fd77 	bl	8003c02 <I2C_Master_SB>
 8003114:	e092      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_I2C_EV_IRQHandler+0xb2>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	0a5b      	lsrs	r3, r3, #9
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fdec 	bl	8003d0c <I2C_Master_ADD10>
 8003134:	e082      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0xd2>
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	0a5b      	lsrs	r3, r3, #9
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fe05 	bl	8003d5e <I2C_Master_ADDR>
 8003154:	e072      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03b      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003170:	f000 80f3 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	09db      	lsrs	r3, r3, #7
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00f      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9f1 	bl	8003580 <I2C_MasterTransmit_TXE>
 800319e:	e04d      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80d6 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	0a5b      	lsrs	r3, r3, #9
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80cf 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
 80031be:	2b21      	cmp	r3, #33	; 0x21
 80031c0:	d103      	bne.n	80031ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa78 	bl	80036b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c8:	e0c7      	b.n	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	f040 80c4 	bne.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fae6 	bl	80037a4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d8:	e0bf      	b.n	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e8:	f000 80b7 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00f      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x194>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	0a9b      	lsrs	r3, r3, #10
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x194>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fb5b 	bl	80038cc <I2C_MasterReceive_RXNE>
 8003216:	e011      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 809a 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	0a5b      	lsrs	r3, r3, #9
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8093 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fbfa 	bl	8003a2e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323a:	e08e      	b.n	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
 800323c:	e08d      	b.n	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e007      	b.n	8003260 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x20e>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	0a5b      	lsrs	r3, r3, #9
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003288:	69b9      	ldr	r1, [r7, #24]
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 ffbe 	bl	800420c <I2C_Slave_ADDR>
 8003290:	e066      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_I2C_EV_IRQHandler+0x22e>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	0a5b      	lsrs	r3, r3, #9
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fff8 	bl	80042a0 <I2C_Slave_STOPF>
 80032b0:	e056      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032b2:	7bbb      	ldrb	r3, [r7, #14]
 80032b4:	2b21      	cmp	r3, #33	; 0x21
 80032b6:	d002      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x23a>
 80032b8:	7bbb      	ldrb	r3, [r7, #14]
 80032ba:	2b29      	cmp	r3, #41	; 0x29
 80032bc:	d125      	bne.n	800330a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	09db      	lsrs	r3, r3, #7
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00f      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x266>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	0a9b      	lsrs	r3, r3, #10
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x266>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fed6 	bl	8004094 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e8:	e039      	b.n	800335e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d033      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x2da>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	0a5b      	lsrs	r3, r3, #9
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02d      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 ff03 	bl	800410e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003308:	e029      	b.n	800335e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	0a9b      	lsrs	r3, r3, #10
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 ff0d 	bl	800414e <I2C_SlaveReceive_RXNE>
 8003334:	e014      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00e      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	0a5b      	lsrs	r3, r3, #9
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 ff3b 	bl	80041ca <I2C_SlaveReceive_BTF>
 8003354:	e004      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800335e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b08a      	sub	sp, #40	; 0x28
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003388:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_I2C_ER_IRQHandler+0x5e>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033b2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	0a5b      	lsrs	r3, r3, #9
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_I2C_ER_IRQHandler+0x88>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80033ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	0a9b      	lsrs	r3, r3, #10
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03f      	beq.n	800347a <HAL_I2C_ER_IRQHandler+0x114>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d039      	beq.n	800347a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003406:	7efb      	ldrb	r3, [r7, #27]
 8003408:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003420:	7ebb      	ldrb	r3, [r7, #26]
 8003422:	2b20      	cmp	r3, #32
 8003424:	d112      	bne.n	800344c <HAL_I2C_ER_IRQHandler+0xe6>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <HAL_I2C_ER_IRQHandler+0xe6>
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	2b21      	cmp	r3, #33	; 0x21
 8003430:	d008      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	2b29      	cmp	r3, #41	; 0x29
 8003436:	d005      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0xde>
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b28      	cmp	r3, #40	; 0x28
 800343c:	d106      	bne.n	800344c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b21      	cmp	r3, #33	; 0x21
 8003442:	d103      	bne.n	800344c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f001 f85b 	bl	8004500 <I2C_Slave_AF>
 800344a:	e016      	b.n	800347a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003454:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800345e:	7efb      	ldrb	r3, [r7, #27]
 8003460:	2b10      	cmp	r3, #16
 8003462:	d002      	beq.n	800346a <HAL_I2C_ER_IRQHandler+0x104>
 8003464:	7efb      	ldrb	r3, [r7, #27]
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d107      	bne.n	800347a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	0adb      	lsrs	r3, r3, #11
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00e      	beq.n	80034a4 <HAL_I2C_ER_IRQHandler+0x13e>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80034a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 f892 	bl	80045e0 <I2C_ITError>
  }
}
 80034bc:	bf00      	nop
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr

080034fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
 8003518:	4613      	mov	r3, r2
 800351a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003596:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d150      	bne.n	8003648 <I2C_MasterTransmit_TXE+0xc8>
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b21      	cmp	r3, #33	; 0x21
 80035aa:	d14d      	bne.n	8003648 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d01d      	beq.n	80035ee <I2C_MasterTransmit_TXE+0x6e>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d01a      	beq.n	80035ee <I2C_MasterTransmit_TXE+0x6e>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035be:	d016      	beq.n	80035ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2211      	movs	r2, #17
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ff6c 	bl	80034c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ec:	e060      	b.n	80036b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d107      	bne.n	8003638 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff81 	bl	8003538 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003636:	e03b      	b.n	80036b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff3f 	bl	80034c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003646:	e033      	b.n	80036b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b21      	cmp	r3, #33	; 0x21
 800364c:	d005      	beq.n	800365a <I2C_MasterTransmit_TXE+0xda>
 800364e:	7bbb      	ldrb	r3, [r7, #14]
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d12d      	bne.n	80036b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b22      	cmp	r3, #34	; 0x22
 8003658:	d12a      	bne.n	80036b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d108      	bne.n	8003676 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003672:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003674:	e01c      	b.n	80036b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d103      	bne.n	800368a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f88e 	bl	80037a4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003688:	e012      	b.n	80036b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036ae:	e7ff      	b.n	80036b0 <I2C_MasterTransmit_TXE+0x130>
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b21      	cmp	r3, #33	; 0x21
 80036d0:	d164      	bne.n	800379c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d012      	beq.n	8003702 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003700:	e04c      	b.n	800379c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d01d      	beq.n	8003744 <I2C_MasterTransmit_BTF+0x8c>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b20      	cmp	r3, #32
 800370c:	d01a      	beq.n	8003744 <I2C_MasterTransmit_BTF+0x8c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003714:	d016      	beq.n	8003744 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003724:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2211      	movs	r2, #17
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff fec1 	bl	80034c4 <HAL_I2C_MasterTxCpltCallback>
}
 8003742:	e02b      	b.n	800379c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003752:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d107      	bne.n	800378e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fed6 	bl	8003538 <HAL_I2C_MemTxCpltCallback>
}
 800378c:	e006      	b.n	800379c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fe94 	bl	80034c4 <HAL_I2C_MasterTxCpltCallback>
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11d      	bne.n	80037f8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d10b      	bne.n	80037dc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	1c9a      	adds	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80037da:	e073      	b.n	80038c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	121b      	asrs	r3, r3, #8
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037f6:	e065      	b.n	80038c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10b      	bne.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	b2da      	uxtb	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003816:	e055      	b.n	80038c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381c:	2b02      	cmp	r3, #2
 800381e:	d151      	bne.n	80038c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b22      	cmp	r3, #34	; 0x22
 8003824:	d10d      	bne.n	8003842 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003834:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003840:	e040      	b.n	80038c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d015      	beq.n	8003878 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b21      	cmp	r3, #33	; 0x21
 8003850:	d112      	bne.n	8003878 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003876:	e025      	b.n	80038c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d120      	bne.n	80038c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b21      	cmp	r3, #33	; 0x21
 8003886:	d11d      	bne.n	80038c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003896:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fe3a 	bl	8003538 <HAL_I2C_MemTxCpltCallback>
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b22      	cmp	r3, #34	; 0x22
 80038de:	f040 80a2 	bne.w	8003a26 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d921      	bls.n	8003934 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b03      	cmp	r3, #3
 800391e:	f040 8082 	bne.w	8003a26 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003930:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003932:	e078      	b.n	8003a26 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	2b02      	cmp	r3, #2
 800393a:	d074      	beq.n	8003a26 <I2C_MasterReceive_RXNE+0x15a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d002      	beq.n	8003948 <I2C_MasterReceive_RXNE+0x7c>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d16e      	bne.n	8003a26 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f001 fb7b 	bl	8005044 <I2C_WaitOnSTOPRequestThroughIT>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d142      	bne.n	80039da <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003962:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003972:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d10a      	bne.n	80039c4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fdc4 	bl	800354a <HAL_I2C_MemRxCpltCallback>
}
 80039c2:	e030      	b.n	8003a26 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2212      	movs	r2, #18
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff fd7f 	bl	80034d6 <HAL_I2C_MasterRxCpltCallback>
}
 80039d8:	e025      	b.n	8003a26 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fd9b 	bl	800355c <HAL_I2C_ErrorCallback>
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d11b      	bne.n	8003a7e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a54:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a7c:	e0bd      	b.n	8003bfa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d129      	bne.n	8003adc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a96:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d00a      	beq.n	8003ab4 <I2C_MasterReceive_BTF+0x86>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d007      	beq.n	8003ab4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ada:	e08e      	b.n	8003bfa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d176      	bne.n	8003bd4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d002      	beq.n	8003af2 <I2C_MasterReceive_BTF+0xc4>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d108      	bne.n	8003b04 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e019      	b.n	8003b38 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d002      	beq.n	8003b10 <I2C_MasterReceive_BTF+0xe2>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d108      	bne.n	8003b22 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e00a      	b.n	8003b38 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d007      	beq.n	8003b38 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d10a      	bne.n	8003bbe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fcc7 	bl	800354a <HAL_I2C_MemRxCpltCallback>
}
 8003bbc:	e01d      	b.n	8003bfa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2212      	movs	r2, #18
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fc82 	bl	80034d6 <HAL_I2C_MasterRxCpltCallback>
}
 8003bd2:	e012      	b.n	8003bfa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d117      	bne.n	8003c46 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c2e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c30:	e067      	b.n	8003d02 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]
}
 8003c44:	e05d      	b.n	8003d02 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c4e:	d133      	bne.n	8003cb8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b21      	cmp	r3, #33	; 0x21
 8003c5a:	d109      	bne.n	8003c70 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c6c:	611a      	str	r2, [r3, #16]
 8003c6e:	e008      	b.n	8003c82 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <I2C_Master_SB+0x92>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d032      	beq.n	8003d02 <I2C_Master_SB+0x100>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d02d      	beq.n	8003d02 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb4:	605a      	str	r2, [r3, #4]
}
 8003cb6:	e024      	b.n	8003d02 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10e      	bne.n	8003cde <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	11db      	asrs	r3, r3, #7
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f003 0306 	and.w	r3, r3, #6
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f063 030f 	orn	r3, r3, #15
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]
}
 8003cdc:	e011      	b.n	8003d02 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10d      	bne.n	8003d02 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	11db      	asrs	r3, r3, #7
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0306 	and.w	r3, r3, #6
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f063 030e 	orn	r3, r3, #14
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <I2C_Master_ADD10+0x26>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d108      	bne.n	8003d44 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <I2C_Master_ADD10+0x48>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d52:	605a      	str	r2, [r3, #4]
  }
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b091      	sub	sp, #68	; 0x44
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b22      	cmp	r3, #34	; 0x22
 8003d86:	f040 8174 	bne.w	8004072 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10f      	bne.n	8003db2 <I2C_Master_ADDR+0x54>
 8003d92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d10b      	bne.n	8003db2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	633b      	str	r3, [r7, #48]	; 0x30
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	e16b      	b.n	800408a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11d      	bne.n	8003df6 <I2C_Master_ADDR+0x98>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dc2:	d118      	bne.n	8003df6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	651a      	str	r2, [r3, #80]	; 0x50
 8003df4:	e149      	b.n	800408a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d113      	bne.n	8003e28 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e00:	2300      	movs	r3, #0
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e120      	b.n	800406a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	f040 808a 	bne.w	8003f48 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e3a:	d137      	bne.n	8003eac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5a:	d113      	bne.n	8003e84 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	e0f2      	b.n	800406a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	2300      	movs	r3, #0
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e0de      	b.n	800406a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d02e      	beq.n	8003f10 <I2C_Master_ADDR+0x1b2>
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d02b      	beq.n	8003f10 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	2b12      	cmp	r3, #18
 8003ebc:	d102      	bne.n	8003ec4 <I2C_Master_ADDR+0x166>
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d125      	bne.n	8003f10 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d00e      	beq.n	8003ee8 <I2C_Master_ADDR+0x18a>
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d00b      	beq.n	8003ee8 <I2C_Master_ADDR+0x18a>
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d008      	beq.n	8003ee8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e007      	b.n	8003ef8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	e0ac      	b.n	800406a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e090      	b.n	800406a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d158      	bne.n	8004004 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d021      	beq.n	8003f9c <I2C_Master_ADDR+0x23e>
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d01e      	beq.n	8003f9c <I2C_Master_ADDR+0x23e>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d01b      	beq.n	8003f9c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e012      	b.n	8003fc2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003faa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd0:	d14b      	bne.n	800406a <I2C_Master_ADDR+0x30c>
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd8:	d00b      	beq.n	8003ff2 <I2C_Master_ADDR+0x294>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d008      	beq.n	8003ff2 <I2C_Master_ADDR+0x294>
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d005      	beq.n	8003ff2 <I2C_Master_ADDR+0x294>
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d002      	beq.n	8003ff2 <I2C_Master_ADDR+0x294>
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d13b      	bne.n	800406a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	e032      	b.n	800406a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004012:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004022:	d117      	bne.n	8004054 <I2C_Master_ADDR+0x2f6>
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800402a:	d00b      	beq.n	8004044 <I2C_Master_ADDR+0x2e6>
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	2b01      	cmp	r3, #1
 8004030:	d008      	beq.n	8004044 <I2C_Master_ADDR+0x2e6>
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	2b08      	cmp	r3, #8
 8004036:	d005      	beq.n	8004044 <I2C_Master_ADDR+0x2e6>
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	2b10      	cmp	r3, #16
 800403c:	d002      	beq.n	8004044 <I2C_Master_ADDR+0x2e6>
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	2b20      	cmp	r3, #32
 8004042:	d107      	bne.n	8004054 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004052:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004070:	e00b      	b.n	800408a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]
}
 8004088:	e7ff      	b.n	800408a <I2C_Master_ADDR+0x32c>
 800408a:	bf00      	nop
 800408c:	3744      	adds	r7, #68	; 0x44
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d02b      	beq.n	8004106 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	781a      	ldrb	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d114      	bne.n	8004106 <I2C_SlaveTransmit_TXE+0x72>
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b29      	cmp	r3, #41	; 0x29
 80040e0:	d111      	bne.n	8004106 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2221      	movs	r2, #33	; 0x21
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2228      	movs	r2, #40	; 0x28
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff f9f1 	bl	80034e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d011      	beq.n	8004144 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02c      	beq.n	80041c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d114      	bne.n	80041c2 <I2C_SlaveReceive_RXNE+0x74>
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b2a      	cmp	r3, #42	; 0x2a
 800419c:	d111      	bne.n	80041c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2222      	movs	r2, #34	; 0x22
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2228      	movs	r2, #40	; 0x28
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff f99c 	bl	80034fa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d012      	beq.n	8004202 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004226:	2b28      	cmp	r3, #40	; 0x28
 8004228:	d127      	bne.n	800427a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004238:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	089b      	lsrs	r3, r3, #2
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	09db      	lsrs	r3, r3, #7
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	81bb      	strh	r3, [r7, #12]
 800425c:	e002      	b.n	8004264 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800426c:	89ba      	ldrh	r2, [r7, #12]
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	4619      	mov	r1, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff f94a 	bl	800350c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004278:	e00e      	b.n	8004298 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fc:	d172      	bne.n	80043e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b22      	cmp	r3, #34	; 0x22
 8004302:	d002      	beq.n	800430a <I2C_Slave_STOPF+0x6a>
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b2a      	cmp	r3, #42	; 0x2a
 8004308:	d135      	bne.n	8004376 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0204 	orr.w	r2, r3, #4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd ff6a 	bl	800221c <HAL_DMA_GetState>
 8004348:	4603      	mov	r3, r0
 800434a:	2b01      	cmp	r3, #1
 800434c:	d049      	beq.n	80043e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	4a69      	ldr	r2, [pc, #420]	; (80044f8 <I2C_Slave_STOPF+0x258>)
 8004354:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	4618      	mov	r0, r3
 800435c:	f7fd fde2 	bl	8001f24 <HAL_DMA_Abort_IT>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d03d      	beq.n	80043e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004370:	4610      	mov	r0, r2
 8004372:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004374:	e035      	b.n	80043e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fd ff34 	bl	800221c <HAL_DMA_GetState>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d014      	beq.n	80043e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	4a4e      	ldr	r2, [pc, #312]	; (80044f8 <I2C_Slave_STOPF+0x258>)
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd fdac 	bl	8001f24 <HAL_DMA_Abort_IT>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043dc:	4610      	mov	r0, r2
 80043de:	4798      	blx	r3
 80043e0:	e000      	b.n	80043e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d03e      	beq.n	800446c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d112      	bne.n	8004422 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d112      	bne.n	8004456 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f043 0204 	orr.w	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f8b3 	bl	80045e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800447a:	e039      	b.n	80044f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b2a      	cmp	r3, #42	; 0x2a
 8004480:	d109      	bne.n	8004496 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2228      	movs	r2, #40	; 0x28
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff f832 	bl	80034fa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b28      	cmp	r3, #40	; 0x28
 80044a0:	d111      	bne.n	80044c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a15      	ldr	r2, [pc, #84]	; (80044fc <I2C_Slave_STOPF+0x25c>)
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff f831 	bl	8003526 <HAL_I2C_ListenCpltCallback>
}
 80044c4:	e014      	b.n	80044f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	2b22      	cmp	r3, #34	; 0x22
 80044cc:	d002      	beq.n	80044d4 <I2C_Slave_STOPF+0x234>
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	2b22      	cmp	r3, #34	; 0x22
 80044d2:	d10d      	bne.n	80044f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff f805 	bl	80034fa <HAL_I2C_SlaveRxCpltCallback>
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	08004c45 	.word	0x08004c45
 80044fc:	ffff0000 	.word	0xffff0000

08004500 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d002      	beq.n	8004522 <I2C_Slave_AF+0x22>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b20      	cmp	r3, #32
 8004520:	d129      	bne.n	8004576 <I2C_Slave_AF+0x76>
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b28      	cmp	r3, #40	; 0x28
 8004526:	d126      	bne.n	8004576 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a2c      	ldr	r2, [pc, #176]	; (80045dc <I2C_Slave_AF+0xdc>)
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800453c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004546:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fe ffd9 	bl	8003526 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004574:	e02e      	b.n	80045d4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b21      	cmp	r3, #33	; 0x21
 800457a:	d126      	bne.n	80045ca <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <I2C_Slave_AF+0xdc>)
 8004580:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2221      	movs	r2, #33	; 0x21
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fe ff90 	bl	80034e8 <HAL_I2C_SlaveTxCpltCallback>
}
 80045c8:	e004      	b.n	80045d4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d2:	615a      	str	r2, [r3, #20]
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	ffff0000 	.word	0xffff0000

080045e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045f8:	7bbb      	ldrb	r3, [r7, #14]
 80045fa:	2b10      	cmp	r3, #16
 80045fc:	d002      	beq.n	8004604 <I2C_ITError+0x24>
 80045fe:	7bbb      	ldrb	r3, [r7, #14]
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d10a      	bne.n	800461a <I2C_ITError+0x3a>
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b22      	cmp	r3, #34	; 0x22
 8004608:	d107      	bne.n	800461a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004618:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004620:	2b28      	cmp	r3, #40	; 0x28
 8004622:	d107      	bne.n	8004634 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2228      	movs	r2, #40	; 0x28
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004632:	e015      	b.n	8004660 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004642:	d00a      	beq.n	800465a <I2C_ITError+0x7a>
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b60      	cmp	r3, #96	; 0x60
 8004648:	d007      	beq.n	800465a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466e:	d161      	bne.n	8004734 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004688:	2b01      	cmp	r3, #1
 800468a:	d020      	beq.n	80046ce <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	4a6a      	ldr	r2, [pc, #424]	; (800483c <I2C_ITError+0x25c>)
 8004692:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	4618      	mov	r0, r3
 800469a:	f7fd fc43 	bl	8001f24 <HAL_DMA_Abort_IT>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8089 	beq.w	80047b8 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046c8:	4610      	mov	r0, r2
 80046ca:	4798      	blx	r3
 80046cc:	e074      	b.n	80047b8 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	4a5a      	ldr	r2, [pc, #360]	; (800483c <I2C_ITError+0x25c>)
 80046d4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd fc22 	bl	8001f24 <HAL_DMA_Abort_IT>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d068      	beq.n	80047b8 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d10b      	bne.n	800470c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800472e:	4610      	mov	r0, r2
 8004730:	4798      	blx	r3
 8004732:	e041      	b.n	80047b8 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b60      	cmp	r3, #96	; 0x60
 800473e:	d125      	bne.n	800478c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d10b      	bne.n	8004774 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fe fef2 	bl	800356e <HAL_I2C_AbortCpltCallback>
 800478a:	e015      	b.n	80047b8 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d10b      	bne.n	80047b2 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe fed2 	bl	800355c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10e      	bne.n	80047e6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047f4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b04      	cmp	r3, #4
 8004808:	d113      	bne.n	8004832 <I2C_ITError+0x252>
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	2b28      	cmp	r3, #40	; 0x28
 800480e:	d110      	bne.n	8004832 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <I2C_ITError+0x260>)
 8004814:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fe fe7a 	bl	8003526 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	08004c45 	.word	0x08004c45
 8004840:	ffff0000 	.word	0xffff0000

08004844 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	460b      	mov	r3, r1
 8004852:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d006      	beq.n	800486e <I2C_MasterRequestWrite+0x2a>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d003      	beq.n	800486e <I2C_MasterRequestWrite+0x2a>
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800486c:	d108      	bne.n	8004880 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e00b      	b.n	8004898 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	2b12      	cmp	r3, #18
 8004886:	d107      	bne.n	8004898 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fa75 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048be:	d103      	bne.n	80048c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e035      	b.n	8004938 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d4:	d108      	bne.n	80048e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048d6:	897b      	ldrh	r3, [r7, #10]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048e4:	611a      	str	r2, [r3, #16]
 80048e6:	e01b      	b.n	8004920 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048e8:	897b      	ldrh	r3, [r7, #10]
 80048ea:	11db      	asrs	r3, r3, #7
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0306 	and.w	r3, r3, #6
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f063 030f 	orn	r3, r3, #15
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	490e      	ldr	r1, [pc, #56]	; (8004940 <I2C_MasterRequestWrite+0xfc>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fa9b 	bl	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e010      	b.n	8004938 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4907      	ldr	r1, [pc, #28]	; (8004944 <I2C_MasterRequestWrite+0x100>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fa8b 	bl	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	00010008 	.word	0x00010008
 8004944:	00010002 	.word	0x00010002

08004948 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	4608      	mov	r0, r1
 8004952:	4611      	mov	r1, r2
 8004954:	461a      	mov	r2, r3
 8004956:	4603      	mov	r3, r0
 8004958:	817b      	strh	r3, [r7, #10]
 800495a:	460b      	mov	r3, r1
 800495c:	813b      	strh	r3, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004970:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	2200      	movs	r2, #0
 800497a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fa08 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004998:	d103      	bne.n	80049a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e05f      	b.n	8004a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049a6:	897b      	ldrh	r3, [r7, #10]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	492d      	ldr	r1, [pc, #180]	; (8004a70 <I2C_RequestMemoryWrite+0x128>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fa40 	bl	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e04c      	b.n	8004a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 faaa 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d107      	bne.n	8004a0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e02b      	b.n	8004a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a14:	893b      	ldrh	r3, [r7, #8]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	611a      	str	r2, [r3, #16]
 8004a1e:	e021      	b.n	8004a64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a20:	893b      	ldrh	r3, [r7, #8]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a30:	6a39      	ldr	r1, [r7, #32]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fa84 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d107      	bne.n	8004a56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e005      	b.n	8004a66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a5a:	893b      	ldrh	r3, [r7, #8]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	00010002 	.word	0x00010002

08004a74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	817b      	strh	r3, [r7, #10]
 8004a86:	460b      	mov	r3, r1
 8004a88:	813b      	strh	r3, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f96a 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad4:	d103      	bne.n	8004ade <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e0aa      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ae2:	897b      	ldrh	r3, [r7, #10]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	6a3a      	ldr	r2, [r7, #32]
 8004af6:	4952      	ldr	r1, [pc, #328]	; (8004c40 <I2C_RequestMemoryRead+0x1cc>)
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f9a2 	bl	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e097      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b20:	6a39      	ldr	r1, [r7, #32]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fa0c 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d107      	bne.n	8004b46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e076      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b50:	893b      	ldrh	r3, [r7, #8]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	611a      	str	r2, [r3, #16]
 8004b5a:	e021      	b.n	8004ba0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6c:	6a39      	ldr	r1, [r7, #32]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f9e6 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d107      	bne.n	8004b92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e050      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b96:	893b      	ldrh	r3, [r7, #8]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	6a39      	ldr	r1, [r7, #32]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f9cb 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d107      	bne.n	8004bc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e035      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f8d3 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00d      	beq.n	8004c10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c02:	d103      	bne.n	8004c0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e013      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c10:	897b      	ldrh	r3, [r7, #10]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	6a3a      	ldr	r2, [r7, #32]
 8004c24:	4906      	ldr	r1, [pc, #24]	; (8004c40 <I2C_RequestMemoryRead+0x1cc>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f90b 	bl	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	00010002 	.word	0x00010002

08004c44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c5e:	4b4b      	ldr	r3, [pc, #300]	; (8004d8c <I2C_DMAAbort+0x148>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	08db      	lsrs	r3, r3, #3
 8004c64:	4a4a      	ldr	r2, [pc, #296]	; (8004d90 <I2C_DMAAbort+0x14c>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	0a1a      	lsrs	r2, r3, #8
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00da      	lsls	r2, r3, #3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f043 0220 	orr.w	r2, r3, #32
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c8a:	e00a      	b.n	8004ca2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca0:	d0ea      	beq.n	8004c78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	2200      	movs	r2, #0
 8004cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b60      	cmp	r3, #96	; 0x60
 8004d12:	d10e      	bne.n	8004d32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	f7fe fc1f 	bl	800356e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d30:	e027      	b.n	8004d82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d38:	2b28      	cmp	r3, #40	; 0x28
 8004d3a:	d117      	bne.n	8004d6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2228      	movs	r2, #40	; 0x28
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d6a:	e007      	b.n	8004d7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d7c:	6978      	ldr	r0, [r7, #20]
 8004d7e:	f7fe fbed 	bl	800355c <HAL_I2C_ErrorCallback>
}
 8004d82:	bf00      	nop
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000008 	.word	0x20000008
 8004d90:	14f8b589 	.word	0x14f8b589

08004d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da4:	e025      	b.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d021      	beq.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dae:	f7fc fee9 	bl	8001b84 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d116      	bne.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e023      	b.n	8004e3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10d      	bne.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	43da      	mvns	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	2300      	movne	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	e00c      	b.n	8004e32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf0c      	ite	eq
 8004e2a:	2301      	moveq	r3, #1
 8004e2c:	2300      	movne	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d0b6      	beq.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e50:	e051      	b.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d123      	bne.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e046      	b.n	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d021      	beq.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fc fe67 	bl	8001b84 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d116      	bne.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e020      	b.n	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10c      	bne.n	8004f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	43da      	mvns	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bf14      	ite	ne
 8004f12:	2301      	movne	r3, #1
 8004f14:	2300      	moveq	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	e00b      	b.n	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	43da      	mvns	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4013      	ands	r3, r2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d18d      	bne.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f4c:	e02d      	b.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f900 	bl	8005154 <I2C_IsAcknowledgeFailed>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e02d      	b.n	8004fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d021      	beq.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fc fe0d 	bl	8001b84 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d116      	bne.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f043 0220 	orr.w	r2, r3, #32
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e007      	b.n	8004fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb4:	2b80      	cmp	r3, #128	; 0x80
 8004fb6:	d1ca      	bne.n	8004f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fce:	e02d      	b.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f8bf 	bl	8005154 <I2C_IsAcknowledgeFailed>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e02d      	b.n	800503c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d021      	beq.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fc fdcc 	bl	8001b84 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d116      	bne.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e007      	b.n	800503c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d1ca      	bne.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	08db      	lsrs	r3, r3, #3
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	0a1a      	lsrs	r2, r3, #8
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b01      	subs	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d107      	bne.n	8005082 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e008      	b.n	8005094 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005090:	d0e9      	beq.n	8005066 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000008 	.word	0x20000008
 80050a4:	14f8b589 	.word	0x14f8b589

080050a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050b4:	e042      	b.n	800513c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d119      	bne.n	80050f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0210 	mvn.w	r2, #16
 80050cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e029      	b.n	800514c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f8:	f7fc fd44 	bl	8001b84 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	429a      	cmp	r2, r3
 8005106:	d302      	bcc.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d116      	bne.n	800513c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e007      	b.n	800514c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d1b5      	bne.n	80050b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516a:	d11b      	bne.n	80051a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005174:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	f043 0204 	orr.w	r2, r3, #4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051c0:	d103      	bne.n	80051ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051c8:	e007      	b.n	80051da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051d2:	d102      	bne.n	80051da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2208      	movs	r2, #8
 80051d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e272      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8087 	beq.w	8005312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005204:	4b92      	ldr	r3, [pc, #584]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b04      	cmp	r3, #4
 800520e:	d00c      	beq.n	800522a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005210:	4b8f      	ldr	r3, [pc, #572]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 030c 	and.w	r3, r3, #12
 8005218:	2b08      	cmp	r3, #8
 800521a:	d112      	bne.n	8005242 <HAL_RCC_OscConfig+0x5e>
 800521c:	4b8c      	ldr	r3, [pc, #560]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005228:	d10b      	bne.n	8005242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522a:	4b89      	ldr	r3, [pc, #548]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d06c      	beq.n	8005310 <HAL_RCC_OscConfig+0x12c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d168      	bne.n	8005310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e24c      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524a:	d106      	bne.n	800525a <HAL_RCC_OscConfig+0x76>
 800524c:	4b80      	ldr	r3, [pc, #512]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a7f      	ldr	r2, [pc, #508]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	e02e      	b.n	80052b8 <HAL_RCC_OscConfig+0xd4>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10c      	bne.n	800527c <HAL_RCC_OscConfig+0x98>
 8005262:	4b7b      	ldr	r3, [pc, #492]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7a      	ldr	r2, [pc, #488]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4b78      	ldr	r3, [pc, #480]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a77      	ldr	r2, [pc, #476]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e01d      	b.n	80052b8 <HAL_RCC_OscConfig+0xd4>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0xbc>
 8005286:	4b72      	ldr	r3, [pc, #456]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a71      	ldr	r2, [pc, #452]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800528c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4b6f      	ldr	r3, [pc, #444]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a6e      	ldr	r2, [pc, #440]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e00b      	b.n	80052b8 <HAL_RCC_OscConfig+0xd4>
 80052a0:	4b6b      	ldr	r3, [pc, #428]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a6a      	ldr	r2, [pc, #424]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 80052a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	4b68      	ldr	r3, [pc, #416]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a67      	ldr	r2, [pc, #412]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 80052b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d013      	beq.n	80052e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fc fc60 	bl	8001b84 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c8:	f7fc fc5c 	bl	8001b84 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b64      	cmp	r3, #100	; 0x64
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e200      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	4b5d      	ldr	r3, [pc, #372]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0xe4>
 80052e6:	e014      	b.n	8005312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fc fc4c 	bl	8001b84 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f0:	f7fc fc48 	bl	8001b84 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1ec      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005302:	4b53      	ldr	r3, [pc, #332]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x10c>
 800530e:	e000      	b.n	8005312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d063      	beq.n	80053e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800531e:	4b4c      	ldr	r3, [pc, #304]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800532a:	4b49      	ldr	r3, [pc, #292]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b08      	cmp	r3, #8
 8005334:	d11c      	bne.n	8005370 <HAL_RCC_OscConfig+0x18c>
 8005336:	4b46      	ldr	r3, [pc, #280]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d116      	bne.n	8005370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005342:	4b43      	ldr	r3, [pc, #268]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_RCC_OscConfig+0x176>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d001      	beq.n	800535a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e1c0      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535a:	4b3d      	ldr	r3, [pc, #244]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4939      	ldr	r1, [pc, #228]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536e:	e03a      	b.n	80053e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d020      	beq.n	80053ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005378:	4b36      	ldr	r3, [pc, #216]	; (8005454 <HAL_RCC_OscConfig+0x270>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537e:	f7fc fc01 	bl	8001b84 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005386:	f7fc fbfd 	bl	8001b84 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e1a1      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b2a      	ldr	r3, [pc, #168]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4927      	ldr	r1, [pc, #156]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
 80053b8:	e015      	b.n	80053e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ba:	4b26      	ldr	r3, [pc, #152]	; (8005454 <HAL_RCC_OscConfig+0x270>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7fc fbe0 	bl	8001b84 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c8:	f7fc fbdc 	bl	8001b84 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e180      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053da:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d03a      	beq.n	8005468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d019      	beq.n	800542e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053fa:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_RCC_OscConfig+0x274>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005400:	f7fc fbc0 	bl	8001b84 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005408:	f7fc fbbc 	bl	8001b84 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e160      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <HAL_RCC_OscConfig+0x26c>)
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005426:	2001      	movs	r0, #1
 8005428:	f000 fad8 	bl	80059dc <RCC_Delay>
 800542c:	e01c      	b.n	8005468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_RCC_OscConfig+0x274>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005434:	f7fc fba6 	bl	8001b84 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543a:	e00f      	b.n	800545c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800543c:	f7fc fba2 	bl	8001b84 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d908      	bls.n	800545c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e146      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	42420000 	.word	0x42420000
 8005458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800545c:	4b92      	ldr	r3, [pc, #584]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e9      	bne.n	800543c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80a6 	beq.w	80055c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547a:	4b8b      	ldr	r3, [pc, #556]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	4b88      	ldr	r3, [pc, #544]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	4a87      	ldr	r2, [pc, #540]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800548c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005490:	61d3      	str	r3, [r2, #28]
 8005492:	4b85      	ldr	r3, [pc, #532]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a2:	4b82      	ldr	r3, [pc, #520]	; (80056ac <HAL_RCC_OscConfig+0x4c8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d118      	bne.n	80054e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ae:	4b7f      	ldr	r3, [pc, #508]	; (80056ac <HAL_RCC_OscConfig+0x4c8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a7e      	ldr	r2, [pc, #504]	; (80056ac <HAL_RCC_OscConfig+0x4c8>)
 80054b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ba:	f7fc fb63 	bl	8001b84 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c2:	f7fc fb5f 	bl	8001b84 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b64      	cmp	r3, #100	; 0x64
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e103      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d4:	4b75      	ldr	r3, [pc, #468]	; (80056ac <HAL_RCC_OscConfig+0x4c8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_OscConfig+0x312>
 80054e8:	4b6f      	ldr	r3, [pc, #444]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	4a6e      	ldr	r2, [pc, #440]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6213      	str	r3, [r2, #32]
 80054f4:	e02d      	b.n	8005552 <HAL_RCC_OscConfig+0x36e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <HAL_RCC_OscConfig+0x334>
 80054fe:	4b6a      	ldr	r3, [pc, #424]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	4a69      	ldr	r2, [pc, #420]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	6213      	str	r3, [r2, #32]
 800550a:	4b67      	ldr	r3, [pc, #412]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4a66      	ldr	r2, [pc, #408]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005510:	f023 0304 	bic.w	r3, r3, #4
 8005514:	6213      	str	r3, [r2, #32]
 8005516:	e01c      	b.n	8005552 <HAL_RCC_OscConfig+0x36e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2b05      	cmp	r3, #5
 800551e:	d10c      	bne.n	800553a <HAL_RCC_OscConfig+0x356>
 8005520:	4b61      	ldr	r3, [pc, #388]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	4a60      	ldr	r2, [pc, #384]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005526:	f043 0304 	orr.w	r3, r3, #4
 800552a:	6213      	str	r3, [r2, #32]
 800552c:	4b5e      	ldr	r3, [pc, #376]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	4a5d      	ldr	r2, [pc, #372]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	6213      	str	r3, [r2, #32]
 8005538:	e00b      	b.n	8005552 <HAL_RCC_OscConfig+0x36e>
 800553a:	4b5b      	ldr	r3, [pc, #364]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	4a5a      	ldr	r2, [pc, #360]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	6213      	str	r3, [r2, #32]
 8005546:	4b58      	ldr	r3, [pc, #352]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	4a57      	ldr	r2, [pc, #348]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800554c:	f023 0304 	bic.w	r3, r3, #4
 8005550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d015      	beq.n	8005586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555a:	f7fc fb13 	bl	8001b84 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005560:	e00a      	b.n	8005578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fc fb0f 	bl	8001b84 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e0b1      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005578:	4b4b      	ldr	r3, [pc, #300]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ee      	beq.n	8005562 <HAL_RCC_OscConfig+0x37e>
 8005584:	e014      	b.n	80055b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005586:	f7fc fafd 	bl	8001b84 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fc faf9 	bl	8001b84 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e09b      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a4:	4b40      	ldr	r3, [pc, #256]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ee      	bne.n	800558e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b3c      	ldr	r3, [pc, #240]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	4a3b      	ldr	r2, [pc, #236]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8087 	beq.w	80056da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055cc:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 030c 	and.w	r3, r3, #12
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d061      	beq.n	800569c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d146      	bne.n	800566e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e0:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <HAL_RCC_OscConfig+0x4cc>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fc facd 	bl	8001b84 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fc fac9 	bl	8001b84 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e06d      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005600:	4b29      	ldr	r3, [pc, #164]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f0      	bne.n	80055ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005614:	d108      	bne.n	8005628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005616:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	4921      	ldr	r1, [pc, #132]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005624:	4313      	orrs	r3, r2
 8005626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005628:	4b1f      	ldr	r3, [pc, #124]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a19      	ldr	r1, [r3, #32]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	430b      	orrs	r3, r1
 800563a:	491b      	ldr	r1, [pc, #108]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005640:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <HAL_RCC_OscConfig+0x4cc>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005646:	f7fc fa9d 	bl	8001b84 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564e:	f7fc fa99 	bl	8001b84 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e03d      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x46a>
 800566c:	e035      	b.n	80056da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <HAL_RCC_OscConfig+0x4cc>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fc fa86 	bl	8001b84 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567c:	f7fc fa82 	bl	8001b84 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e026      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_RCC_OscConfig+0x4c4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x498>
 800569a:	e01e      	b.n	80056da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e019      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40007000 	.word	0x40007000
 80056b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <HAL_RCC_OscConfig+0x500>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d106      	bne.n	80056d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d001      	beq.n	80056da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40021000 	.word	0x40021000

080056e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e0d0      	b.n	800589e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056fc:	4b6a      	ldr	r3, [pc, #424]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d910      	bls.n	800572c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570a:	4b67      	ldr	r3, [pc, #412]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f023 0207 	bic.w	r2, r3, #7
 8005712:	4965      	ldr	r1, [pc, #404]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	4313      	orrs	r3, r2
 8005718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571a:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d001      	beq.n	800572c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0b8      	b.n	800589e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d020      	beq.n	800577a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005744:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4a58      	ldr	r2, [pc, #352]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 800574a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800574e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800575c:	4b53      	ldr	r3, [pc, #332]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a52      	ldr	r2, [pc, #328]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005762:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005766:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005768:	4b50      	ldr	r3, [pc, #320]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	494d      	ldr	r1, [pc, #308]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d040      	beq.n	8005808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d107      	bne.n	800579e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578e:	4b47      	ldr	r3, [pc, #284]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d115      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e07f      	b.n	800589e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a6:	4b41      	ldr	r3, [pc, #260]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e073      	b.n	800589e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b6:	4b3d      	ldr	r3, [pc, #244]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e06b      	b.n	800589e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057c6:	4b39      	ldr	r3, [pc, #228]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f023 0203 	bic.w	r2, r3, #3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4936      	ldr	r1, [pc, #216]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057d8:	f7fc f9d4 	bl	8001b84 <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057de:	e00a      	b.n	80057f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e0:	f7fc f9d0 	bl	8001b84 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e053      	b.n	800589e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f6:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 020c 	and.w	r2, r3, #12
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	429a      	cmp	r2, r3
 8005806:	d1eb      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005808:	4b27      	ldr	r3, [pc, #156]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d210      	bcs.n	8005838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f023 0207 	bic.w	r2, r3, #7
 800581e:	4922      	ldr	r1, [pc, #136]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	4313      	orrs	r3, r2
 8005824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d001      	beq.n	8005838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e032      	b.n	800589e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005844:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	4916      	ldr	r1, [pc, #88]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005852:	4313      	orrs	r3, r2
 8005854:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	490e      	ldr	r1, [pc, #56]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005872:	4313      	orrs	r3, r2
 8005874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005876:	f000 f821 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 800587a:	4602      	mov	r2, r0
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	490a      	ldr	r1, [pc, #40]	; (80058b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005888:	5ccb      	ldrb	r3, [r1, r3]
 800588a:	fa22 f303 	lsr.w	r3, r2, r3
 800588e:	4a09      	ldr	r2, [pc, #36]	; (80058b4 <HAL_RCC_ClockConfig+0x1cc>)
 8005890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <HAL_RCC_ClockConfig+0x1d0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f7fc f932 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40022000 	.word	0x40022000
 80058ac:	40021000 	.word	0x40021000
 80058b0:	08009230 	.word	0x08009230
 80058b4:	20000008 	.word	0x20000008
 80058b8:	2000000c 	.word	0x2000000c

080058bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058bc:	b490      	push	{r4, r7}
 80058be:	b08a      	sub	sp, #40	; 0x28
 80058c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80058c2:	4b29      	ldr	r3, [pc, #164]	; (8005968 <HAL_RCC_GetSysClockFreq+0xac>)
 80058c4:	1d3c      	adds	r4, r7, #4
 80058c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80058cc:	f240 2301 	movw	r3, #513	; 0x201
 80058d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	2300      	movs	r3, #0
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80058e6:	4b21      	ldr	r3, [pc, #132]	; (800596c <HAL_RCC_GetSysClockFreq+0xb0>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d002      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x40>
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d003      	beq.n	8005902 <HAL_RCC_GetSysClockFreq+0x46>
 80058fa:	e02b      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058fc:	4b1c      	ldr	r3, [pc, #112]	; (8005970 <HAL_RCC_GetSysClockFreq+0xb4>)
 80058fe:	623b      	str	r3, [r7, #32]
      break;
 8005900:	e02b      	b.n	800595a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	0c9b      	lsrs	r3, r3, #18
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	3328      	adds	r3, #40	; 0x28
 800590c:	443b      	add	r3, r7
 800590e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005912:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d012      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	0c5b      	lsrs	r3, r3, #17
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	3328      	adds	r3, #40	; 0x28
 800592a:	443b      	add	r3, r7
 800592c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005930:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005936:	fb03 f202 	mul.w	r2, r3, r2
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	e004      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4a0b      	ldr	r2, [pc, #44]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005948:	fb02 f303 	mul.w	r3, r2, r3
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	623b      	str	r3, [r7, #32]
      break;
 8005952:	e002      	b.n	800595a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005956:	623b      	str	r3, [r7, #32]
      break;
 8005958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800595a:	6a3b      	ldr	r3, [r7, #32]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3728      	adds	r7, #40	; 0x28
 8005960:	46bd      	mov	sp, r7
 8005962:	bc90      	pop	{r4, r7}
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	08009220 	.word	0x08009220
 800596c:	40021000 	.word	0x40021000
 8005970:	007a1200 	.word	0x007a1200
 8005974:	003d0900 	.word	0x003d0900

08005978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800597c:	4b02      	ldr	r3, [pc, #8]	; (8005988 <HAL_RCC_GetHCLKFreq+0x10>)
 800597e:	681b      	ldr	r3, [r3, #0]
}
 8005980:	4618      	mov	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr
 8005988:	20000008 	.word	0x20000008

0800598c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005990:	f7ff fff2 	bl	8005978 <HAL_RCC_GetHCLKFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	4903      	ldr	r1, [pc, #12]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40021000 	.word	0x40021000
 80059b0:	08009240 	.word	0x08009240

080059b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059b8:	f7ff ffde 	bl	8005978 <HAL_RCC_GetHCLKFreq>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	0adb      	lsrs	r3, r3, #11
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	4903      	ldr	r1, [pc, #12]	; (80059d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ca:	5ccb      	ldrb	r3, [r1, r3]
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40021000 	.word	0x40021000
 80059d8:	08009240 	.word	0x08009240

080059dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <RCC_Delay+0x34>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <RCC_Delay+0x38>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	0a5b      	lsrs	r3, r3, #9
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059f8:	bf00      	nop
  }
  while (Delay --);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1e5a      	subs	r2, r3, #1
 80059fe:	60fa      	str	r2, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f9      	bne.n	80059f8 <RCC_Delay+0x1c>
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	20000008 	.word	0x20000008
 8005a14:	10624dd3 	.word	0x10624dd3

08005a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e03f      	b.n	8005aaa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fb fe44 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2224      	movs	r2, #36	; 0x24
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fc25 	bl	80062ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b08a      	sub	sp, #40	; 0x28
 8005ab6:	af02      	add	r7, sp, #8
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d17c      	bne.n	8005bcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_UART_Transmit+0x2c>
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e075      	b.n	8005bce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_UART_Transmit+0x3e>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e06e      	b.n	8005bce <HAL_UART_Transmit+0x11c>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2221      	movs	r2, #33	; 0x21
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b06:	f7fc f83d 	bl	8001b84 <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d108      	bne.n	8005b34 <HAL_UART_Transmit+0x82>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e003      	b.n	8005b3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b44:	e02a      	b.n	8005b9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2180      	movs	r1, #128	; 0x80
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fa11 	bl	8005f78 <UART_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e036      	b.n	8005bce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10b      	bne.n	8005b7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	3302      	adds	r3, #2
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e007      	b.n	8005b8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1cf      	bne.n	8005b46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2140      	movs	r1, #64	; 0x40
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f9e1 	bl	8005f78 <UART_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e006      	b.n	8005bce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <HAL_UART_IRQHandler+0x52>
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa99 	bl	800615a <UART_Receive_IT>
      return;
 8005c28:	e17b      	b.n	8005f22 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80b1 	beq.w	8005d94 <HAL_UART_IRQHandler+0x1bc>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d105      	bne.n	8005c48 <HAL_UART_IRQHandler+0x70>
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80a6 	beq.w	8005d94 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <HAL_UART_IRQHandler+0x90>
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_UART_IRQHandler+0xb0>
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	f043 0202 	orr.w	r2, r3, #2
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <HAL_UART_IRQHandler+0xd0>
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f043 0204 	orr.w	r2, r3, #4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00f      	beq.n	8005cd2 <HAL_UART_IRQHandler+0xfa>
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d104      	bne.n	8005cc6 <HAL_UART_IRQHandler+0xee>
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f043 0208 	orr.w	r2, r3, #8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 811e 	beq.w	8005f18 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x11e>
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fa32 	bl	800615a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf14      	ite	ne
 8005d04:	2301      	movne	r3, #1
 8005d06:	2300      	moveq	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <HAL_UART_IRQHandler+0x146>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d031      	beq.n	8005d82 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f974 	bl	800600c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d023      	beq.n	8005d7a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695a      	ldr	r2, [r3, #20]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d40:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d013      	beq.n	8005d72 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	4a76      	ldr	r2, [pc, #472]	; (8005f28 <HAL_UART_IRQHandler+0x350>)
 8005d50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fc f8e4 	bl	8001f24 <HAL_DMA_Abort_IT>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d016      	beq.n	8005d90 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d70:	e00e      	b.n	8005d90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f8ec 	bl	8005f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d78:	e00a      	b.n	8005d90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8e8 	bl	8005f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d80:	e006      	b.n	8005d90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f8e4 	bl	8005f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d8e:	e0c3      	b.n	8005f18 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	bf00      	nop
    return;
 8005d92:	e0c1      	b.n	8005f18 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f040 80a1 	bne.w	8005ee0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 809b 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8095 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d04e      	beq.n	8005e78 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005de4:	8a3b      	ldrh	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8098 	beq.w	8005f1c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005df0:	8a3a      	ldrh	r2, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	f080 8092 	bcs.w	8005f1c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8a3a      	ldrh	r2, [r7, #16]
 8005dfc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d02b      	beq.n	8005e60 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e16:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695a      	ldr	r2, [r3, #20]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e36:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0210 	bic.w	r2, r2, #16
 8005e54:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fc f828 	bl	8001eb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f876 	bl	8005f62 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e76:	e051      	b.n	8005f1c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d047      	beq.n	8005f20 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005e90:	8a7b      	ldrh	r3, [r7, #18]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d044      	beq.n	8005f20 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ea4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0210 	bic.w	r2, r2, #16
 8005ed2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ed4:	8a7b      	ldrh	r3, [r7, #18]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f842 	bl	8005f62 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ede:	e01f      	b.n	8005f20 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <HAL_UART_IRQHandler+0x324>
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f8c9 	bl	800608c <UART_Transmit_IT>
    return;
 8005efa:	e012      	b.n	8005f22 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00d      	beq.n	8005f22 <HAL_UART_IRQHandler+0x34a>
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f90a 	bl	800612a <UART_EndTransmit_IT>
    return;
 8005f16:	e004      	b.n	8005f22 <HAL_UART_IRQHandler+0x34a>
    return;
 8005f18:	bf00      	nop
 8005f1a:	e002      	b.n	8005f22 <HAL_UART_IRQHandler+0x34a>
      return;
 8005f1c:	bf00      	nop
 8005f1e:	e000      	b.n	8005f22 <HAL_UART_IRQHandler+0x34a>
      return;
 8005f20:	bf00      	nop
  }
}
 8005f22:	3728      	adds	r7, #40	; 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	08006065 	.word	0x08006065

08005f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr

08005f3e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f88:	e02c      	b.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d028      	beq.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f98:	f7fb fdf4 	bl	8001b84 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d21d      	bcs.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fb6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e00f      	b.n	8006004 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4013      	ands	r3, r2
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2301      	moveq	r3, #1
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d0c3      	beq.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006022:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	2b01      	cmp	r3, #1
 800603a:	d107      	bne.n	800604c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0210 	bic.w	r2, r2, #16
 800604a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff ff66 	bl	8005f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b21      	cmp	r3, #33	; 0x21
 800609e:	d13e      	bne.n	800611e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a8:	d114      	bne.n	80060d4 <UART_Transmit_IT+0x48>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d110      	bne.n	80060d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]
 80060d2:	e008      	b.n	80060e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	1c59      	adds	r1, r3, #1
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6211      	str	r1, [r2, #32]
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4619      	mov	r1, r3
 80060f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10f      	bne.n	800611a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006108:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006118:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	e000      	b.n	8006120 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800611e:	2302      	movs	r3, #2
  }
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr

0800612a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff feee 	bl	8005f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b086      	sub	sp, #24
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b22      	cmp	r3, #34	; 0x22
 800616c:	f040 8099 	bne.w	80062a2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006178:	d117      	bne.n	80061aa <UART_Receive_IT+0x50>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d113      	bne.n	80061aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006198:	b29a      	uxth	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	1c9a      	adds	r2, r3, #2
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28
 80061a8:	e026      	b.n	80061f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061bc:	d007      	beq.n	80061ce <UART_Receive_IT+0x74>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <UART_Receive_IT+0x82>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e008      	b.n	80061ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29b      	uxth	r3, r3
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4619      	mov	r1, r3
 8006206:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006208:	2b00      	cmp	r3, #0
 800620a:	d148      	bne.n	800629e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0220 	bic.w	r2, r2, #32
 800621a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800622a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	2b01      	cmp	r3, #1
 800624a:	d123      	bne.n	8006294 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0210 	bic.w	r2, r2, #16
 8006260:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d10a      	bne.n	8006286 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fe68 	bl	8005f62 <HAL_UARTEx_RxEventCallback>
 8006292:	e002      	b.n	800629a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fe52 	bl	8005f3e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e002      	b.n	80062a4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80062e6:	f023 030c 	bic.w	r3, r3, #12
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	430b      	orrs	r3, r1
 80062f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a2c      	ldr	r2, [pc, #176]	; (80063c0 <UART_SetConfig+0x114>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006314:	f7ff fb4e 	bl	80059b4 <HAL_RCC_GetPCLK2Freq>
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	e002      	b.n	8006322 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800631c:	f7ff fb36 	bl	800598c <HAL_RCC_GetPCLK1Freq>
 8006320:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009a      	lsls	r2, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	fbb2 f3f3 	udiv	r3, r2, r3
 8006338:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <UART_SetConfig+0x118>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	0119      	lsls	r1, r3, #4
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009a      	lsls	r2, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	fbb2 f2f3 	udiv	r2, r2, r3
 8006358:	4b1a      	ldr	r3, [pc, #104]	; (80063c4 <UART_SetConfig+0x118>)
 800635a:	fba3 0302 	umull	r0, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	2064      	movs	r0, #100	; 0x64
 8006362:	fb00 f303 	mul.w	r3, r0, r3
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	3332      	adds	r3, #50	; 0x32
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <UART_SetConfig+0x118>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006378:	4419      	add	r1, r3
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	009a      	lsls	r2, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <UART_SetConfig+0x118>)
 8006392:	fba3 0302 	umull	r0, r3, r3, r2
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	2064      	movs	r0, #100	; 0x64
 800639a:	fb00 f303 	mul.w	r3, r0, r3
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	011b      	lsls	r3, r3, #4
 80063a2:	3332      	adds	r3, #50	; 0x32
 80063a4:	4a07      	ldr	r2, [pc, #28]	; (80063c4 <UART_SetConfig+0x118>)
 80063a6:	fba2 2303 	umull	r2, r3, r2, r3
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	f003 020f 	and.w	r2, r3, #15
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	440a      	add	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40013800 	.word	0x40013800
 80063c4:	51eb851f 	.word	0x51eb851f

080063c8 <__errno>:
 80063c8:	4b01      	ldr	r3, [pc, #4]	; (80063d0 <__errno+0x8>)
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20000014 	.word	0x20000014

080063d4 <__libc_init_array>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	2600      	movs	r6, #0
 80063d8:	4d0c      	ldr	r5, [pc, #48]	; (800640c <__libc_init_array+0x38>)
 80063da:	4c0d      	ldr	r4, [pc, #52]	; (8006410 <__libc_init_array+0x3c>)
 80063dc:	1b64      	subs	r4, r4, r5
 80063de:	10a4      	asrs	r4, r4, #2
 80063e0:	42a6      	cmp	r6, r4
 80063e2:	d109      	bne.n	80063f8 <__libc_init_array+0x24>
 80063e4:	f002 fefc 	bl	80091e0 <_init>
 80063e8:	2600      	movs	r6, #0
 80063ea:	4d0a      	ldr	r5, [pc, #40]	; (8006414 <__libc_init_array+0x40>)
 80063ec:	4c0a      	ldr	r4, [pc, #40]	; (8006418 <__libc_init_array+0x44>)
 80063ee:	1b64      	subs	r4, r4, r5
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	42a6      	cmp	r6, r4
 80063f4:	d105      	bne.n	8006402 <__libc_init_array+0x2e>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fc:	4798      	blx	r3
 80063fe:	3601      	adds	r6, #1
 8006400:	e7ee      	b.n	80063e0 <__libc_init_array+0xc>
 8006402:	f855 3b04 	ldr.w	r3, [r5], #4
 8006406:	4798      	blx	r3
 8006408:	3601      	adds	r6, #1
 800640a:	e7f2      	b.n	80063f2 <__libc_init_array+0x1e>
 800640c:	08009624 	.word	0x08009624
 8006410:	08009624 	.word	0x08009624
 8006414:	08009624 	.word	0x08009624
 8006418:	08009628 	.word	0x08009628

0800641c <memset>:
 800641c:	4603      	mov	r3, r0
 800641e:	4402      	add	r2, r0
 8006420:	4293      	cmp	r3, r2
 8006422:	d100      	bne.n	8006426 <memset+0xa>
 8006424:	4770      	bx	lr
 8006426:	f803 1b01 	strb.w	r1, [r3], #1
 800642a:	e7f9      	b.n	8006420 <memset+0x4>

0800642c <__cvt>:
 800642c:	2b00      	cmp	r3, #0
 800642e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006432:	461f      	mov	r7, r3
 8006434:	bfbb      	ittet	lt
 8006436:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800643a:	461f      	movlt	r7, r3
 800643c:	2300      	movge	r3, #0
 800643e:	232d      	movlt	r3, #45	; 0x2d
 8006440:	b088      	sub	sp, #32
 8006442:	4614      	mov	r4, r2
 8006444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006446:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006448:	7013      	strb	r3, [r2, #0]
 800644a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800644c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006450:	f023 0820 	bic.w	r8, r3, #32
 8006454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006458:	d005      	beq.n	8006466 <__cvt+0x3a>
 800645a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800645e:	d100      	bne.n	8006462 <__cvt+0x36>
 8006460:	3501      	adds	r5, #1
 8006462:	2302      	movs	r3, #2
 8006464:	e000      	b.n	8006468 <__cvt+0x3c>
 8006466:	2303      	movs	r3, #3
 8006468:	aa07      	add	r2, sp, #28
 800646a:	9204      	str	r2, [sp, #16]
 800646c:	aa06      	add	r2, sp, #24
 800646e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006472:	e9cd 3500 	strd	r3, r5, [sp]
 8006476:	4622      	mov	r2, r4
 8006478:	463b      	mov	r3, r7
 800647a:	f000 fce5 	bl	8006e48 <_dtoa_r>
 800647e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006482:	4606      	mov	r6, r0
 8006484:	d102      	bne.n	800648c <__cvt+0x60>
 8006486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006488:	07db      	lsls	r3, r3, #31
 800648a:	d522      	bpl.n	80064d2 <__cvt+0xa6>
 800648c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006490:	eb06 0905 	add.w	r9, r6, r5
 8006494:	d110      	bne.n	80064b8 <__cvt+0x8c>
 8006496:	7833      	ldrb	r3, [r6, #0]
 8006498:	2b30      	cmp	r3, #48	; 0x30
 800649a:	d10a      	bne.n	80064b2 <__cvt+0x86>
 800649c:	2200      	movs	r2, #0
 800649e:	2300      	movs	r3, #0
 80064a0:	4620      	mov	r0, r4
 80064a2:	4639      	mov	r1, r7
 80064a4:	f7fa fa80 	bl	80009a8 <__aeabi_dcmpeq>
 80064a8:	b918      	cbnz	r0, 80064b2 <__cvt+0x86>
 80064aa:	f1c5 0501 	rsb	r5, r5, #1
 80064ae:	f8ca 5000 	str.w	r5, [sl]
 80064b2:	f8da 3000 	ldr.w	r3, [sl]
 80064b6:	4499      	add	r9, r3
 80064b8:	2200      	movs	r2, #0
 80064ba:	2300      	movs	r3, #0
 80064bc:	4620      	mov	r0, r4
 80064be:	4639      	mov	r1, r7
 80064c0:	f7fa fa72 	bl	80009a8 <__aeabi_dcmpeq>
 80064c4:	b108      	cbz	r0, 80064ca <__cvt+0x9e>
 80064c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80064ca:	2230      	movs	r2, #48	; 0x30
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	454b      	cmp	r3, r9
 80064d0:	d307      	bcc.n	80064e2 <__cvt+0xb6>
 80064d2:	4630      	mov	r0, r6
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80064d8:	1b9b      	subs	r3, r3, r6
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	b008      	add	sp, #32
 80064de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e2:	1c59      	adds	r1, r3, #1
 80064e4:	9107      	str	r1, [sp, #28]
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e7f0      	b.n	80064cc <__cvt+0xa0>

080064ea <__exponent>:
 80064ea:	4603      	mov	r3, r0
 80064ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ee:	2900      	cmp	r1, #0
 80064f0:	f803 2b02 	strb.w	r2, [r3], #2
 80064f4:	bfb6      	itet	lt
 80064f6:	222d      	movlt	r2, #45	; 0x2d
 80064f8:	222b      	movge	r2, #43	; 0x2b
 80064fa:	4249      	neglt	r1, r1
 80064fc:	2909      	cmp	r1, #9
 80064fe:	7042      	strb	r2, [r0, #1]
 8006500:	dd2b      	ble.n	800655a <__exponent+0x70>
 8006502:	f10d 0407 	add.w	r4, sp, #7
 8006506:	46a4      	mov	ip, r4
 8006508:	270a      	movs	r7, #10
 800650a:	fb91 f6f7 	sdiv	r6, r1, r7
 800650e:	460a      	mov	r2, r1
 8006510:	46a6      	mov	lr, r4
 8006512:	fb07 1516 	mls	r5, r7, r6, r1
 8006516:	2a63      	cmp	r2, #99	; 0x63
 8006518:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800651c:	4631      	mov	r1, r6
 800651e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006522:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006526:	dcf0      	bgt.n	800650a <__exponent+0x20>
 8006528:	3130      	adds	r1, #48	; 0x30
 800652a:	f1ae 0502 	sub.w	r5, lr, #2
 800652e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006532:	4629      	mov	r1, r5
 8006534:	1c44      	adds	r4, r0, #1
 8006536:	4561      	cmp	r1, ip
 8006538:	d30a      	bcc.n	8006550 <__exponent+0x66>
 800653a:	f10d 0209 	add.w	r2, sp, #9
 800653e:	eba2 020e 	sub.w	r2, r2, lr
 8006542:	4565      	cmp	r5, ip
 8006544:	bf88      	it	hi
 8006546:	2200      	movhi	r2, #0
 8006548:	4413      	add	r3, r2
 800654a:	1a18      	subs	r0, r3, r0
 800654c:	b003      	add	sp, #12
 800654e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006550:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006554:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006558:	e7ed      	b.n	8006536 <__exponent+0x4c>
 800655a:	2330      	movs	r3, #48	; 0x30
 800655c:	3130      	adds	r1, #48	; 0x30
 800655e:	7083      	strb	r3, [r0, #2]
 8006560:	70c1      	strb	r1, [r0, #3]
 8006562:	1d03      	adds	r3, r0, #4
 8006564:	e7f1      	b.n	800654a <__exponent+0x60>
	...

08006568 <_printf_float>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	b091      	sub	sp, #68	; 0x44
 800656e:	460c      	mov	r4, r1
 8006570:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006574:	4616      	mov	r6, r2
 8006576:	461f      	mov	r7, r3
 8006578:	4605      	mov	r5, r0
 800657a:	f001 fa53 	bl	8007a24 <_localeconv_r>
 800657e:	6803      	ldr	r3, [r0, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	9309      	str	r3, [sp, #36]	; 0x24
 8006584:	f7f9 fde4 	bl	8000150 <strlen>
 8006588:	2300      	movs	r3, #0
 800658a:	930e      	str	r3, [sp, #56]	; 0x38
 800658c:	f8d8 3000 	ldr.w	r3, [r8]
 8006590:	900a      	str	r0, [sp, #40]	; 0x28
 8006592:	3307      	adds	r3, #7
 8006594:	f023 0307 	bic.w	r3, r3, #7
 8006598:	f103 0208 	add.w	r2, r3, #8
 800659c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80065a0:	f8d4 b000 	ldr.w	fp, [r4]
 80065a4:	f8c8 2000 	str.w	r2, [r8]
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80065b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80065b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	4640      	mov	r0, r8
 80065c0:	4b9c      	ldr	r3, [pc, #624]	; (8006834 <_printf_float+0x2cc>)
 80065c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065c4:	f7fa fa22 	bl	8000a0c <__aeabi_dcmpun>
 80065c8:	bb70      	cbnz	r0, 8006628 <_printf_float+0xc0>
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	4640      	mov	r0, r8
 80065d0:	4b98      	ldr	r3, [pc, #608]	; (8006834 <_printf_float+0x2cc>)
 80065d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065d4:	f7fa f9fc 	bl	80009d0 <__aeabi_dcmple>
 80065d8:	bb30      	cbnz	r0, 8006628 <_printf_float+0xc0>
 80065da:	2200      	movs	r2, #0
 80065dc:	2300      	movs	r3, #0
 80065de:	4640      	mov	r0, r8
 80065e0:	4651      	mov	r1, sl
 80065e2:	f7fa f9eb 	bl	80009bc <__aeabi_dcmplt>
 80065e6:	b110      	cbz	r0, 80065ee <_printf_float+0x86>
 80065e8:	232d      	movs	r3, #45	; 0x2d
 80065ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ee:	4b92      	ldr	r3, [pc, #584]	; (8006838 <_printf_float+0x2d0>)
 80065f0:	4892      	ldr	r0, [pc, #584]	; (800683c <_printf_float+0x2d4>)
 80065f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80065f6:	bf94      	ite	ls
 80065f8:	4698      	movls	r8, r3
 80065fa:	4680      	movhi	r8, r0
 80065fc:	2303      	movs	r3, #3
 80065fe:	f04f 0a00 	mov.w	sl, #0
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	f02b 0304 	bic.w	r3, fp, #4
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	4633      	mov	r3, r6
 800660c:	4621      	mov	r1, r4
 800660e:	4628      	mov	r0, r5
 8006610:	9700      	str	r7, [sp, #0]
 8006612:	aa0f      	add	r2, sp, #60	; 0x3c
 8006614:	f000 f9d4 	bl	80069c0 <_printf_common>
 8006618:	3001      	adds	r0, #1
 800661a:	f040 8090 	bne.w	800673e <_printf_float+0x1d6>
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	b011      	add	sp, #68	; 0x44
 8006624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006628:	4642      	mov	r2, r8
 800662a:	4653      	mov	r3, sl
 800662c:	4640      	mov	r0, r8
 800662e:	4651      	mov	r1, sl
 8006630:	f7fa f9ec 	bl	8000a0c <__aeabi_dcmpun>
 8006634:	b148      	cbz	r0, 800664a <_printf_float+0xe2>
 8006636:	f1ba 0f00 	cmp.w	sl, #0
 800663a:	bfb8      	it	lt
 800663c:	232d      	movlt	r3, #45	; 0x2d
 800663e:	4880      	ldr	r0, [pc, #512]	; (8006840 <_printf_float+0x2d8>)
 8006640:	bfb8      	it	lt
 8006642:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006646:	4b7f      	ldr	r3, [pc, #508]	; (8006844 <_printf_float+0x2dc>)
 8006648:	e7d3      	b.n	80065f2 <_printf_float+0x8a>
 800664a:	6863      	ldr	r3, [r4, #4]
 800664c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	d142      	bne.n	80066da <_printf_float+0x172>
 8006654:	2306      	movs	r3, #6
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	9206      	str	r2, [sp, #24]
 800665c:	aa0e      	add	r2, sp, #56	; 0x38
 800665e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006662:	aa0d      	add	r2, sp, #52	; 0x34
 8006664:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006668:	9203      	str	r2, [sp, #12]
 800666a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800666e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	4642      	mov	r2, r8
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	4628      	mov	r0, r5
 800667c:	4653      	mov	r3, sl
 800667e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006680:	f7ff fed4 	bl	800642c <__cvt>
 8006684:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006686:	4680      	mov	r8, r0
 8006688:	2947      	cmp	r1, #71	; 0x47
 800668a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800668c:	d108      	bne.n	80066a0 <_printf_float+0x138>
 800668e:	1cc8      	adds	r0, r1, #3
 8006690:	db02      	blt.n	8006698 <_printf_float+0x130>
 8006692:	6863      	ldr	r3, [r4, #4]
 8006694:	4299      	cmp	r1, r3
 8006696:	dd40      	ble.n	800671a <_printf_float+0x1b2>
 8006698:	f1a9 0902 	sub.w	r9, r9, #2
 800669c:	fa5f f989 	uxtb.w	r9, r9
 80066a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066a4:	d81f      	bhi.n	80066e6 <_printf_float+0x17e>
 80066a6:	464a      	mov	r2, r9
 80066a8:	3901      	subs	r1, #1
 80066aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066ae:	910d      	str	r1, [sp, #52]	; 0x34
 80066b0:	f7ff ff1b 	bl	80064ea <__exponent>
 80066b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066b6:	4682      	mov	sl, r0
 80066b8:	1813      	adds	r3, r2, r0
 80066ba:	2a01      	cmp	r2, #1
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	dc02      	bgt.n	80066c6 <_printf_float+0x15e>
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	07d2      	lsls	r2, r2, #31
 80066c4:	d501      	bpl.n	80066ca <_printf_float+0x162>
 80066c6:	3301      	adds	r3, #1
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d09b      	beq.n	800660a <_printf_float+0xa2>
 80066d2:	232d      	movs	r3, #45	; 0x2d
 80066d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d8:	e797      	b.n	800660a <_printf_float+0xa2>
 80066da:	2947      	cmp	r1, #71	; 0x47
 80066dc:	d1bc      	bne.n	8006658 <_printf_float+0xf0>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1ba      	bne.n	8006658 <_printf_float+0xf0>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7b7      	b.n	8006656 <_printf_float+0xee>
 80066e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80066ea:	d118      	bne.n	800671e <_printf_float+0x1b6>
 80066ec:	2900      	cmp	r1, #0
 80066ee:	6863      	ldr	r3, [r4, #4]
 80066f0:	dd0b      	ble.n	800670a <_printf_float+0x1a2>
 80066f2:	6121      	str	r1, [r4, #16]
 80066f4:	b913      	cbnz	r3, 80066fc <_printf_float+0x194>
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	07d0      	lsls	r0, r2, #31
 80066fa:	d502      	bpl.n	8006702 <_printf_float+0x19a>
 80066fc:	3301      	adds	r3, #1
 80066fe:	440b      	add	r3, r1
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	f04f 0a00 	mov.w	sl, #0
 8006706:	65a1      	str	r1, [r4, #88]	; 0x58
 8006708:	e7df      	b.n	80066ca <_printf_float+0x162>
 800670a:	b913      	cbnz	r3, 8006712 <_printf_float+0x1aa>
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	07d2      	lsls	r2, r2, #31
 8006710:	d501      	bpl.n	8006716 <_printf_float+0x1ae>
 8006712:	3302      	adds	r3, #2
 8006714:	e7f4      	b.n	8006700 <_printf_float+0x198>
 8006716:	2301      	movs	r3, #1
 8006718:	e7f2      	b.n	8006700 <_printf_float+0x198>
 800671a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800671e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006720:	4299      	cmp	r1, r3
 8006722:	db05      	blt.n	8006730 <_printf_float+0x1c8>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	6121      	str	r1, [r4, #16]
 8006728:	07d8      	lsls	r0, r3, #31
 800672a:	d5ea      	bpl.n	8006702 <_printf_float+0x19a>
 800672c:	1c4b      	adds	r3, r1, #1
 800672e:	e7e7      	b.n	8006700 <_printf_float+0x198>
 8006730:	2900      	cmp	r1, #0
 8006732:	bfcc      	ite	gt
 8006734:	2201      	movgt	r2, #1
 8006736:	f1c1 0202 	rsble	r2, r1, #2
 800673a:	4413      	add	r3, r2
 800673c:	e7e0      	b.n	8006700 <_printf_float+0x198>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	055a      	lsls	r2, r3, #21
 8006742:	d407      	bmi.n	8006754 <_printf_float+0x1ec>
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	4642      	mov	r2, r8
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	d12b      	bne.n	80067aa <_printf_float+0x242>
 8006752:	e764      	b.n	800661e <_printf_float+0xb6>
 8006754:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006758:	f240 80dd 	bls.w	8006916 <_printf_float+0x3ae>
 800675c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006760:	2200      	movs	r2, #0
 8006762:	2300      	movs	r3, #0
 8006764:	f7fa f920 	bl	80009a8 <__aeabi_dcmpeq>
 8006768:	2800      	cmp	r0, #0
 800676a:	d033      	beq.n	80067d4 <_printf_float+0x26c>
 800676c:	2301      	movs	r3, #1
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	4a35      	ldr	r2, [pc, #212]	; (8006848 <_printf_float+0x2e0>)
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f af51 	beq.w	800661e <_printf_float+0xb6>
 800677c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006780:	429a      	cmp	r2, r3
 8006782:	db02      	blt.n	800678a <_printf_float+0x222>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	07d8      	lsls	r0, r3, #31
 8006788:	d50f      	bpl.n	80067aa <_printf_float+0x242>
 800678a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	f43f af42 	beq.w	800661e <_printf_float+0xb6>
 800679a:	f04f 0800 	mov.w	r8, #0
 800679e:	f104 091a 	add.w	r9, r4, #26
 80067a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a4:	3b01      	subs	r3, #1
 80067a6:	4543      	cmp	r3, r8
 80067a8:	dc09      	bgt.n	80067be <_printf_float+0x256>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	079b      	lsls	r3, r3, #30
 80067ae:	f100 8102 	bmi.w	80069b6 <_printf_float+0x44e>
 80067b2:	68e0      	ldr	r0, [r4, #12]
 80067b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067b6:	4298      	cmp	r0, r3
 80067b8:	bfb8      	it	lt
 80067ba:	4618      	movlt	r0, r3
 80067bc:	e731      	b.n	8006622 <_printf_float+0xba>
 80067be:	2301      	movs	r3, #1
 80067c0:	464a      	mov	r2, r9
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f af28 	beq.w	800661e <_printf_float+0xb6>
 80067ce:	f108 0801 	add.w	r8, r8, #1
 80067d2:	e7e6      	b.n	80067a2 <_printf_float+0x23a>
 80067d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dc38      	bgt.n	800684c <_printf_float+0x2e4>
 80067da:	2301      	movs	r3, #1
 80067dc:	4631      	mov	r1, r6
 80067de:	4628      	mov	r0, r5
 80067e0:	4a19      	ldr	r2, [pc, #100]	; (8006848 <_printf_float+0x2e0>)
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f af1a 	beq.w	800661e <_printf_float+0xb6>
 80067ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067ee:	4313      	orrs	r3, r2
 80067f0:	d102      	bne.n	80067f8 <_printf_float+0x290>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	07d9      	lsls	r1, r3, #31
 80067f6:	d5d8      	bpl.n	80067aa <_printf_float+0x242>
 80067f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f af0b 	beq.w	800661e <_printf_float+0xb6>
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	f104 0a1a 	add.w	sl, r4, #26
 8006810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006812:	425b      	negs	r3, r3
 8006814:	454b      	cmp	r3, r9
 8006816:	dc01      	bgt.n	800681c <_printf_float+0x2b4>
 8006818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800681a:	e794      	b.n	8006746 <_printf_float+0x1de>
 800681c:	2301      	movs	r3, #1
 800681e:	4652      	mov	r2, sl
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f aef9 	beq.w	800661e <_printf_float+0xb6>
 800682c:	f109 0901 	add.w	r9, r9, #1
 8006830:	e7ee      	b.n	8006810 <_printf_float+0x2a8>
 8006832:	bf00      	nop
 8006834:	7fefffff 	.word	0x7fefffff
 8006838:	0800924c 	.word	0x0800924c
 800683c:	08009250 	.word	0x08009250
 8006840:	08009258 	.word	0x08009258
 8006844:	08009254 	.word	0x08009254
 8006848:	0800925c 	.word	0x0800925c
 800684c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800684e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006850:	429a      	cmp	r2, r3
 8006852:	bfa8      	it	ge
 8006854:	461a      	movge	r2, r3
 8006856:	2a00      	cmp	r2, #0
 8006858:	4691      	mov	r9, r2
 800685a:	dc37      	bgt.n	80068cc <_printf_float+0x364>
 800685c:	f04f 0b00 	mov.w	fp, #0
 8006860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006864:	f104 021a 	add.w	r2, r4, #26
 8006868:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800686c:	ebaa 0309 	sub.w	r3, sl, r9
 8006870:	455b      	cmp	r3, fp
 8006872:	dc33      	bgt.n	80068dc <_printf_float+0x374>
 8006874:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006878:	429a      	cmp	r2, r3
 800687a:	db3b      	blt.n	80068f4 <_printf_float+0x38c>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	07da      	lsls	r2, r3, #31
 8006880:	d438      	bmi.n	80068f4 <_printf_float+0x38c>
 8006882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006884:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006886:	eba3 020a 	sub.w	r2, r3, sl
 800688a:	eba3 0901 	sub.w	r9, r3, r1
 800688e:	4591      	cmp	r9, r2
 8006890:	bfa8      	it	ge
 8006892:	4691      	movge	r9, r2
 8006894:	f1b9 0f00 	cmp.w	r9, #0
 8006898:	dc34      	bgt.n	8006904 <_printf_float+0x39c>
 800689a:	f04f 0800 	mov.w	r8, #0
 800689e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068a2:	f104 0a1a 	add.w	sl, r4, #26
 80068a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	eba3 0309 	sub.w	r3, r3, r9
 80068b0:	4543      	cmp	r3, r8
 80068b2:	f77f af7a 	ble.w	80067aa <_printf_float+0x242>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4652      	mov	r2, sl
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f aeac 	beq.w	800661e <_printf_float+0xb6>
 80068c6:	f108 0801 	add.w	r8, r8, #1
 80068ca:	e7ec      	b.n	80068a6 <_printf_float+0x33e>
 80068cc:	4613      	mov	r3, r2
 80068ce:	4631      	mov	r1, r6
 80068d0:	4642      	mov	r2, r8
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	d1c0      	bne.n	800685c <_printf_float+0x2f4>
 80068da:	e6a0      	b.n	800661e <_printf_float+0xb6>
 80068dc:	2301      	movs	r3, #1
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	f43f ae99 	beq.w	800661e <_printf_float+0xb6>
 80068ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068ee:	f10b 0b01 	add.w	fp, fp, #1
 80068f2:	e7b9      	b.n	8006868 <_printf_float+0x300>
 80068f4:	4631      	mov	r1, r6
 80068f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	d1bf      	bne.n	8006882 <_printf_float+0x31a>
 8006902:	e68c      	b.n	800661e <_printf_float+0xb6>
 8006904:	464b      	mov	r3, r9
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	eb08 020a 	add.w	r2, r8, sl
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	d1c2      	bne.n	800689a <_printf_float+0x332>
 8006914:	e683      	b.n	800661e <_printf_float+0xb6>
 8006916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006918:	2a01      	cmp	r2, #1
 800691a:	dc01      	bgt.n	8006920 <_printf_float+0x3b8>
 800691c:	07db      	lsls	r3, r3, #31
 800691e:	d537      	bpl.n	8006990 <_printf_float+0x428>
 8006920:	2301      	movs	r3, #1
 8006922:	4642      	mov	r2, r8
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f ae77 	beq.w	800661e <_printf_float+0xb6>
 8006930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f ae6f 	beq.w	800661e <_printf_float+0xb6>
 8006940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006944:	2200      	movs	r2, #0
 8006946:	2300      	movs	r3, #0
 8006948:	f7fa f82e 	bl	80009a8 <__aeabi_dcmpeq>
 800694c:	b9d8      	cbnz	r0, 8006986 <_printf_float+0x41e>
 800694e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006950:	f108 0201 	add.w	r2, r8, #1
 8006954:	3b01      	subs	r3, #1
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	d10e      	bne.n	800697e <_printf_float+0x416>
 8006960:	e65d      	b.n	800661e <_printf_float+0xb6>
 8006962:	2301      	movs	r3, #1
 8006964:	464a      	mov	r2, r9
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f ae56 	beq.w	800661e <_printf_float+0xb6>
 8006972:	f108 0801 	add.w	r8, r8, #1
 8006976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006978:	3b01      	subs	r3, #1
 800697a:	4543      	cmp	r3, r8
 800697c:	dcf1      	bgt.n	8006962 <_printf_float+0x3fa>
 800697e:	4653      	mov	r3, sl
 8006980:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006984:	e6e0      	b.n	8006748 <_printf_float+0x1e0>
 8006986:	f04f 0800 	mov.w	r8, #0
 800698a:	f104 091a 	add.w	r9, r4, #26
 800698e:	e7f2      	b.n	8006976 <_printf_float+0x40e>
 8006990:	2301      	movs	r3, #1
 8006992:	4642      	mov	r2, r8
 8006994:	e7df      	b.n	8006956 <_printf_float+0x3ee>
 8006996:	2301      	movs	r3, #1
 8006998:	464a      	mov	r2, r9
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae3c 	beq.w	800661e <_printf_float+0xb6>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	68e3      	ldr	r3, [r4, #12]
 80069ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80069ae:	1a5b      	subs	r3, r3, r1
 80069b0:	4543      	cmp	r3, r8
 80069b2:	dcf0      	bgt.n	8006996 <_printf_float+0x42e>
 80069b4:	e6fd      	b.n	80067b2 <_printf_float+0x24a>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	f104 0919 	add.w	r9, r4, #25
 80069be:	e7f4      	b.n	80069aa <_printf_float+0x442>

080069c0 <_printf_common>:
 80069c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c4:	4616      	mov	r6, r2
 80069c6:	4699      	mov	r9, r3
 80069c8:	688a      	ldr	r2, [r1, #8]
 80069ca:	690b      	ldr	r3, [r1, #16]
 80069cc:	4607      	mov	r7, r0
 80069ce:	4293      	cmp	r3, r2
 80069d0:	bfb8      	it	lt
 80069d2:	4613      	movlt	r3, r2
 80069d4:	6033      	str	r3, [r6, #0]
 80069d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069da:	460c      	mov	r4, r1
 80069dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e0:	b10a      	cbz	r2, 80069e6 <_printf_common+0x26>
 80069e2:	3301      	adds	r3, #1
 80069e4:	6033      	str	r3, [r6, #0]
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	0699      	lsls	r1, r3, #26
 80069ea:	bf42      	ittt	mi
 80069ec:	6833      	ldrmi	r3, [r6, #0]
 80069ee:	3302      	addmi	r3, #2
 80069f0:	6033      	strmi	r3, [r6, #0]
 80069f2:	6825      	ldr	r5, [r4, #0]
 80069f4:	f015 0506 	ands.w	r5, r5, #6
 80069f8:	d106      	bne.n	8006a08 <_printf_common+0x48>
 80069fa:	f104 0a19 	add.w	sl, r4, #25
 80069fe:	68e3      	ldr	r3, [r4, #12]
 8006a00:	6832      	ldr	r2, [r6, #0]
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	42ab      	cmp	r3, r5
 8006a06:	dc28      	bgt.n	8006a5a <_printf_common+0x9a>
 8006a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a0c:	1e13      	subs	r3, r2, #0
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	bf18      	it	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	0692      	lsls	r2, r2, #26
 8006a16:	d42d      	bmi.n	8006a74 <_printf_common+0xb4>
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a20:	47c0      	blx	r8
 8006a22:	3001      	adds	r0, #1
 8006a24:	d020      	beq.n	8006a68 <_printf_common+0xa8>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	68e5      	ldr	r5, [r4, #12]
 8006a2a:	f003 0306 	and.w	r3, r3, #6
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	bf18      	it	ne
 8006a32:	2500      	movne	r5, #0
 8006a34:	6832      	ldr	r2, [r6, #0]
 8006a36:	f04f 0600 	mov.w	r6, #0
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	bf08      	it	eq
 8006a3e:	1aad      	subeq	r5, r5, r2
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	bf08      	it	eq
 8006a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	bfc4      	itt	gt
 8006a4c:	1a9b      	subgt	r3, r3, r2
 8006a4e:	18ed      	addgt	r5, r5, r3
 8006a50:	341a      	adds	r4, #26
 8006a52:	42b5      	cmp	r5, r6
 8006a54:	d11a      	bne.n	8006a8c <_printf_common+0xcc>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e008      	b.n	8006a6c <_printf_common+0xac>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	4649      	mov	r1, r9
 8006a60:	4638      	mov	r0, r7
 8006a62:	47c0      	blx	r8
 8006a64:	3001      	adds	r0, #1
 8006a66:	d103      	bne.n	8006a70 <_printf_common+0xb0>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a70:	3501      	adds	r5, #1
 8006a72:	e7c4      	b.n	80069fe <_printf_common+0x3e>
 8006a74:	2030      	movs	r0, #48	; 0x30
 8006a76:	18e1      	adds	r1, r4, r3
 8006a78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a82:	4422      	add	r2, r4
 8006a84:	3302      	adds	r3, #2
 8006a86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a8a:	e7c5      	b.n	8006a18 <_printf_common+0x58>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4649      	mov	r1, r9
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	3001      	adds	r0, #1
 8006a98:	d0e6      	beq.n	8006a68 <_printf_common+0xa8>
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	e7d9      	b.n	8006a52 <_printf_common+0x92>
	...

08006aa0 <_printf_i>:
 8006aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	7e0f      	ldrb	r7, [r1, #24]
 8006aa6:	4691      	mov	r9, r2
 8006aa8:	2f78      	cmp	r7, #120	; 0x78
 8006aaa:	4680      	mov	r8, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	469a      	mov	sl, r3
 8006ab0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ab6:	d807      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ab8:	2f62      	cmp	r7, #98	; 0x62
 8006aba:	d80a      	bhi.n	8006ad2 <_printf_i+0x32>
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	f000 80d9 	beq.w	8006c74 <_printf_i+0x1d4>
 8006ac2:	2f58      	cmp	r7, #88	; 0x58
 8006ac4:	f000 80a4 	beq.w	8006c10 <_printf_i+0x170>
 8006ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ad0:	e03a      	b.n	8006b48 <_printf_i+0xa8>
 8006ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ad6:	2b15      	cmp	r3, #21
 8006ad8:	d8f6      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ada:	a101      	add	r1, pc, #4	; (adr r1, 8006ae0 <_printf_i+0x40>)
 8006adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006ac9 	.word	0x08006ac9
 8006aec:	08006ac9 	.word	0x08006ac9
 8006af0:	08006ac9 	.word	0x08006ac9
 8006af4:	08006ac9 	.word	0x08006ac9
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006ac9 	.word	0x08006ac9
 8006b00:	08006ac9 	.word	0x08006ac9
 8006b04:	08006ac9 	.word	0x08006ac9
 8006b08:	08006ac9 	.word	0x08006ac9
 8006b0c:	08006c5b 	.word	0x08006c5b
 8006b10:	08006b7d 	.word	0x08006b7d
 8006b14:	08006c3d 	.word	0x08006c3d
 8006b18:	08006ac9 	.word	0x08006ac9
 8006b1c:	08006ac9 	.word	0x08006ac9
 8006b20:	08006c7d 	.word	0x08006c7d
 8006b24:	08006ac9 	.word	0x08006ac9
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006ac9 	.word	0x08006ac9
 8006b30:	08006ac9 	.word	0x08006ac9
 8006b34:	08006c45 	.word	0x08006c45
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	602a      	str	r2, [r5, #0]
 8006b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0a4      	b.n	8006c96 <_printf_i+0x1f6>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	6829      	ldr	r1, [r5, #0]
 8006b50:	0606      	lsls	r6, r0, #24
 8006b52:	f101 0304 	add.w	r3, r1, #4
 8006b56:	d50a      	bpl.n	8006b6e <_printf_i+0xce>
 8006b58:	680e      	ldr	r6, [r1, #0]
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	da03      	bge.n	8006b68 <_printf_i+0xc8>
 8006b60:	232d      	movs	r3, #45	; 0x2d
 8006b62:	4276      	negs	r6, r6
 8006b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b68:	230a      	movs	r3, #10
 8006b6a:	485e      	ldr	r0, [pc, #376]	; (8006ce4 <_printf_i+0x244>)
 8006b6c:	e019      	b.n	8006ba2 <_printf_i+0x102>
 8006b6e:	680e      	ldr	r6, [r1, #0]
 8006b70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	bf18      	it	ne
 8006b78:	b236      	sxthne	r6, r6
 8006b7a:	e7ef      	b.n	8006b5c <_printf_i+0xbc>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	1d19      	adds	r1, r3, #4
 8006b82:	6029      	str	r1, [r5, #0]
 8006b84:	0601      	lsls	r1, r0, #24
 8006b86:	d501      	bpl.n	8006b8c <_printf_i+0xec>
 8006b88:	681e      	ldr	r6, [r3, #0]
 8006b8a:	e002      	b.n	8006b92 <_printf_i+0xf2>
 8006b8c:	0646      	lsls	r6, r0, #25
 8006b8e:	d5fb      	bpl.n	8006b88 <_printf_i+0xe8>
 8006b90:	881e      	ldrh	r6, [r3, #0]
 8006b92:	2f6f      	cmp	r7, #111	; 0x6f
 8006b94:	bf0c      	ite	eq
 8006b96:	2308      	moveq	r3, #8
 8006b98:	230a      	movne	r3, #10
 8006b9a:	4852      	ldr	r0, [pc, #328]	; (8006ce4 <_printf_i+0x244>)
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ba2:	6865      	ldr	r5, [r4, #4]
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	bfa8      	it	ge
 8006ba8:	6821      	ldrge	r1, [r4, #0]
 8006baa:	60a5      	str	r5, [r4, #8]
 8006bac:	bfa4      	itt	ge
 8006bae:	f021 0104 	bicge.w	r1, r1, #4
 8006bb2:	6021      	strge	r1, [r4, #0]
 8006bb4:	b90e      	cbnz	r6, 8006bba <_printf_i+0x11a>
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	d04d      	beq.n	8006c56 <_printf_i+0x1b6>
 8006bba:	4615      	mov	r5, r2
 8006bbc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bc0:	fb03 6711 	mls	r7, r3, r1, r6
 8006bc4:	5dc7      	ldrb	r7, [r0, r7]
 8006bc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bca:	4637      	mov	r7, r6
 8006bcc:	42bb      	cmp	r3, r7
 8006bce:	460e      	mov	r6, r1
 8006bd0:	d9f4      	bls.n	8006bbc <_printf_i+0x11c>
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d10b      	bne.n	8006bee <_printf_i+0x14e>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	07de      	lsls	r6, r3, #31
 8006bda:	d508      	bpl.n	8006bee <_printf_i+0x14e>
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	6861      	ldr	r1, [r4, #4]
 8006be0:	4299      	cmp	r1, r3
 8006be2:	bfde      	ittt	le
 8006be4:	2330      	movle	r3, #48	; 0x30
 8006be6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bee:	1b52      	subs	r2, r2, r5
 8006bf0:	6122      	str	r2, [r4, #16]
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	f8cd a000 	str.w	sl, [sp]
 8006bfc:	aa03      	add	r2, sp, #12
 8006bfe:	f7ff fedf 	bl	80069c0 <_printf_common>
 8006c02:	3001      	adds	r0, #1
 8006c04:	d14c      	bne.n	8006ca0 <_printf_i+0x200>
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	b004      	add	sp, #16
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	4834      	ldr	r0, [pc, #208]	; (8006ce4 <_printf_i+0x244>)
 8006c12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c16:	6829      	ldr	r1, [r5, #0]
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c1e:	6029      	str	r1, [r5, #0]
 8006c20:	061d      	lsls	r5, r3, #24
 8006c22:	d514      	bpl.n	8006c4e <_printf_i+0x1ae>
 8006c24:	07df      	lsls	r7, r3, #31
 8006c26:	bf44      	itt	mi
 8006c28:	f043 0320 	orrmi.w	r3, r3, #32
 8006c2c:	6023      	strmi	r3, [r4, #0]
 8006c2e:	b91e      	cbnz	r6, 8006c38 <_printf_i+0x198>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	f023 0320 	bic.w	r3, r3, #32
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	2310      	movs	r3, #16
 8006c3a:	e7af      	b.n	8006b9c <_printf_i+0xfc>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	f043 0320 	orr.w	r3, r3, #32
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	2378      	movs	r3, #120	; 0x78
 8006c46:	4828      	ldr	r0, [pc, #160]	; (8006ce8 <_printf_i+0x248>)
 8006c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c4c:	e7e3      	b.n	8006c16 <_printf_i+0x176>
 8006c4e:	0659      	lsls	r1, r3, #25
 8006c50:	bf48      	it	mi
 8006c52:	b2b6      	uxthmi	r6, r6
 8006c54:	e7e6      	b.n	8006c24 <_printf_i+0x184>
 8006c56:	4615      	mov	r5, r2
 8006c58:	e7bb      	b.n	8006bd2 <_printf_i+0x132>
 8006c5a:	682b      	ldr	r3, [r5, #0]
 8006c5c:	6826      	ldr	r6, [r4, #0]
 8006c5e:	1d18      	adds	r0, r3, #4
 8006c60:	6961      	ldr	r1, [r4, #20]
 8006c62:	6028      	str	r0, [r5, #0]
 8006c64:	0635      	lsls	r5, r6, #24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	d501      	bpl.n	8006c6e <_printf_i+0x1ce>
 8006c6a:	6019      	str	r1, [r3, #0]
 8006c6c:	e002      	b.n	8006c74 <_printf_i+0x1d4>
 8006c6e:	0670      	lsls	r0, r6, #25
 8006c70:	d5fb      	bpl.n	8006c6a <_printf_i+0x1ca>
 8006c72:	8019      	strh	r1, [r3, #0]
 8006c74:	2300      	movs	r3, #0
 8006c76:	4615      	mov	r5, r2
 8006c78:	6123      	str	r3, [r4, #16]
 8006c7a:	e7ba      	b.n	8006bf2 <_printf_i+0x152>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	2100      	movs	r1, #0
 8006c80:	1d1a      	adds	r2, r3, #4
 8006c82:	602a      	str	r2, [r5, #0]
 8006c84:	681d      	ldr	r5, [r3, #0]
 8006c86:	6862      	ldr	r2, [r4, #4]
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f000 fed7 	bl	8007a3c <memchr>
 8006c8e:	b108      	cbz	r0, 8006c94 <_printf_i+0x1f4>
 8006c90:	1b40      	subs	r0, r0, r5
 8006c92:	6060      	str	r0, [r4, #4]
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c9e:	e7a8      	b.n	8006bf2 <_printf_i+0x152>
 8006ca0:	462a      	mov	r2, r5
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	47d0      	blx	sl
 8006caa:	3001      	adds	r0, #1
 8006cac:	d0ab      	beq.n	8006c06 <_printf_i+0x166>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	079b      	lsls	r3, r3, #30
 8006cb2:	d413      	bmi.n	8006cdc <_printf_i+0x23c>
 8006cb4:	68e0      	ldr	r0, [r4, #12]
 8006cb6:	9b03      	ldr	r3, [sp, #12]
 8006cb8:	4298      	cmp	r0, r3
 8006cba:	bfb8      	it	lt
 8006cbc:	4618      	movlt	r0, r3
 8006cbe:	e7a4      	b.n	8006c0a <_printf_i+0x16a>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4632      	mov	r2, r6
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	47d0      	blx	sl
 8006cca:	3001      	adds	r0, #1
 8006ccc:	d09b      	beq.n	8006c06 <_printf_i+0x166>
 8006cce:	3501      	adds	r5, #1
 8006cd0:	68e3      	ldr	r3, [r4, #12]
 8006cd2:	9903      	ldr	r1, [sp, #12]
 8006cd4:	1a5b      	subs	r3, r3, r1
 8006cd6:	42ab      	cmp	r3, r5
 8006cd8:	dcf2      	bgt.n	8006cc0 <_printf_i+0x220>
 8006cda:	e7eb      	b.n	8006cb4 <_printf_i+0x214>
 8006cdc:	2500      	movs	r5, #0
 8006cde:	f104 0619 	add.w	r6, r4, #25
 8006ce2:	e7f5      	b.n	8006cd0 <_printf_i+0x230>
 8006ce4:	0800925e 	.word	0x0800925e
 8006ce8:	0800926f 	.word	0x0800926f

08006cec <siprintf>:
 8006cec:	b40e      	push	{r1, r2, r3}
 8006cee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cf2:	b500      	push	{lr}
 8006cf4:	b09c      	sub	sp, #112	; 0x70
 8006cf6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cf8:	9002      	str	r0, [sp, #8]
 8006cfa:	9006      	str	r0, [sp, #24]
 8006cfc:	9107      	str	r1, [sp, #28]
 8006cfe:	9104      	str	r1, [sp, #16]
 8006d00:	4808      	ldr	r0, [pc, #32]	; (8006d24 <siprintf+0x38>)
 8006d02:	4909      	ldr	r1, [pc, #36]	; (8006d28 <siprintf+0x3c>)
 8006d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d08:	9105      	str	r1, [sp, #20]
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	a902      	add	r1, sp, #8
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	f001 fb7e 	bl	8008410 <_svfiprintf_r>
 8006d14:	2200      	movs	r2, #0
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	b01c      	add	sp, #112	; 0x70
 8006d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d20:	b003      	add	sp, #12
 8006d22:	4770      	bx	lr
 8006d24:	20000014 	.word	0x20000014
 8006d28:	ffff0208 	.word	0xffff0208

08006d2c <quorem>:
 8006d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	6903      	ldr	r3, [r0, #16]
 8006d32:	690c      	ldr	r4, [r1, #16]
 8006d34:	4607      	mov	r7, r0
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	f2c0 8082 	blt.w	8006e40 <quorem+0x114>
 8006d3c:	3c01      	subs	r4, #1
 8006d3e:	f100 0514 	add.w	r5, r0, #20
 8006d42:	f101 0814 	add.w	r8, r1, #20
 8006d46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d54:	3301      	adds	r3, #1
 8006d56:	429a      	cmp	r2, r3
 8006d58:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d64:	d331      	bcc.n	8006dca <quorem+0x9e>
 8006d66:	f04f 0e00 	mov.w	lr, #0
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	46ac      	mov	ip, r5
 8006d6e:	46f2      	mov	sl, lr
 8006d70:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d74:	b293      	uxth	r3, r2
 8006d76:	fb06 e303 	mla	r3, r6, r3, lr
 8006d7a:	0c12      	lsrs	r2, r2, #16
 8006d7c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	fb06 e202 	mla	r2, r6, r2, lr
 8006d86:	ebaa 0303 	sub.w	r3, sl, r3
 8006d8a:	f8dc a000 	ldr.w	sl, [ip]
 8006d8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d92:	fa1f fa8a 	uxth.w	sl, sl
 8006d96:	4453      	add	r3, sl
 8006d98:	f8dc a000 	ldr.w	sl, [ip]
 8006d9c:	b292      	uxth	r2, r2
 8006d9e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006da2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dac:	4581      	cmp	r9, r0
 8006dae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006db2:	f84c 3b04 	str.w	r3, [ip], #4
 8006db6:	d2db      	bcs.n	8006d70 <quorem+0x44>
 8006db8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dbc:	b92b      	cbnz	r3, 8006dca <quorem+0x9e>
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	3b04      	subs	r3, #4
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	d32f      	bcc.n	8006e28 <quorem+0xfc>
 8006dc8:	613c      	str	r4, [r7, #16]
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f001 f8d0 	bl	8007f70 <__mcmp>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	db25      	blt.n	8006e20 <quorem+0xf4>
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	f04f 0c00 	mov.w	ip, #0
 8006dda:	3601      	adds	r6, #1
 8006ddc:	f858 1b04 	ldr.w	r1, [r8], #4
 8006de0:	f8d0 e000 	ldr.w	lr, [r0]
 8006de4:	b28b      	uxth	r3, r1
 8006de6:	ebac 0303 	sub.w	r3, ip, r3
 8006dea:	fa1f f28e 	uxth.w	r2, lr
 8006dee:	4413      	add	r3, r2
 8006df0:	0c0a      	lsrs	r2, r1, #16
 8006df2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006df6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e00:	45c1      	cmp	r9, r8
 8006e02:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e06:	f840 3b04 	str.w	r3, [r0], #4
 8006e0a:	d2e7      	bcs.n	8006ddc <quorem+0xb0>
 8006e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e14:	b922      	cbnz	r2, 8006e20 <quorem+0xf4>
 8006e16:	3b04      	subs	r3, #4
 8006e18:	429d      	cmp	r5, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	d30a      	bcc.n	8006e34 <quorem+0x108>
 8006e1e:	613c      	str	r4, [r7, #16]
 8006e20:	4630      	mov	r0, r6
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	3b04      	subs	r3, #4
 8006e2c:	2a00      	cmp	r2, #0
 8006e2e:	d1cb      	bne.n	8006dc8 <quorem+0x9c>
 8006e30:	3c01      	subs	r4, #1
 8006e32:	e7c6      	b.n	8006dc2 <quorem+0x96>
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	3b04      	subs	r3, #4
 8006e38:	2a00      	cmp	r2, #0
 8006e3a:	d1f0      	bne.n	8006e1e <quorem+0xf2>
 8006e3c:	3c01      	subs	r4, #1
 8006e3e:	e7eb      	b.n	8006e18 <quorem+0xec>
 8006e40:	2000      	movs	r0, #0
 8006e42:	e7ee      	b.n	8006e22 <quorem+0xf6>
 8006e44:	0000      	movs	r0, r0
	...

08006e48 <_dtoa_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	461f      	mov	r7, r3
 8006e50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e52:	b099      	sub	sp, #100	; 0x64
 8006e54:	4605      	mov	r5, r0
 8006e56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006e5e:	b974      	cbnz	r4, 8006e7e <_dtoa_r+0x36>
 8006e60:	2010      	movs	r0, #16
 8006e62:	f000 fde3 	bl	8007a2c <malloc>
 8006e66:	4602      	mov	r2, r0
 8006e68:	6268      	str	r0, [r5, #36]	; 0x24
 8006e6a:	b920      	cbnz	r0, 8006e76 <_dtoa_r+0x2e>
 8006e6c:	21ea      	movs	r1, #234	; 0xea
 8006e6e:	4ba8      	ldr	r3, [pc, #672]	; (8007110 <_dtoa_r+0x2c8>)
 8006e70:	48a8      	ldr	r0, [pc, #672]	; (8007114 <_dtoa_r+0x2cc>)
 8006e72:	f001 fbdd 	bl	8008630 <__assert_func>
 8006e76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e7a:	6004      	str	r4, [r0, #0]
 8006e7c:	60c4      	str	r4, [r0, #12]
 8006e7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e80:	6819      	ldr	r1, [r3, #0]
 8006e82:	b151      	cbz	r1, 8006e9a <_dtoa_r+0x52>
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	2301      	movs	r3, #1
 8006e88:	4093      	lsls	r3, r2
 8006e8a:	604a      	str	r2, [r1, #4]
 8006e8c:	608b      	str	r3, [r1, #8]
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 fe30 	bl	8007af4 <_Bfree>
 8006e94:	2200      	movs	r2, #0
 8006e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	1e3b      	subs	r3, r7, #0
 8006e9c:	bfaf      	iteee	ge
 8006e9e:	2300      	movge	r3, #0
 8006ea0:	2201      	movlt	r2, #1
 8006ea2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ea6:	9305      	strlt	r3, [sp, #20]
 8006ea8:	bfa8      	it	ge
 8006eaa:	f8c8 3000 	strge.w	r3, [r8]
 8006eae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006eb2:	4b99      	ldr	r3, [pc, #612]	; (8007118 <_dtoa_r+0x2d0>)
 8006eb4:	bfb8      	it	lt
 8006eb6:	f8c8 2000 	strlt.w	r2, [r8]
 8006eba:	ea33 0309 	bics.w	r3, r3, r9
 8006ebe:	d119      	bne.n	8006ef4 <_dtoa_r+0xac>
 8006ec0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ec4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ecc:	4333      	orrs	r3, r6
 8006ece:	f000 857f 	beq.w	80079d0 <_dtoa_r+0xb88>
 8006ed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ed4:	b953      	cbnz	r3, 8006eec <_dtoa_r+0xa4>
 8006ed6:	4b91      	ldr	r3, [pc, #580]	; (800711c <_dtoa_r+0x2d4>)
 8006ed8:	e022      	b.n	8006f20 <_dtoa_r+0xd8>
 8006eda:	4b91      	ldr	r3, [pc, #580]	; (8007120 <_dtoa_r+0x2d8>)
 8006edc:	9303      	str	r3, [sp, #12]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	9803      	ldr	r0, [sp, #12]
 8006ee6:	b019      	add	sp, #100	; 0x64
 8006ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eec:	4b8b      	ldr	r3, [pc, #556]	; (800711c <_dtoa_r+0x2d4>)
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	3303      	adds	r3, #3
 8006ef2:	e7f5      	b.n	8006ee0 <_dtoa_r+0x98>
 8006ef4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ef8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006efc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f00:	2200      	movs	r2, #0
 8006f02:	2300      	movs	r3, #0
 8006f04:	f7f9 fd50 	bl	80009a8 <__aeabi_dcmpeq>
 8006f08:	4680      	mov	r8, r0
 8006f0a:	b158      	cbz	r0, 8006f24 <_dtoa_r+0xdc>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8558 	beq.w	80079ca <_dtoa_r+0xb82>
 8006f1a:	4882      	ldr	r0, [pc, #520]	; (8007124 <_dtoa_r+0x2dc>)
 8006f1c:	6018      	str	r0, [r3, #0]
 8006f1e:	1e43      	subs	r3, r0, #1
 8006f20:	9303      	str	r3, [sp, #12]
 8006f22:	e7df      	b.n	8006ee4 <_dtoa_r+0x9c>
 8006f24:	ab16      	add	r3, sp, #88	; 0x58
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	ab17      	add	r3, sp, #92	; 0x5c
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f32:	f001 f8c5 	bl	80080c0 <__d2b>
 8006f36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f3a:	4683      	mov	fp, r0
 8006f3c:	2c00      	cmp	r4, #0
 8006f3e:	d07f      	beq.n	8007040 <_dtoa_r+0x1f8>
 8006f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f46:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006f52:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f56:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4b72      	ldr	r3, [pc, #456]	; (8007128 <_dtoa_r+0x2e0>)
 8006f5e:	f7f9 f903 	bl	8000168 <__aeabi_dsub>
 8006f62:	a365      	add	r3, pc, #404	; (adr r3, 80070f8 <_dtoa_r+0x2b0>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f7f9 fab6 	bl	80004d8 <__aeabi_dmul>
 8006f6c:	a364      	add	r3, pc, #400	; (adr r3, 8007100 <_dtoa_r+0x2b8>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 f8fb 	bl	800016c <__adddf3>
 8006f76:	4606      	mov	r6, r0
 8006f78:	4620      	mov	r0, r4
 8006f7a:	460f      	mov	r7, r1
 8006f7c:	f7f9 fa42 	bl	8000404 <__aeabi_i2d>
 8006f80:	a361      	add	r3, pc, #388	; (adr r3, 8007108 <_dtoa_r+0x2c0>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 faa7 	bl	80004d8 <__aeabi_dmul>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	f7f9 f8eb 	bl	800016c <__adddf3>
 8006f96:	4606      	mov	r6, r0
 8006f98:	460f      	mov	r7, r1
 8006f9a:	f7f9 fd4d 	bl	8000a38 <__aeabi_d2iz>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4682      	mov	sl, r0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	f7f9 fd08 	bl	80009bc <__aeabi_dcmplt>
 8006fac:	b148      	cbz	r0, 8006fc2 <_dtoa_r+0x17a>
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f7f9 fa28 	bl	8000404 <__aeabi_i2d>
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	f7f9 fcf6 	bl	80009a8 <__aeabi_dcmpeq>
 8006fbc:	b908      	cbnz	r0, 8006fc2 <_dtoa_r+0x17a>
 8006fbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fc2:	f1ba 0f16 	cmp.w	sl, #22
 8006fc6:	d858      	bhi.n	800707a <_dtoa_r+0x232>
 8006fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fcc:	4b57      	ldr	r3, [pc, #348]	; (800712c <_dtoa_r+0x2e4>)
 8006fce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 fcf1 	bl	80009bc <__aeabi_dcmplt>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d04f      	beq.n	800707e <_dtoa_r+0x236>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fe4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006fe8:	1b1c      	subs	r4, r3, r4
 8006fea:	1e63      	subs	r3, r4, #1
 8006fec:	9309      	str	r3, [sp, #36]	; 0x24
 8006fee:	bf49      	itett	mi
 8006ff0:	f1c4 0301 	rsbmi	r3, r4, #1
 8006ff4:	2300      	movpl	r3, #0
 8006ff6:	9306      	strmi	r3, [sp, #24]
 8006ff8:	2300      	movmi	r3, #0
 8006ffa:	bf54      	ite	pl
 8006ffc:	9306      	strpl	r3, [sp, #24]
 8006ffe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007000:	f1ba 0f00 	cmp.w	sl, #0
 8007004:	db3d      	blt.n	8007082 <_dtoa_r+0x23a>
 8007006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007008:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800700c:	4453      	add	r3, sl
 800700e:	9309      	str	r3, [sp, #36]	; 0x24
 8007010:	2300      	movs	r3, #0
 8007012:	930a      	str	r3, [sp, #40]	; 0x28
 8007014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007016:	2b09      	cmp	r3, #9
 8007018:	f200 808c 	bhi.w	8007134 <_dtoa_r+0x2ec>
 800701c:	2b05      	cmp	r3, #5
 800701e:	bfc4      	itt	gt
 8007020:	3b04      	subgt	r3, #4
 8007022:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007026:	bfc8      	it	gt
 8007028:	2400      	movgt	r4, #0
 800702a:	f1a3 0302 	sub.w	r3, r3, #2
 800702e:	bfd8      	it	le
 8007030:	2401      	movle	r4, #1
 8007032:	2b03      	cmp	r3, #3
 8007034:	f200 808a 	bhi.w	800714c <_dtoa_r+0x304>
 8007038:	e8df f003 	tbb	[pc, r3]
 800703c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007040:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007044:	441c      	add	r4, r3
 8007046:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800704a:	2b20      	cmp	r3, #32
 800704c:	bfc3      	ittte	gt
 800704e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007052:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007056:	fa09 f303 	lslgt.w	r3, r9, r3
 800705a:	f1c3 0320 	rsble	r3, r3, #32
 800705e:	bfc6      	itte	gt
 8007060:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007064:	4318      	orrgt	r0, r3
 8007066:	fa06 f003 	lslle.w	r0, r6, r3
 800706a:	f7f9 f9bb 	bl	80003e4 <__aeabi_ui2d>
 800706e:	2301      	movs	r3, #1
 8007070:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007074:	3c01      	subs	r4, #1
 8007076:	9313      	str	r3, [sp, #76]	; 0x4c
 8007078:	e76f      	b.n	8006f5a <_dtoa_r+0x112>
 800707a:	2301      	movs	r3, #1
 800707c:	e7b2      	b.n	8006fe4 <_dtoa_r+0x19c>
 800707e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007080:	e7b1      	b.n	8006fe6 <_dtoa_r+0x19e>
 8007082:	9b06      	ldr	r3, [sp, #24]
 8007084:	eba3 030a 	sub.w	r3, r3, sl
 8007088:	9306      	str	r3, [sp, #24]
 800708a:	f1ca 0300 	rsb	r3, sl, #0
 800708e:	930a      	str	r3, [sp, #40]	; 0x28
 8007090:	2300      	movs	r3, #0
 8007092:	930e      	str	r3, [sp, #56]	; 0x38
 8007094:	e7be      	b.n	8007014 <_dtoa_r+0x1cc>
 8007096:	2300      	movs	r3, #0
 8007098:	930b      	str	r3, [sp, #44]	; 0x2c
 800709a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800709c:	2b00      	cmp	r3, #0
 800709e:	dc58      	bgt.n	8007152 <_dtoa_r+0x30a>
 80070a0:	f04f 0901 	mov.w	r9, #1
 80070a4:	464b      	mov	r3, r9
 80070a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80070aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80070ae:	2200      	movs	r2, #0
 80070b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80070b2:	6042      	str	r2, [r0, #4]
 80070b4:	2204      	movs	r2, #4
 80070b6:	f102 0614 	add.w	r6, r2, #20
 80070ba:	429e      	cmp	r6, r3
 80070bc:	6841      	ldr	r1, [r0, #4]
 80070be:	d94e      	bls.n	800715e <_dtoa_r+0x316>
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 fcd7 	bl	8007a74 <_Balloc>
 80070c6:	9003      	str	r0, [sp, #12]
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d14c      	bne.n	8007166 <_dtoa_r+0x31e>
 80070cc:	4602      	mov	r2, r0
 80070ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070d2:	4b17      	ldr	r3, [pc, #92]	; (8007130 <_dtoa_r+0x2e8>)
 80070d4:	e6cc      	b.n	8006e70 <_dtoa_r+0x28>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e7de      	b.n	8007098 <_dtoa_r+0x250>
 80070da:	2300      	movs	r3, #0
 80070dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80070de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070e0:	eb0a 0903 	add.w	r9, sl, r3
 80070e4:	f109 0301 	add.w	r3, r9, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	9308      	str	r3, [sp, #32]
 80070ec:	bfb8      	it	lt
 80070ee:	2301      	movlt	r3, #1
 80070f0:	e7dd      	b.n	80070ae <_dtoa_r+0x266>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e7f2      	b.n	80070dc <_dtoa_r+0x294>
 80070f6:	bf00      	nop
 80070f8:	636f4361 	.word	0x636f4361
 80070fc:	3fd287a7 	.word	0x3fd287a7
 8007100:	8b60c8b3 	.word	0x8b60c8b3
 8007104:	3fc68a28 	.word	0x3fc68a28
 8007108:	509f79fb 	.word	0x509f79fb
 800710c:	3fd34413 	.word	0x3fd34413
 8007110:	0800928d 	.word	0x0800928d
 8007114:	080092a4 	.word	0x080092a4
 8007118:	7ff00000 	.word	0x7ff00000
 800711c:	08009289 	.word	0x08009289
 8007120:	08009280 	.word	0x08009280
 8007124:	0800925d 	.word	0x0800925d
 8007128:	3ff80000 	.word	0x3ff80000
 800712c:	08009398 	.word	0x08009398
 8007130:	080092ff 	.word	0x080092ff
 8007134:	2401      	movs	r4, #1
 8007136:	2300      	movs	r3, #0
 8007138:	940b      	str	r4, [sp, #44]	; 0x2c
 800713a:	9322      	str	r3, [sp, #136]	; 0x88
 800713c:	f04f 39ff 	mov.w	r9, #4294967295
 8007140:	2200      	movs	r2, #0
 8007142:	2312      	movs	r3, #18
 8007144:	f8cd 9020 	str.w	r9, [sp, #32]
 8007148:	9223      	str	r2, [sp, #140]	; 0x8c
 800714a:	e7b0      	b.n	80070ae <_dtoa_r+0x266>
 800714c:	2301      	movs	r3, #1
 800714e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007150:	e7f4      	b.n	800713c <_dtoa_r+0x2f4>
 8007152:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007156:	464b      	mov	r3, r9
 8007158:	f8cd 9020 	str.w	r9, [sp, #32]
 800715c:	e7a7      	b.n	80070ae <_dtoa_r+0x266>
 800715e:	3101      	adds	r1, #1
 8007160:	6041      	str	r1, [r0, #4]
 8007162:	0052      	lsls	r2, r2, #1
 8007164:	e7a7      	b.n	80070b6 <_dtoa_r+0x26e>
 8007166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007168:	9a03      	ldr	r2, [sp, #12]
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	9b08      	ldr	r3, [sp, #32]
 800716e:	2b0e      	cmp	r3, #14
 8007170:	f200 80a8 	bhi.w	80072c4 <_dtoa_r+0x47c>
 8007174:	2c00      	cmp	r4, #0
 8007176:	f000 80a5 	beq.w	80072c4 <_dtoa_r+0x47c>
 800717a:	f1ba 0f00 	cmp.w	sl, #0
 800717e:	dd34      	ble.n	80071ea <_dtoa_r+0x3a2>
 8007180:	4a9a      	ldr	r2, [pc, #616]	; (80073ec <_dtoa_r+0x5a4>)
 8007182:	f00a 030f 	and.w	r3, sl, #15
 8007186:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800718a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800718e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007192:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007196:	ea4f 142a 	mov.w	r4, sl, asr #4
 800719a:	d016      	beq.n	80071ca <_dtoa_r+0x382>
 800719c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071a0:	4b93      	ldr	r3, [pc, #588]	; (80073f0 <_dtoa_r+0x5a8>)
 80071a2:	2703      	movs	r7, #3
 80071a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071a8:	f7f9 fac0 	bl	800072c <__aeabi_ddiv>
 80071ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071b0:	f004 040f 	and.w	r4, r4, #15
 80071b4:	4e8e      	ldr	r6, [pc, #568]	; (80073f0 <_dtoa_r+0x5a8>)
 80071b6:	b954      	cbnz	r4, 80071ce <_dtoa_r+0x386>
 80071b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c0:	f7f9 fab4 	bl	800072c <__aeabi_ddiv>
 80071c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071c8:	e029      	b.n	800721e <_dtoa_r+0x3d6>
 80071ca:	2702      	movs	r7, #2
 80071cc:	e7f2      	b.n	80071b4 <_dtoa_r+0x36c>
 80071ce:	07e1      	lsls	r1, r4, #31
 80071d0:	d508      	bpl.n	80071e4 <_dtoa_r+0x39c>
 80071d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071da:	f7f9 f97d 	bl	80004d8 <__aeabi_dmul>
 80071de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071e2:	3701      	adds	r7, #1
 80071e4:	1064      	asrs	r4, r4, #1
 80071e6:	3608      	adds	r6, #8
 80071e8:	e7e5      	b.n	80071b6 <_dtoa_r+0x36e>
 80071ea:	f000 80a5 	beq.w	8007338 <_dtoa_r+0x4f0>
 80071ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071f2:	f1ca 0400 	rsb	r4, sl, #0
 80071f6:	4b7d      	ldr	r3, [pc, #500]	; (80073ec <_dtoa_r+0x5a4>)
 80071f8:	f004 020f 	and.w	r2, r4, #15
 80071fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f9 f968 	bl	80004d8 <__aeabi_dmul>
 8007208:	2702      	movs	r7, #2
 800720a:	2300      	movs	r3, #0
 800720c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007210:	4e77      	ldr	r6, [pc, #476]	; (80073f0 <_dtoa_r+0x5a8>)
 8007212:	1124      	asrs	r4, r4, #4
 8007214:	2c00      	cmp	r4, #0
 8007216:	f040 8084 	bne.w	8007322 <_dtoa_r+0x4da>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1d2      	bne.n	80071c4 <_dtoa_r+0x37c>
 800721e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 808b 	beq.w	800733c <_dtoa_r+0x4f4>
 8007226:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800722a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800722e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007232:	2200      	movs	r2, #0
 8007234:	4b6f      	ldr	r3, [pc, #444]	; (80073f4 <_dtoa_r+0x5ac>)
 8007236:	f7f9 fbc1 	bl	80009bc <__aeabi_dcmplt>
 800723a:	2800      	cmp	r0, #0
 800723c:	d07e      	beq.n	800733c <_dtoa_r+0x4f4>
 800723e:	9b08      	ldr	r3, [sp, #32]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d07b      	beq.n	800733c <_dtoa_r+0x4f4>
 8007244:	f1b9 0f00 	cmp.w	r9, #0
 8007248:	dd38      	ble.n	80072bc <_dtoa_r+0x474>
 800724a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800724e:	2200      	movs	r2, #0
 8007250:	4b69      	ldr	r3, [pc, #420]	; (80073f8 <_dtoa_r+0x5b0>)
 8007252:	f7f9 f941 	bl	80004d8 <__aeabi_dmul>
 8007256:	464c      	mov	r4, r9
 8007258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800725c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007260:	3701      	adds	r7, #1
 8007262:	4638      	mov	r0, r7
 8007264:	f7f9 f8ce 	bl	8000404 <__aeabi_i2d>
 8007268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800726c:	f7f9 f934 	bl	80004d8 <__aeabi_dmul>
 8007270:	2200      	movs	r2, #0
 8007272:	4b62      	ldr	r3, [pc, #392]	; (80073fc <_dtoa_r+0x5b4>)
 8007274:	f7f8 ff7a 	bl	800016c <__adddf3>
 8007278:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800727c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007280:	9611      	str	r6, [sp, #68]	; 0x44
 8007282:	2c00      	cmp	r4, #0
 8007284:	d15d      	bne.n	8007342 <_dtoa_r+0x4fa>
 8007286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800728a:	2200      	movs	r2, #0
 800728c:	4b5c      	ldr	r3, [pc, #368]	; (8007400 <_dtoa_r+0x5b8>)
 800728e:	f7f8 ff6b 	bl	8000168 <__aeabi_dsub>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800729a:	4633      	mov	r3, r6
 800729c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800729e:	f7f9 fbab 	bl	80009f8 <__aeabi_dcmpgt>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f040 829c 	bne.w	80077e0 <_dtoa_r+0x998>
 80072a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072b2:	f7f9 fb83 	bl	80009bc <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f040 8290 	bne.w	80077dc <_dtoa_r+0x994>
 80072bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80072c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f2c0 8152 	blt.w	8007570 <_dtoa_r+0x728>
 80072cc:	f1ba 0f0e 	cmp.w	sl, #14
 80072d0:	f300 814e 	bgt.w	8007570 <_dtoa_r+0x728>
 80072d4:	4b45      	ldr	r3, [pc, #276]	; (80073ec <_dtoa_r+0x5a4>)
 80072d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80072e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f280 80db 	bge.w	80074a0 <_dtoa_r+0x658>
 80072ea:	9b08      	ldr	r3, [sp, #32]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f300 80d7 	bgt.w	80074a0 <_dtoa_r+0x658>
 80072f2:	f040 8272 	bne.w	80077da <_dtoa_r+0x992>
 80072f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072fa:	2200      	movs	r2, #0
 80072fc:	4b40      	ldr	r3, [pc, #256]	; (8007400 <_dtoa_r+0x5b8>)
 80072fe:	f7f9 f8eb 	bl	80004d8 <__aeabi_dmul>
 8007302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007306:	f7f9 fb6d 	bl	80009e4 <__aeabi_dcmpge>
 800730a:	9c08      	ldr	r4, [sp, #32]
 800730c:	4626      	mov	r6, r4
 800730e:	2800      	cmp	r0, #0
 8007310:	f040 8248 	bne.w	80077a4 <_dtoa_r+0x95c>
 8007314:	2331      	movs	r3, #49	; 0x31
 8007316:	9f03      	ldr	r7, [sp, #12]
 8007318:	f10a 0a01 	add.w	sl, sl, #1
 800731c:	f807 3b01 	strb.w	r3, [r7], #1
 8007320:	e244      	b.n	80077ac <_dtoa_r+0x964>
 8007322:	07e2      	lsls	r2, r4, #31
 8007324:	d505      	bpl.n	8007332 <_dtoa_r+0x4ea>
 8007326:	e9d6 2300 	ldrd	r2, r3, [r6]
 800732a:	f7f9 f8d5 	bl	80004d8 <__aeabi_dmul>
 800732e:	2301      	movs	r3, #1
 8007330:	3701      	adds	r7, #1
 8007332:	1064      	asrs	r4, r4, #1
 8007334:	3608      	adds	r6, #8
 8007336:	e76d      	b.n	8007214 <_dtoa_r+0x3cc>
 8007338:	2702      	movs	r7, #2
 800733a:	e770      	b.n	800721e <_dtoa_r+0x3d6>
 800733c:	46d0      	mov	r8, sl
 800733e:	9c08      	ldr	r4, [sp, #32]
 8007340:	e78f      	b.n	8007262 <_dtoa_r+0x41a>
 8007342:	9903      	ldr	r1, [sp, #12]
 8007344:	4b29      	ldr	r3, [pc, #164]	; (80073ec <_dtoa_r+0x5a4>)
 8007346:	4421      	add	r1, r4
 8007348:	9112      	str	r1, [sp, #72]	; 0x48
 800734a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800734c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007350:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007354:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007358:	2900      	cmp	r1, #0
 800735a:	d055      	beq.n	8007408 <_dtoa_r+0x5c0>
 800735c:	2000      	movs	r0, #0
 800735e:	4929      	ldr	r1, [pc, #164]	; (8007404 <_dtoa_r+0x5bc>)
 8007360:	f7f9 f9e4 	bl	800072c <__aeabi_ddiv>
 8007364:	463b      	mov	r3, r7
 8007366:	4632      	mov	r2, r6
 8007368:	f7f8 fefe 	bl	8000168 <__aeabi_dsub>
 800736c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007370:	9f03      	ldr	r7, [sp, #12]
 8007372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007376:	f7f9 fb5f 	bl	8000a38 <__aeabi_d2iz>
 800737a:	4604      	mov	r4, r0
 800737c:	f7f9 f842 	bl	8000404 <__aeabi_i2d>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007388:	f7f8 feee 	bl	8000168 <__aeabi_dsub>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	3430      	adds	r4, #48	; 0x30
 8007392:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800739a:	f807 4b01 	strb.w	r4, [r7], #1
 800739e:	f7f9 fb0d 	bl	80009bc <__aeabi_dcmplt>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d174      	bne.n	8007490 <_dtoa_r+0x648>
 80073a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073aa:	2000      	movs	r0, #0
 80073ac:	4911      	ldr	r1, [pc, #68]	; (80073f4 <_dtoa_r+0x5ac>)
 80073ae:	f7f8 fedb 	bl	8000168 <__aeabi_dsub>
 80073b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073b6:	f7f9 fb01 	bl	80009bc <__aeabi_dcmplt>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f040 80b7 	bne.w	800752e <_dtoa_r+0x6e6>
 80073c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073c2:	429f      	cmp	r7, r3
 80073c4:	f43f af7a 	beq.w	80072bc <_dtoa_r+0x474>
 80073c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073cc:	2200      	movs	r2, #0
 80073ce:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <_dtoa_r+0x5b0>)
 80073d0:	f7f9 f882 	bl	80004d8 <__aeabi_dmul>
 80073d4:	2200      	movs	r2, #0
 80073d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073de:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <_dtoa_r+0x5b0>)
 80073e0:	f7f9 f87a 	bl	80004d8 <__aeabi_dmul>
 80073e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073e8:	e7c3      	b.n	8007372 <_dtoa_r+0x52a>
 80073ea:	bf00      	nop
 80073ec:	08009398 	.word	0x08009398
 80073f0:	08009370 	.word	0x08009370
 80073f4:	3ff00000 	.word	0x3ff00000
 80073f8:	40240000 	.word	0x40240000
 80073fc:	401c0000 	.word	0x401c0000
 8007400:	40140000 	.word	0x40140000
 8007404:	3fe00000 	.word	0x3fe00000
 8007408:	4630      	mov	r0, r6
 800740a:	4639      	mov	r1, r7
 800740c:	f7f9 f864 	bl	80004d8 <__aeabi_dmul>
 8007410:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007412:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007416:	9c03      	ldr	r4, [sp, #12]
 8007418:	9314      	str	r3, [sp, #80]	; 0x50
 800741a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800741e:	f7f9 fb0b 	bl	8000a38 <__aeabi_d2iz>
 8007422:	9015      	str	r0, [sp, #84]	; 0x54
 8007424:	f7f8 ffee 	bl	8000404 <__aeabi_i2d>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007430:	f7f8 fe9a 	bl	8000168 <__aeabi_dsub>
 8007434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007436:	4606      	mov	r6, r0
 8007438:	3330      	adds	r3, #48	; 0x30
 800743a:	f804 3b01 	strb.w	r3, [r4], #1
 800743e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007440:	460f      	mov	r7, r1
 8007442:	429c      	cmp	r4, r3
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	d124      	bne.n	8007494 <_dtoa_r+0x64c>
 800744a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800744e:	4bb0      	ldr	r3, [pc, #704]	; (8007710 <_dtoa_r+0x8c8>)
 8007450:	f7f8 fe8c 	bl	800016c <__adddf3>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4630      	mov	r0, r6
 800745a:	4639      	mov	r1, r7
 800745c:	f7f9 facc 	bl	80009f8 <__aeabi_dcmpgt>
 8007460:	2800      	cmp	r0, #0
 8007462:	d163      	bne.n	800752c <_dtoa_r+0x6e4>
 8007464:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007468:	2000      	movs	r0, #0
 800746a:	49a9      	ldr	r1, [pc, #676]	; (8007710 <_dtoa_r+0x8c8>)
 800746c:	f7f8 fe7c 	bl	8000168 <__aeabi_dsub>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 faa0 	bl	80009bc <__aeabi_dcmplt>
 800747c:	2800      	cmp	r0, #0
 800747e:	f43f af1d 	beq.w	80072bc <_dtoa_r+0x474>
 8007482:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007484:	1e7b      	subs	r3, r7, #1
 8007486:	9314      	str	r3, [sp, #80]	; 0x50
 8007488:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d0f8      	beq.n	8007482 <_dtoa_r+0x63a>
 8007490:	46c2      	mov	sl, r8
 8007492:	e03b      	b.n	800750c <_dtoa_r+0x6c4>
 8007494:	4b9f      	ldr	r3, [pc, #636]	; (8007714 <_dtoa_r+0x8cc>)
 8007496:	f7f9 f81f 	bl	80004d8 <__aeabi_dmul>
 800749a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800749e:	e7bc      	b.n	800741a <_dtoa_r+0x5d2>
 80074a0:	9f03      	ldr	r7, [sp, #12]
 80074a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80074a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074aa:	4640      	mov	r0, r8
 80074ac:	4649      	mov	r1, r9
 80074ae:	f7f9 f93d 	bl	800072c <__aeabi_ddiv>
 80074b2:	f7f9 fac1 	bl	8000a38 <__aeabi_d2iz>
 80074b6:	4604      	mov	r4, r0
 80074b8:	f7f8 ffa4 	bl	8000404 <__aeabi_i2d>
 80074bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074c0:	f7f9 f80a 	bl	80004d8 <__aeabi_dmul>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4640      	mov	r0, r8
 80074ca:	4649      	mov	r1, r9
 80074cc:	f7f8 fe4c 	bl	8000168 <__aeabi_dsub>
 80074d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80074d4:	f807 6b01 	strb.w	r6, [r7], #1
 80074d8:	9e03      	ldr	r6, [sp, #12]
 80074da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80074de:	1bbe      	subs	r6, r7, r6
 80074e0:	45b4      	cmp	ip, r6
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	d136      	bne.n	8007556 <_dtoa_r+0x70e>
 80074e8:	f7f8 fe40 	bl	800016c <__adddf3>
 80074ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074f0:	4680      	mov	r8, r0
 80074f2:	4689      	mov	r9, r1
 80074f4:	f7f9 fa80 	bl	80009f8 <__aeabi_dcmpgt>
 80074f8:	bb58      	cbnz	r0, 8007552 <_dtoa_r+0x70a>
 80074fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f7f9 fa51 	bl	80009a8 <__aeabi_dcmpeq>
 8007506:	b108      	cbz	r0, 800750c <_dtoa_r+0x6c4>
 8007508:	07e1      	lsls	r1, r4, #31
 800750a:	d422      	bmi.n	8007552 <_dtoa_r+0x70a>
 800750c:	4628      	mov	r0, r5
 800750e:	4659      	mov	r1, fp
 8007510:	f000 faf0 	bl	8007af4 <_Bfree>
 8007514:	2300      	movs	r3, #0
 8007516:	703b      	strb	r3, [r7, #0]
 8007518:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800751a:	f10a 0001 	add.w	r0, sl, #1
 800751e:	6018      	str	r0, [r3, #0]
 8007520:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007522:	2b00      	cmp	r3, #0
 8007524:	f43f acde 	beq.w	8006ee4 <_dtoa_r+0x9c>
 8007528:	601f      	str	r7, [r3, #0]
 800752a:	e4db      	b.n	8006ee4 <_dtoa_r+0x9c>
 800752c:	4627      	mov	r7, r4
 800752e:	463b      	mov	r3, r7
 8007530:	461f      	mov	r7, r3
 8007532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007536:	2a39      	cmp	r2, #57	; 0x39
 8007538:	d107      	bne.n	800754a <_dtoa_r+0x702>
 800753a:	9a03      	ldr	r2, [sp, #12]
 800753c:	429a      	cmp	r2, r3
 800753e:	d1f7      	bne.n	8007530 <_dtoa_r+0x6e8>
 8007540:	2230      	movs	r2, #48	; 0x30
 8007542:	9903      	ldr	r1, [sp, #12]
 8007544:	f108 0801 	add.w	r8, r8, #1
 8007548:	700a      	strb	r2, [r1, #0]
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	3201      	adds	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e79e      	b.n	8007490 <_dtoa_r+0x648>
 8007552:	46d0      	mov	r8, sl
 8007554:	e7eb      	b.n	800752e <_dtoa_r+0x6e6>
 8007556:	2200      	movs	r2, #0
 8007558:	4b6e      	ldr	r3, [pc, #440]	; (8007714 <_dtoa_r+0x8cc>)
 800755a:	f7f8 ffbd 	bl	80004d8 <__aeabi_dmul>
 800755e:	2200      	movs	r2, #0
 8007560:	2300      	movs	r3, #0
 8007562:	4680      	mov	r8, r0
 8007564:	4689      	mov	r9, r1
 8007566:	f7f9 fa1f 	bl	80009a8 <__aeabi_dcmpeq>
 800756a:	2800      	cmp	r0, #0
 800756c:	d09b      	beq.n	80074a6 <_dtoa_r+0x65e>
 800756e:	e7cd      	b.n	800750c <_dtoa_r+0x6c4>
 8007570:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007572:	2a00      	cmp	r2, #0
 8007574:	f000 80d0 	beq.w	8007718 <_dtoa_r+0x8d0>
 8007578:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800757a:	2a01      	cmp	r2, #1
 800757c:	f300 80ae 	bgt.w	80076dc <_dtoa_r+0x894>
 8007580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007582:	2a00      	cmp	r2, #0
 8007584:	f000 80a6 	beq.w	80076d4 <_dtoa_r+0x88c>
 8007588:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800758c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800758e:	9f06      	ldr	r7, [sp, #24]
 8007590:	9a06      	ldr	r2, [sp, #24]
 8007592:	2101      	movs	r1, #1
 8007594:	441a      	add	r2, r3
 8007596:	9206      	str	r2, [sp, #24]
 8007598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800759a:	4628      	mov	r0, r5
 800759c:	441a      	add	r2, r3
 800759e:	9209      	str	r2, [sp, #36]	; 0x24
 80075a0:	f000 fb5e 	bl	8007c60 <__i2b>
 80075a4:	4606      	mov	r6, r0
 80075a6:	2f00      	cmp	r7, #0
 80075a8:	dd0c      	ble.n	80075c4 <_dtoa_r+0x77c>
 80075aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dd09      	ble.n	80075c4 <_dtoa_r+0x77c>
 80075b0:	42bb      	cmp	r3, r7
 80075b2:	bfa8      	it	ge
 80075b4:	463b      	movge	r3, r7
 80075b6:	9a06      	ldr	r2, [sp, #24]
 80075b8:	1aff      	subs	r7, r7, r3
 80075ba:	1ad2      	subs	r2, r2, r3
 80075bc:	9206      	str	r2, [sp, #24]
 80075be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	9309      	str	r3, [sp, #36]	; 0x24
 80075c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c6:	b1f3      	cbz	r3, 8007606 <_dtoa_r+0x7be>
 80075c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80a8 	beq.w	8007720 <_dtoa_r+0x8d8>
 80075d0:	2c00      	cmp	r4, #0
 80075d2:	dd10      	ble.n	80075f6 <_dtoa_r+0x7ae>
 80075d4:	4631      	mov	r1, r6
 80075d6:	4622      	mov	r2, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 fbff 	bl	8007ddc <__pow5mult>
 80075de:	465a      	mov	r2, fp
 80075e0:	4601      	mov	r1, r0
 80075e2:	4606      	mov	r6, r0
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 fb51 	bl	8007c8c <__multiply>
 80075ea:	4680      	mov	r8, r0
 80075ec:	4659      	mov	r1, fp
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 fa80 	bl	8007af4 <_Bfree>
 80075f4:	46c3      	mov	fp, r8
 80075f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f8:	1b1a      	subs	r2, r3, r4
 80075fa:	d004      	beq.n	8007606 <_dtoa_r+0x7be>
 80075fc:	4659      	mov	r1, fp
 80075fe:	4628      	mov	r0, r5
 8007600:	f000 fbec 	bl	8007ddc <__pow5mult>
 8007604:	4683      	mov	fp, r0
 8007606:	2101      	movs	r1, #1
 8007608:	4628      	mov	r0, r5
 800760a:	f000 fb29 	bl	8007c60 <__i2b>
 800760e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007610:	4604      	mov	r4, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	f340 8086 	ble.w	8007724 <_dtoa_r+0x8dc>
 8007618:	461a      	mov	r2, r3
 800761a:	4601      	mov	r1, r0
 800761c:	4628      	mov	r0, r5
 800761e:	f000 fbdd 	bl	8007ddc <__pow5mult>
 8007622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007624:	4604      	mov	r4, r0
 8007626:	2b01      	cmp	r3, #1
 8007628:	dd7f      	ble.n	800772a <_dtoa_r+0x8e2>
 800762a:	f04f 0800 	mov.w	r8, #0
 800762e:	6923      	ldr	r3, [r4, #16]
 8007630:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007634:	6918      	ldr	r0, [r3, #16]
 8007636:	f000 fac5 	bl	8007bc4 <__hi0bits>
 800763a:	f1c0 0020 	rsb	r0, r0, #32
 800763e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007640:	4418      	add	r0, r3
 8007642:	f010 001f 	ands.w	r0, r0, #31
 8007646:	f000 8092 	beq.w	800776e <_dtoa_r+0x926>
 800764a:	f1c0 0320 	rsb	r3, r0, #32
 800764e:	2b04      	cmp	r3, #4
 8007650:	f340 808a 	ble.w	8007768 <_dtoa_r+0x920>
 8007654:	f1c0 001c 	rsb	r0, r0, #28
 8007658:	9b06      	ldr	r3, [sp, #24]
 800765a:	4407      	add	r7, r0
 800765c:	4403      	add	r3, r0
 800765e:	9306      	str	r3, [sp, #24]
 8007660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007662:	4403      	add	r3, r0
 8007664:	9309      	str	r3, [sp, #36]	; 0x24
 8007666:	9b06      	ldr	r3, [sp, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	dd05      	ble.n	8007678 <_dtoa_r+0x830>
 800766c:	4659      	mov	r1, fp
 800766e:	461a      	mov	r2, r3
 8007670:	4628      	mov	r0, r5
 8007672:	f000 fc0d 	bl	8007e90 <__lshift>
 8007676:	4683      	mov	fp, r0
 8007678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	dd05      	ble.n	800768a <_dtoa_r+0x842>
 800767e:	4621      	mov	r1, r4
 8007680:	461a      	mov	r2, r3
 8007682:	4628      	mov	r0, r5
 8007684:	f000 fc04 	bl	8007e90 <__lshift>
 8007688:	4604      	mov	r4, r0
 800768a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d070      	beq.n	8007772 <_dtoa_r+0x92a>
 8007690:	4621      	mov	r1, r4
 8007692:	4658      	mov	r0, fp
 8007694:	f000 fc6c 	bl	8007f70 <__mcmp>
 8007698:	2800      	cmp	r0, #0
 800769a:	da6a      	bge.n	8007772 <_dtoa_r+0x92a>
 800769c:	2300      	movs	r3, #0
 800769e:	4659      	mov	r1, fp
 80076a0:	220a      	movs	r2, #10
 80076a2:	4628      	mov	r0, r5
 80076a4:	f000 fa48 	bl	8007b38 <__multadd>
 80076a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076aa:	4683      	mov	fp, r0
 80076ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8194 	beq.w	80079de <_dtoa_r+0xb96>
 80076b6:	4631      	mov	r1, r6
 80076b8:	2300      	movs	r3, #0
 80076ba:	220a      	movs	r2, #10
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 fa3b 	bl	8007b38 <__multadd>
 80076c2:	f1b9 0f00 	cmp.w	r9, #0
 80076c6:	4606      	mov	r6, r0
 80076c8:	f300 8093 	bgt.w	80077f2 <_dtoa_r+0x9aa>
 80076cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	dc57      	bgt.n	8007782 <_dtoa_r+0x93a>
 80076d2:	e08e      	b.n	80077f2 <_dtoa_r+0x9aa>
 80076d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80076d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076da:	e757      	b.n	800758c <_dtoa_r+0x744>
 80076dc:	9b08      	ldr	r3, [sp, #32]
 80076de:	1e5c      	subs	r4, r3, #1
 80076e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	bfb7      	itett	lt
 80076e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076e8:	1b1c      	subge	r4, r3, r4
 80076ea:	1ae2      	sublt	r2, r4, r3
 80076ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80076ee:	bfbe      	ittt	lt
 80076f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80076f2:	189b      	addlt	r3, r3, r2
 80076f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80076f6:	9b08      	ldr	r3, [sp, #32]
 80076f8:	bfb8      	it	lt
 80076fa:	2400      	movlt	r4, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bfbb      	ittet	lt
 8007700:	9b06      	ldrlt	r3, [sp, #24]
 8007702:	9a08      	ldrlt	r2, [sp, #32]
 8007704:	9f06      	ldrge	r7, [sp, #24]
 8007706:	1a9f      	sublt	r7, r3, r2
 8007708:	bfac      	ite	ge
 800770a:	9b08      	ldrge	r3, [sp, #32]
 800770c:	2300      	movlt	r3, #0
 800770e:	e73f      	b.n	8007590 <_dtoa_r+0x748>
 8007710:	3fe00000 	.word	0x3fe00000
 8007714:	40240000 	.word	0x40240000
 8007718:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800771a:	9f06      	ldr	r7, [sp, #24]
 800771c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800771e:	e742      	b.n	80075a6 <_dtoa_r+0x75e>
 8007720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007722:	e76b      	b.n	80075fc <_dtoa_r+0x7b4>
 8007724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007726:	2b01      	cmp	r3, #1
 8007728:	dc19      	bgt.n	800775e <_dtoa_r+0x916>
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	b9bb      	cbnz	r3, 800775e <_dtoa_r+0x916>
 800772e:	9b05      	ldr	r3, [sp, #20]
 8007730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007734:	b99b      	cbnz	r3, 800775e <_dtoa_r+0x916>
 8007736:	9b05      	ldr	r3, [sp, #20]
 8007738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800773c:	0d1b      	lsrs	r3, r3, #20
 800773e:	051b      	lsls	r3, r3, #20
 8007740:	b183      	cbz	r3, 8007764 <_dtoa_r+0x91c>
 8007742:	f04f 0801 	mov.w	r8, #1
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	3301      	adds	r3, #1
 800774a:	9306      	str	r3, [sp, #24]
 800774c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774e:	3301      	adds	r3, #1
 8007750:	9309      	str	r3, [sp, #36]	; 0x24
 8007752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007754:	2b00      	cmp	r3, #0
 8007756:	f47f af6a 	bne.w	800762e <_dtoa_r+0x7e6>
 800775a:	2001      	movs	r0, #1
 800775c:	e76f      	b.n	800763e <_dtoa_r+0x7f6>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	e7f6      	b.n	8007752 <_dtoa_r+0x90a>
 8007764:	4698      	mov	r8, r3
 8007766:	e7f4      	b.n	8007752 <_dtoa_r+0x90a>
 8007768:	f43f af7d 	beq.w	8007666 <_dtoa_r+0x81e>
 800776c:	4618      	mov	r0, r3
 800776e:	301c      	adds	r0, #28
 8007770:	e772      	b.n	8007658 <_dtoa_r+0x810>
 8007772:	9b08      	ldr	r3, [sp, #32]
 8007774:	2b00      	cmp	r3, #0
 8007776:	dc36      	bgt.n	80077e6 <_dtoa_r+0x99e>
 8007778:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800777a:	2b02      	cmp	r3, #2
 800777c:	dd33      	ble.n	80077e6 <_dtoa_r+0x99e>
 800777e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007782:	f1b9 0f00 	cmp.w	r9, #0
 8007786:	d10d      	bne.n	80077a4 <_dtoa_r+0x95c>
 8007788:	4621      	mov	r1, r4
 800778a:	464b      	mov	r3, r9
 800778c:	2205      	movs	r2, #5
 800778e:	4628      	mov	r0, r5
 8007790:	f000 f9d2 	bl	8007b38 <__multadd>
 8007794:	4601      	mov	r1, r0
 8007796:	4604      	mov	r4, r0
 8007798:	4658      	mov	r0, fp
 800779a:	f000 fbe9 	bl	8007f70 <__mcmp>
 800779e:	2800      	cmp	r0, #0
 80077a0:	f73f adb8 	bgt.w	8007314 <_dtoa_r+0x4cc>
 80077a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077a6:	9f03      	ldr	r7, [sp, #12]
 80077a8:	ea6f 0a03 	mvn.w	sl, r3
 80077ac:	f04f 0800 	mov.w	r8, #0
 80077b0:	4621      	mov	r1, r4
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 f99e 	bl	8007af4 <_Bfree>
 80077b8:	2e00      	cmp	r6, #0
 80077ba:	f43f aea7 	beq.w	800750c <_dtoa_r+0x6c4>
 80077be:	f1b8 0f00 	cmp.w	r8, #0
 80077c2:	d005      	beq.n	80077d0 <_dtoa_r+0x988>
 80077c4:	45b0      	cmp	r8, r6
 80077c6:	d003      	beq.n	80077d0 <_dtoa_r+0x988>
 80077c8:	4641      	mov	r1, r8
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f992 	bl	8007af4 <_Bfree>
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 f98e 	bl	8007af4 <_Bfree>
 80077d8:	e698      	b.n	800750c <_dtoa_r+0x6c4>
 80077da:	2400      	movs	r4, #0
 80077dc:	4626      	mov	r6, r4
 80077de:	e7e1      	b.n	80077a4 <_dtoa_r+0x95c>
 80077e0:	46c2      	mov	sl, r8
 80077e2:	4626      	mov	r6, r4
 80077e4:	e596      	b.n	8007314 <_dtoa_r+0x4cc>
 80077e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80fd 	beq.w	80079ec <_dtoa_r+0xba4>
 80077f2:	2f00      	cmp	r7, #0
 80077f4:	dd05      	ble.n	8007802 <_dtoa_r+0x9ba>
 80077f6:	4631      	mov	r1, r6
 80077f8:	463a      	mov	r2, r7
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fb48 	bl	8007e90 <__lshift>
 8007800:	4606      	mov	r6, r0
 8007802:	f1b8 0f00 	cmp.w	r8, #0
 8007806:	d05c      	beq.n	80078c2 <_dtoa_r+0xa7a>
 8007808:	4628      	mov	r0, r5
 800780a:	6871      	ldr	r1, [r6, #4]
 800780c:	f000 f932 	bl	8007a74 <_Balloc>
 8007810:	4607      	mov	r7, r0
 8007812:	b928      	cbnz	r0, 8007820 <_dtoa_r+0x9d8>
 8007814:	4602      	mov	r2, r0
 8007816:	f240 21ea 	movw	r1, #746	; 0x2ea
 800781a:	4b7f      	ldr	r3, [pc, #508]	; (8007a18 <_dtoa_r+0xbd0>)
 800781c:	f7ff bb28 	b.w	8006e70 <_dtoa_r+0x28>
 8007820:	6932      	ldr	r2, [r6, #16]
 8007822:	f106 010c 	add.w	r1, r6, #12
 8007826:	3202      	adds	r2, #2
 8007828:	0092      	lsls	r2, r2, #2
 800782a:	300c      	adds	r0, #12
 800782c:	f000 f914 	bl	8007a58 <memcpy>
 8007830:	2201      	movs	r2, #1
 8007832:	4639      	mov	r1, r7
 8007834:	4628      	mov	r0, r5
 8007836:	f000 fb2b 	bl	8007e90 <__lshift>
 800783a:	46b0      	mov	r8, r6
 800783c:	4606      	mov	r6, r0
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	3301      	adds	r3, #1
 8007842:	9308      	str	r3, [sp, #32]
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	444b      	add	r3, r9
 8007848:	930a      	str	r3, [sp, #40]	; 0x28
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	9309      	str	r3, [sp, #36]	; 0x24
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	4621      	mov	r1, r4
 8007856:	3b01      	subs	r3, #1
 8007858:	4658      	mov	r0, fp
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	f7ff fa66 	bl	8006d2c <quorem>
 8007860:	4603      	mov	r3, r0
 8007862:	4641      	mov	r1, r8
 8007864:	3330      	adds	r3, #48	; 0x30
 8007866:	9006      	str	r0, [sp, #24]
 8007868:	4658      	mov	r0, fp
 800786a:	930b      	str	r3, [sp, #44]	; 0x2c
 800786c:	f000 fb80 	bl	8007f70 <__mcmp>
 8007870:	4632      	mov	r2, r6
 8007872:	4681      	mov	r9, r0
 8007874:	4621      	mov	r1, r4
 8007876:	4628      	mov	r0, r5
 8007878:	f000 fb96 	bl	8007fa8 <__mdiff>
 800787c:	68c2      	ldr	r2, [r0, #12]
 800787e:	4607      	mov	r7, r0
 8007880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007882:	bb02      	cbnz	r2, 80078c6 <_dtoa_r+0xa7e>
 8007884:	4601      	mov	r1, r0
 8007886:	4658      	mov	r0, fp
 8007888:	f000 fb72 	bl	8007f70 <__mcmp>
 800788c:	4602      	mov	r2, r0
 800788e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007890:	4639      	mov	r1, r7
 8007892:	4628      	mov	r0, r5
 8007894:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007898:	f000 f92c 	bl	8007af4 <_Bfree>
 800789c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800789e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078a0:	9f08      	ldr	r7, [sp, #32]
 80078a2:	ea43 0102 	orr.w	r1, r3, r2
 80078a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a8:	430b      	orrs	r3, r1
 80078aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ac:	d10d      	bne.n	80078ca <_dtoa_r+0xa82>
 80078ae:	2b39      	cmp	r3, #57	; 0x39
 80078b0:	d029      	beq.n	8007906 <_dtoa_r+0xabe>
 80078b2:	f1b9 0f00 	cmp.w	r9, #0
 80078b6:	dd01      	ble.n	80078bc <_dtoa_r+0xa74>
 80078b8:	9b06      	ldr	r3, [sp, #24]
 80078ba:	3331      	adds	r3, #49	; 0x31
 80078bc:	9a04      	ldr	r2, [sp, #16]
 80078be:	7013      	strb	r3, [r2, #0]
 80078c0:	e776      	b.n	80077b0 <_dtoa_r+0x968>
 80078c2:	4630      	mov	r0, r6
 80078c4:	e7b9      	b.n	800783a <_dtoa_r+0x9f2>
 80078c6:	2201      	movs	r2, #1
 80078c8:	e7e2      	b.n	8007890 <_dtoa_r+0xa48>
 80078ca:	f1b9 0f00 	cmp.w	r9, #0
 80078ce:	db06      	blt.n	80078de <_dtoa_r+0xa96>
 80078d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80078d2:	ea41 0909 	orr.w	r9, r1, r9
 80078d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078d8:	ea59 0101 	orrs.w	r1, r9, r1
 80078dc:	d120      	bne.n	8007920 <_dtoa_r+0xad8>
 80078de:	2a00      	cmp	r2, #0
 80078e0:	ddec      	ble.n	80078bc <_dtoa_r+0xa74>
 80078e2:	4659      	mov	r1, fp
 80078e4:	2201      	movs	r2, #1
 80078e6:	4628      	mov	r0, r5
 80078e8:	9308      	str	r3, [sp, #32]
 80078ea:	f000 fad1 	bl	8007e90 <__lshift>
 80078ee:	4621      	mov	r1, r4
 80078f0:	4683      	mov	fp, r0
 80078f2:	f000 fb3d 	bl	8007f70 <__mcmp>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	9b08      	ldr	r3, [sp, #32]
 80078fa:	dc02      	bgt.n	8007902 <_dtoa_r+0xaba>
 80078fc:	d1de      	bne.n	80078bc <_dtoa_r+0xa74>
 80078fe:	07da      	lsls	r2, r3, #31
 8007900:	d5dc      	bpl.n	80078bc <_dtoa_r+0xa74>
 8007902:	2b39      	cmp	r3, #57	; 0x39
 8007904:	d1d8      	bne.n	80078b8 <_dtoa_r+0xa70>
 8007906:	2339      	movs	r3, #57	; 0x39
 8007908:	9a04      	ldr	r2, [sp, #16]
 800790a:	7013      	strb	r3, [r2, #0]
 800790c:	463b      	mov	r3, r7
 800790e:	461f      	mov	r7, r3
 8007910:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007914:	3b01      	subs	r3, #1
 8007916:	2a39      	cmp	r2, #57	; 0x39
 8007918:	d050      	beq.n	80079bc <_dtoa_r+0xb74>
 800791a:	3201      	adds	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e747      	b.n	80077b0 <_dtoa_r+0x968>
 8007920:	2a00      	cmp	r2, #0
 8007922:	dd03      	ble.n	800792c <_dtoa_r+0xae4>
 8007924:	2b39      	cmp	r3, #57	; 0x39
 8007926:	d0ee      	beq.n	8007906 <_dtoa_r+0xabe>
 8007928:	3301      	adds	r3, #1
 800792a:	e7c7      	b.n	80078bc <_dtoa_r+0xa74>
 800792c:	9a08      	ldr	r2, [sp, #32]
 800792e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007930:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007934:	428a      	cmp	r2, r1
 8007936:	d02a      	beq.n	800798e <_dtoa_r+0xb46>
 8007938:	4659      	mov	r1, fp
 800793a:	2300      	movs	r3, #0
 800793c:	220a      	movs	r2, #10
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f8fa 	bl	8007b38 <__multadd>
 8007944:	45b0      	cmp	r8, r6
 8007946:	4683      	mov	fp, r0
 8007948:	f04f 0300 	mov.w	r3, #0
 800794c:	f04f 020a 	mov.w	r2, #10
 8007950:	4641      	mov	r1, r8
 8007952:	4628      	mov	r0, r5
 8007954:	d107      	bne.n	8007966 <_dtoa_r+0xb1e>
 8007956:	f000 f8ef 	bl	8007b38 <__multadd>
 800795a:	4680      	mov	r8, r0
 800795c:	4606      	mov	r6, r0
 800795e:	9b08      	ldr	r3, [sp, #32]
 8007960:	3301      	adds	r3, #1
 8007962:	9308      	str	r3, [sp, #32]
 8007964:	e775      	b.n	8007852 <_dtoa_r+0xa0a>
 8007966:	f000 f8e7 	bl	8007b38 <__multadd>
 800796a:	4631      	mov	r1, r6
 800796c:	4680      	mov	r8, r0
 800796e:	2300      	movs	r3, #0
 8007970:	220a      	movs	r2, #10
 8007972:	4628      	mov	r0, r5
 8007974:	f000 f8e0 	bl	8007b38 <__multadd>
 8007978:	4606      	mov	r6, r0
 800797a:	e7f0      	b.n	800795e <_dtoa_r+0xb16>
 800797c:	f1b9 0f00 	cmp.w	r9, #0
 8007980:	bfcc      	ite	gt
 8007982:	464f      	movgt	r7, r9
 8007984:	2701      	movle	r7, #1
 8007986:	f04f 0800 	mov.w	r8, #0
 800798a:	9a03      	ldr	r2, [sp, #12]
 800798c:	4417      	add	r7, r2
 800798e:	4659      	mov	r1, fp
 8007990:	2201      	movs	r2, #1
 8007992:	4628      	mov	r0, r5
 8007994:	9308      	str	r3, [sp, #32]
 8007996:	f000 fa7b 	bl	8007e90 <__lshift>
 800799a:	4621      	mov	r1, r4
 800799c:	4683      	mov	fp, r0
 800799e:	f000 fae7 	bl	8007f70 <__mcmp>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	dcb2      	bgt.n	800790c <_dtoa_r+0xac4>
 80079a6:	d102      	bne.n	80079ae <_dtoa_r+0xb66>
 80079a8:	9b08      	ldr	r3, [sp, #32]
 80079aa:	07db      	lsls	r3, r3, #31
 80079ac:	d4ae      	bmi.n	800790c <_dtoa_r+0xac4>
 80079ae:	463b      	mov	r3, r7
 80079b0:	461f      	mov	r7, r3
 80079b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b6:	2a30      	cmp	r2, #48	; 0x30
 80079b8:	d0fa      	beq.n	80079b0 <_dtoa_r+0xb68>
 80079ba:	e6f9      	b.n	80077b0 <_dtoa_r+0x968>
 80079bc:	9a03      	ldr	r2, [sp, #12]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d1a5      	bne.n	800790e <_dtoa_r+0xac6>
 80079c2:	2331      	movs	r3, #49	; 0x31
 80079c4:	f10a 0a01 	add.w	sl, sl, #1
 80079c8:	e779      	b.n	80078be <_dtoa_r+0xa76>
 80079ca:	4b14      	ldr	r3, [pc, #80]	; (8007a1c <_dtoa_r+0xbd4>)
 80079cc:	f7ff baa8 	b.w	8006f20 <_dtoa_r+0xd8>
 80079d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f47f aa81 	bne.w	8006eda <_dtoa_r+0x92>
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <_dtoa_r+0xbd8>)
 80079da:	f7ff baa1 	b.w	8006f20 <_dtoa_r+0xd8>
 80079de:	f1b9 0f00 	cmp.w	r9, #0
 80079e2:	dc03      	bgt.n	80079ec <_dtoa_r+0xba4>
 80079e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	f73f aecb 	bgt.w	8007782 <_dtoa_r+0x93a>
 80079ec:	9f03      	ldr	r7, [sp, #12]
 80079ee:	4621      	mov	r1, r4
 80079f0:	4658      	mov	r0, fp
 80079f2:	f7ff f99b 	bl	8006d2c <quorem>
 80079f6:	9a03      	ldr	r2, [sp, #12]
 80079f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80079fc:	f807 3b01 	strb.w	r3, [r7], #1
 8007a00:	1aba      	subs	r2, r7, r2
 8007a02:	4591      	cmp	r9, r2
 8007a04:	ddba      	ble.n	800797c <_dtoa_r+0xb34>
 8007a06:	4659      	mov	r1, fp
 8007a08:	2300      	movs	r3, #0
 8007a0a:	220a      	movs	r2, #10
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 f893 	bl	8007b38 <__multadd>
 8007a12:	4683      	mov	fp, r0
 8007a14:	e7eb      	b.n	80079ee <_dtoa_r+0xba6>
 8007a16:	bf00      	nop
 8007a18:	080092ff 	.word	0x080092ff
 8007a1c:	0800925c 	.word	0x0800925c
 8007a20:	08009280 	.word	0x08009280

08007a24 <_localeconv_r>:
 8007a24:	4800      	ldr	r0, [pc, #0]	; (8007a28 <_localeconv_r+0x4>)
 8007a26:	4770      	bx	lr
 8007a28:	20000168 	.word	0x20000168

08007a2c <malloc>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <malloc+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f000 bc1d 	b.w	8008270 <_malloc_r>
 8007a36:	bf00      	nop
 8007a38:	20000014 	.word	0x20000014

08007a3c <memchr>:
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	b510      	push	{r4, lr}
 8007a40:	b2c9      	uxtb	r1, r1
 8007a42:	4402      	add	r2, r0
 8007a44:	4293      	cmp	r3, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	d101      	bne.n	8007a4e <memchr+0x12>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e003      	b.n	8007a56 <memchr+0x1a>
 8007a4e:	7804      	ldrb	r4, [r0, #0]
 8007a50:	3301      	adds	r3, #1
 8007a52:	428c      	cmp	r4, r1
 8007a54:	d1f6      	bne.n	8007a44 <memchr+0x8>
 8007a56:	bd10      	pop	{r4, pc}

08007a58 <memcpy>:
 8007a58:	440a      	add	r2, r1
 8007a5a:	4291      	cmp	r1, r2
 8007a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a60:	d100      	bne.n	8007a64 <memcpy+0xc>
 8007a62:	4770      	bx	lr
 8007a64:	b510      	push	{r4, lr}
 8007a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6a:	4291      	cmp	r1, r2
 8007a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a70:	d1f9      	bne.n	8007a66 <memcpy+0xe>
 8007a72:	bd10      	pop	{r4, pc}

08007a74 <_Balloc>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a78:	4604      	mov	r4, r0
 8007a7a:	460d      	mov	r5, r1
 8007a7c:	b976      	cbnz	r6, 8007a9c <_Balloc+0x28>
 8007a7e:	2010      	movs	r0, #16
 8007a80:	f7ff ffd4 	bl	8007a2c <malloc>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6260      	str	r0, [r4, #36]	; 0x24
 8007a88:	b920      	cbnz	r0, 8007a94 <_Balloc+0x20>
 8007a8a:	2166      	movs	r1, #102	; 0x66
 8007a8c:	4b17      	ldr	r3, [pc, #92]	; (8007aec <_Balloc+0x78>)
 8007a8e:	4818      	ldr	r0, [pc, #96]	; (8007af0 <_Balloc+0x7c>)
 8007a90:	f000 fdce 	bl	8008630 <__assert_func>
 8007a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a98:	6006      	str	r6, [r0, #0]
 8007a9a:	60c6      	str	r6, [r0, #12]
 8007a9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a9e:	68f3      	ldr	r3, [r6, #12]
 8007aa0:	b183      	cbz	r3, 8007ac4 <_Balloc+0x50>
 8007aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007aaa:	b9b8      	cbnz	r0, 8007adc <_Balloc+0x68>
 8007aac:	2101      	movs	r1, #1
 8007aae:	fa01 f605 	lsl.w	r6, r1, r5
 8007ab2:	1d72      	adds	r2, r6, #5
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	0092      	lsls	r2, r2, #2
 8007ab8:	f000 fb5e 	bl	8008178 <_calloc_r>
 8007abc:	b160      	cbz	r0, 8007ad8 <_Balloc+0x64>
 8007abe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ac2:	e00e      	b.n	8007ae2 <_Balloc+0x6e>
 8007ac4:	2221      	movs	r2, #33	; 0x21
 8007ac6:	2104      	movs	r1, #4
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 fb55 	bl	8008178 <_calloc_r>
 8007ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad0:	60f0      	str	r0, [r6, #12]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e4      	bne.n	8007aa2 <_Balloc+0x2e>
 8007ad8:	2000      	movs	r0, #0
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	6802      	ldr	r2, [r0, #0]
 8007ade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ae8:	e7f7      	b.n	8007ada <_Balloc+0x66>
 8007aea:	bf00      	nop
 8007aec:	0800928d 	.word	0x0800928d
 8007af0:	08009310 	.word	0x08009310

08007af4 <_Bfree>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007af8:	4605      	mov	r5, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	b976      	cbnz	r6, 8007b1c <_Bfree+0x28>
 8007afe:	2010      	movs	r0, #16
 8007b00:	f7ff ff94 	bl	8007a2c <malloc>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6268      	str	r0, [r5, #36]	; 0x24
 8007b08:	b920      	cbnz	r0, 8007b14 <_Bfree+0x20>
 8007b0a:	218a      	movs	r1, #138	; 0x8a
 8007b0c:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <_Bfree+0x3c>)
 8007b0e:	4809      	ldr	r0, [pc, #36]	; (8007b34 <_Bfree+0x40>)
 8007b10:	f000 fd8e 	bl	8008630 <__assert_func>
 8007b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b18:	6006      	str	r6, [r0, #0]
 8007b1a:	60c6      	str	r6, [r0, #12]
 8007b1c:	b13c      	cbz	r4, 8007b2e <_Bfree+0x3a>
 8007b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b20:	6862      	ldr	r2, [r4, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b28:	6021      	str	r1, [r4, #0]
 8007b2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	0800928d 	.word	0x0800928d
 8007b34:	08009310 	.word	0x08009310

08007b38 <__multadd>:
 8007b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	461e      	mov	r6, r3
 8007b42:	2000      	movs	r0, #0
 8007b44:	690d      	ldr	r5, [r1, #16]
 8007b46:	f101 0c14 	add.w	ip, r1, #20
 8007b4a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b4e:	3001      	adds	r0, #1
 8007b50:	b299      	uxth	r1, r3
 8007b52:	fb02 6101 	mla	r1, r2, r1, r6
 8007b56:	0c1e      	lsrs	r6, r3, #16
 8007b58:	0c0b      	lsrs	r3, r1, #16
 8007b5a:	fb02 3306 	mla	r3, r2, r6, r3
 8007b5e:	b289      	uxth	r1, r1
 8007b60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b64:	4285      	cmp	r5, r0
 8007b66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b6e:	dcec      	bgt.n	8007b4a <__multadd+0x12>
 8007b70:	b30e      	cbz	r6, 8007bb6 <__multadd+0x7e>
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	42ab      	cmp	r3, r5
 8007b76:	dc19      	bgt.n	8007bac <__multadd+0x74>
 8007b78:	6861      	ldr	r1, [r4, #4]
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	3101      	adds	r1, #1
 8007b7e:	f7ff ff79 	bl	8007a74 <_Balloc>
 8007b82:	4680      	mov	r8, r0
 8007b84:	b928      	cbnz	r0, 8007b92 <__multadd+0x5a>
 8007b86:	4602      	mov	r2, r0
 8007b88:	21b5      	movs	r1, #181	; 0xb5
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <__multadd+0x84>)
 8007b8c:	480c      	ldr	r0, [pc, #48]	; (8007bc0 <__multadd+0x88>)
 8007b8e:	f000 fd4f 	bl	8008630 <__assert_func>
 8007b92:	6922      	ldr	r2, [r4, #16]
 8007b94:	f104 010c 	add.w	r1, r4, #12
 8007b98:	3202      	adds	r2, #2
 8007b9a:	0092      	lsls	r2, r2, #2
 8007b9c:	300c      	adds	r0, #12
 8007b9e:	f7ff ff5b 	bl	8007a58 <memcpy>
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	f7ff ffa5 	bl	8007af4 <_Bfree>
 8007baa:	4644      	mov	r4, r8
 8007bac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bb0:	3501      	adds	r5, #1
 8007bb2:	615e      	str	r6, [r3, #20]
 8007bb4:	6125      	str	r5, [r4, #16]
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bbc:	080092ff 	.word	0x080092ff
 8007bc0:	08009310 	.word	0x08009310

08007bc4 <__hi0bits>:
 8007bc4:	0c02      	lsrs	r2, r0, #16
 8007bc6:	0412      	lsls	r2, r2, #16
 8007bc8:	4603      	mov	r3, r0
 8007bca:	b9ca      	cbnz	r2, 8007c00 <__hi0bits+0x3c>
 8007bcc:	0403      	lsls	r3, r0, #16
 8007bce:	2010      	movs	r0, #16
 8007bd0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007bd4:	bf04      	itt	eq
 8007bd6:	021b      	lsleq	r3, r3, #8
 8007bd8:	3008      	addeq	r0, #8
 8007bda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007bde:	bf04      	itt	eq
 8007be0:	011b      	lsleq	r3, r3, #4
 8007be2:	3004      	addeq	r0, #4
 8007be4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007be8:	bf04      	itt	eq
 8007bea:	009b      	lsleq	r3, r3, #2
 8007bec:	3002      	addeq	r0, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	db05      	blt.n	8007bfe <__hi0bits+0x3a>
 8007bf2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007bf6:	f100 0001 	add.w	r0, r0, #1
 8007bfa:	bf08      	it	eq
 8007bfc:	2020      	moveq	r0, #32
 8007bfe:	4770      	bx	lr
 8007c00:	2000      	movs	r0, #0
 8007c02:	e7e5      	b.n	8007bd0 <__hi0bits+0xc>

08007c04 <__lo0bits>:
 8007c04:	6803      	ldr	r3, [r0, #0]
 8007c06:	4602      	mov	r2, r0
 8007c08:	f013 0007 	ands.w	r0, r3, #7
 8007c0c:	d00b      	beq.n	8007c26 <__lo0bits+0x22>
 8007c0e:	07d9      	lsls	r1, r3, #31
 8007c10:	d421      	bmi.n	8007c56 <__lo0bits+0x52>
 8007c12:	0798      	lsls	r0, r3, #30
 8007c14:	bf49      	itett	mi
 8007c16:	085b      	lsrmi	r3, r3, #1
 8007c18:	089b      	lsrpl	r3, r3, #2
 8007c1a:	2001      	movmi	r0, #1
 8007c1c:	6013      	strmi	r3, [r2, #0]
 8007c1e:	bf5c      	itt	pl
 8007c20:	2002      	movpl	r0, #2
 8007c22:	6013      	strpl	r3, [r2, #0]
 8007c24:	4770      	bx	lr
 8007c26:	b299      	uxth	r1, r3
 8007c28:	b909      	cbnz	r1, 8007c2e <__lo0bits+0x2a>
 8007c2a:	2010      	movs	r0, #16
 8007c2c:	0c1b      	lsrs	r3, r3, #16
 8007c2e:	b2d9      	uxtb	r1, r3
 8007c30:	b909      	cbnz	r1, 8007c36 <__lo0bits+0x32>
 8007c32:	3008      	adds	r0, #8
 8007c34:	0a1b      	lsrs	r3, r3, #8
 8007c36:	0719      	lsls	r1, r3, #28
 8007c38:	bf04      	itt	eq
 8007c3a:	091b      	lsreq	r3, r3, #4
 8007c3c:	3004      	addeq	r0, #4
 8007c3e:	0799      	lsls	r1, r3, #30
 8007c40:	bf04      	itt	eq
 8007c42:	089b      	lsreq	r3, r3, #2
 8007c44:	3002      	addeq	r0, #2
 8007c46:	07d9      	lsls	r1, r3, #31
 8007c48:	d403      	bmi.n	8007c52 <__lo0bits+0x4e>
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	f100 0001 	add.w	r0, r0, #1
 8007c50:	d003      	beq.n	8007c5a <__lo0bits+0x56>
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4770      	bx	lr
 8007c56:	2000      	movs	r0, #0
 8007c58:	4770      	bx	lr
 8007c5a:	2020      	movs	r0, #32
 8007c5c:	4770      	bx	lr
	...

08007c60 <__i2b>:
 8007c60:	b510      	push	{r4, lr}
 8007c62:	460c      	mov	r4, r1
 8007c64:	2101      	movs	r1, #1
 8007c66:	f7ff ff05 	bl	8007a74 <_Balloc>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	b928      	cbnz	r0, 8007c7a <__i2b+0x1a>
 8007c6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c72:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <__i2b+0x24>)
 8007c74:	4804      	ldr	r0, [pc, #16]	; (8007c88 <__i2b+0x28>)
 8007c76:	f000 fcdb 	bl	8008630 <__assert_func>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	6144      	str	r4, [r0, #20]
 8007c7e:	6103      	str	r3, [r0, #16]
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	bf00      	nop
 8007c84:	080092ff 	.word	0x080092ff
 8007c88:	08009310 	.word	0x08009310

08007c8c <__multiply>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	4691      	mov	r9, r2
 8007c92:	690a      	ldr	r2, [r1, #16]
 8007c94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c98:	460c      	mov	r4, r1
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	bfbe      	ittt	lt
 8007c9e:	460b      	movlt	r3, r1
 8007ca0:	464c      	movlt	r4, r9
 8007ca2:	4699      	movlt	r9, r3
 8007ca4:	6927      	ldr	r7, [r4, #16]
 8007ca6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007caa:	68a3      	ldr	r3, [r4, #8]
 8007cac:	6861      	ldr	r1, [r4, #4]
 8007cae:	eb07 060a 	add.w	r6, r7, sl
 8007cb2:	42b3      	cmp	r3, r6
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	bfb8      	it	lt
 8007cb8:	3101      	addlt	r1, #1
 8007cba:	f7ff fedb 	bl	8007a74 <_Balloc>
 8007cbe:	b930      	cbnz	r0, 8007cce <__multiply+0x42>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	f240 115d 	movw	r1, #349	; 0x15d
 8007cc6:	4b43      	ldr	r3, [pc, #268]	; (8007dd4 <__multiply+0x148>)
 8007cc8:	4843      	ldr	r0, [pc, #268]	; (8007dd8 <__multiply+0x14c>)
 8007cca:	f000 fcb1 	bl	8008630 <__assert_func>
 8007cce:	f100 0514 	add.w	r5, r0, #20
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cda:	4543      	cmp	r3, r8
 8007cdc:	d321      	bcc.n	8007d22 <__multiply+0x96>
 8007cde:	f104 0314 	add.w	r3, r4, #20
 8007ce2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ce6:	f109 0314 	add.w	r3, r9, #20
 8007cea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	1b3a      	subs	r2, r7, r4
 8007cf2:	3a15      	subs	r2, #21
 8007cf4:	f022 0203 	bic.w	r2, r2, #3
 8007cf8:	3204      	adds	r2, #4
 8007cfa:	f104 0115 	add.w	r1, r4, #21
 8007cfe:	428f      	cmp	r7, r1
 8007d00:	bf38      	it	cc
 8007d02:	2204      	movcc	r2, #4
 8007d04:	9201      	str	r2, [sp, #4]
 8007d06:	9a02      	ldr	r2, [sp, #8]
 8007d08:	9303      	str	r3, [sp, #12]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d80c      	bhi.n	8007d28 <__multiply+0x9c>
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	dd03      	ble.n	8007d1a <__multiply+0x8e>
 8007d12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d059      	beq.n	8007dce <__multiply+0x142>
 8007d1a:	6106      	str	r6, [r0, #16]
 8007d1c:	b005      	add	sp, #20
 8007d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	f843 2b04 	str.w	r2, [r3], #4
 8007d26:	e7d8      	b.n	8007cda <__multiply+0x4e>
 8007d28:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d2c:	f1ba 0f00 	cmp.w	sl, #0
 8007d30:	d023      	beq.n	8007d7a <__multiply+0xee>
 8007d32:	46a9      	mov	r9, r5
 8007d34:	f04f 0c00 	mov.w	ip, #0
 8007d38:	f104 0e14 	add.w	lr, r4, #20
 8007d3c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d40:	f8d9 1000 	ldr.w	r1, [r9]
 8007d44:	fa1f fb82 	uxth.w	fp, r2
 8007d48:	b289      	uxth	r1, r1
 8007d4a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d4e:	4461      	add	r1, ip
 8007d50:	f8d9 c000 	ldr.w	ip, [r9]
 8007d54:	0c12      	lsrs	r2, r2, #16
 8007d56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007d5a:	fb0a c202 	mla	r2, sl, r2, ip
 8007d5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d62:	b289      	uxth	r1, r1
 8007d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d68:	4577      	cmp	r7, lr
 8007d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d6e:	f849 1b04 	str.w	r1, [r9], #4
 8007d72:	d8e3      	bhi.n	8007d3c <__multiply+0xb0>
 8007d74:	9a01      	ldr	r2, [sp, #4]
 8007d76:	f845 c002 	str.w	ip, [r5, r2]
 8007d7a:	9a03      	ldr	r2, [sp, #12]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d82:	f1b9 0f00 	cmp.w	r9, #0
 8007d86:	d020      	beq.n	8007dca <__multiply+0x13e>
 8007d88:	46ae      	mov	lr, r5
 8007d8a:	f04f 0a00 	mov.w	sl, #0
 8007d8e:	6829      	ldr	r1, [r5, #0]
 8007d90:	f104 0c14 	add.w	ip, r4, #20
 8007d94:	f8bc b000 	ldrh.w	fp, [ip]
 8007d98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d9c:	b289      	uxth	r1, r1
 8007d9e:	fb09 220b 	mla	r2, r9, fp, r2
 8007da2:	4492      	add	sl, r2
 8007da4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007da8:	f84e 1b04 	str.w	r1, [lr], #4
 8007dac:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007db0:	f8be 1000 	ldrh.w	r1, [lr]
 8007db4:	0c12      	lsrs	r2, r2, #16
 8007db6:	fb09 1102 	mla	r1, r9, r2, r1
 8007dba:	4567      	cmp	r7, ip
 8007dbc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007dc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dc4:	d8e6      	bhi.n	8007d94 <__multiply+0x108>
 8007dc6:	9a01      	ldr	r2, [sp, #4]
 8007dc8:	50a9      	str	r1, [r5, r2]
 8007dca:	3504      	adds	r5, #4
 8007dcc:	e79b      	b.n	8007d06 <__multiply+0x7a>
 8007dce:	3e01      	subs	r6, #1
 8007dd0:	e79d      	b.n	8007d0e <__multiply+0x82>
 8007dd2:	bf00      	nop
 8007dd4:	080092ff 	.word	0x080092ff
 8007dd8:	08009310 	.word	0x08009310

08007ddc <__pow5mult>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	4615      	mov	r5, r2
 8007de2:	f012 0203 	ands.w	r2, r2, #3
 8007de6:	4606      	mov	r6, r0
 8007de8:	460f      	mov	r7, r1
 8007dea:	d007      	beq.n	8007dfc <__pow5mult+0x20>
 8007dec:	4c25      	ldr	r4, [pc, #148]	; (8007e84 <__pow5mult+0xa8>)
 8007dee:	3a01      	subs	r2, #1
 8007df0:	2300      	movs	r3, #0
 8007df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007df6:	f7ff fe9f 	bl	8007b38 <__multadd>
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	10ad      	asrs	r5, r5, #2
 8007dfe:	d03d      	beq.n	8007e7c <__pow5mult+0xa0>
 8007e00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e02:	b97c      	cbnz	r4, 8007e24 <__pow5mult+0x48>
 8007e04:	2010      	movs	r0, #16
 8007e06:	f7ff fe11 	bl	8007a2c <malloc>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	6270      	str	r0, [r6, #36]	; 0x24
 8007e0e:	b928      	cbnz	r0, 8007e1c <__pow5mult+0x40>
 8007e10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e14:	4b1c      	ldr	r3, [pc, #112]	; (8007e88 <__pow5mult+0xac>)
 8007e16:	481d      	ldr	r0, [pc, #116]	; (8007e8c <__pow5mult+0xb0>)
 8007e18:	f000 fc0a 	bl	8008630 <__assert_func>
 8007e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e20:	6004      	str	r4, [r0, #0]
 8007e22:	60c4      	str	r4, [r0, #12]
 8007e24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e2c:	b94c      	cbnz	r4, 8007e42 <__pow5mult+0x66>
 8007e2e:	f240 2171 	movw	r1, #625	; 0x271
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7ff ff14 	bl	8007c60 <__i2b>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e40:	6003      	str	r3, [r0, #0]
 8007e42:	f04f 0900 	mov.w	r9, #0
 8007e46:	07eb      	lsls	r3, r5, #31
 8007e48:	d50a      	bpl.n	8007e60 <__pow5mult+0x84>
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff ff1c 	bl	8007c8c <__multiply>
 8007e54:	4680      	mov	r8, r0
 8007e56:	4639      	mov	r1, r7
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff fe4b 	bl	8007af4 <_Bfree>
 8007e5e:	4647      	mov	r7, r8
 8007e60:	106d      	asrs	r5, r5, #1
 8007e62:	d00b      	beq.n	8007e7c <__pow5mult+0xa0>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	b938      	cbnz	r0, 8007e78 <__pow5mult+0x9c>
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff ff0d 	bl	8007c8c <__multiply>
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	f8c0 9000 	str.w	r9, [r0]
 8007e78:	4604      	mov	r4, r0
 8007e7a:	e7e4      	b.n	8007e46 <__pow5mult+0x6a>
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e82:	bf00      	nop
 8007e84:	08009460 	.word	0x08009460
 8007e88:	0800928d 	.word	0x0800928d
 8007e8c:	08009310 	.word	0x08009310

08007e90 <__lshift>:
 8007e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e94:	460c      	mov	r4, r1
 8007e96:	4607      	mov	r7, r0
 8007e98:	4691      	mov	r9, r2
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	6849      	ldr	r1, [r1, #4]
 8007e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ea2:	68a3      	ldr	r3, [r4, #8]
 8007ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ea8:	f108 0601 	add.w	r6, r8, #1
 8007eac:	42b3      	cmp	r3, r6
 8007eae:	db0b      	blt.n	8007ec8 <__lshift+0x38>
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7ff fddf 	bl	8007a74 <_Balloc>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	b948      	cbnz	r0, 8007ece <__lshift+0x3e>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ec0:	4b29      	ldr	r3, [pc, #164]	; (8007f68 <__lshift+0xd8>)
 8007ec2:	482a      	ldr	r0, [pc, #168]	; (8007f6c <__lshift+0xdc>)
 8007ec4:	f000 fbb4 	bl	8008630 <__assert_func>
 8007ec8:	3101      	adds	r1, #1
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	e7ee      	b.n	8007eac <__lshift+0x1c>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f100 0114 	add.w	r1, r0, #20
 8007ed4:	f100 0210 	add.w	r2, r0, #16
 8007ed8:	4618      	mov	r0, r3
 8007eda:	4553      	cmp	r3, sl
 8007edc:	db37      	blt.n	8007f4e <__lshift+0xbe>
 8007ede:	6920      	ldr	r0, [r4, #16]
 8007ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ee4:	f104 0314 	add.w	r3, r4, #20
 8007ee8:	f019 091f 	ands.w	r9, r9, #31
 8007eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ef0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ef4:	d02f      	beq.n	8007f56 <__lshift+0xc6>
 8007ef6:	468a      	mov	sl, r1
 8007ef8:	f04f 0c00 	mov.w	ip, #0
 8007efc:	f1c9 0e20 	rsb	lr, r9, #32
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	fa02 f209 	lsl.w	r2, r2, r9
 8007f06:	ea42 020c 	orr.w	r2, r2, ip
 8007f0a:	f84a 2b04 	str.w	r2, [sl], #4
 8007f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f12:	4298      	cmp	r0, r3
 8007f14:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f18:	d8f2      	bhi.n	8007f00 <__lshift+0x70>
 8007f1a:	1b03      	subs	r3, r0, r4
 8007f1c:	3b15      	subs	r3, #21
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	3304      	adds	r3, #4
 8007f24:	f104 0215 	add.w	r2, r4, #21
 8007f28:	4290      	cmp	r0, r2
 8007f2a:	bf38      	it	cc
 8007f2c:	2304      	movcc	r3, #4
 8007f2e:	f841 c003 	str.w	ip, [r1, r3]
 8007f32:	f1bc 0f00 	cmp.w	ip, #0
 8007f36:	d001      	beq.n	8007f3c <__lshift+0xac>
 8007f38:	f108 0602 	add.w	r6, r8, #2
 8007f3c:	3e01      	subs	r6, #1
 8007f3e:	4638      	mov	r0, r7
 8007f40:	4621      	mov	r1, r4
 8007f42:	612e      	str	r6, [r5, #16]
 8007f44:	f7ff fdd6 	bl	8007af4 <_Bfree>
 8007f48:	4628      	mov	r0, r5
 8007f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f52:	3301      	adds	r3, #1
 8007f54:	e7c1      	b.n	8007eda <__lshift+0x4a>
 8007f56:	3904      	subs	r1, #4
 8007f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5c:	4298      	cmp	r0, r3
 8007f5e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f62:	d8f9      	bhi.n	8007f58 <__lshift+0xc8>
 8007f64:	e7ea      	b.n	8007f3c <__lshift+0xac>
 8007f66:	bf00      	nop
 8007f68:	080092ff 	.word	0x080092ff
 8007f6c:	08009310 	.word	0x08009310

08007f70 <__mcmp>:
 8007f70:	4603      	mov	r3, r0
 8007f72:	690a      	ldr	r2, [r1, #16]
 8007f74:	6900      	ldr	r0, [r0, #16]
 8007f76:	b530      	push	{r4, r5, lr}
 8007f78:	1a80      	subs	r0, r0, r2
 8007f7a:	d10d      	bne.n	8007f98 <__mcmp+0x28>
 8007f7c:	3314      	adds	r3, #20
 8007f7e:	3114      	adds	r1, #20
 8007f80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f90:	4295      	cmp	r5, r2
 8007f92:	d002      	beq.n	8007f9a <__mcmp+0x2a>
 8007f94:	d304      	bcc.n	8007fa0 <__mcmp+0x30>
 8007f96:	2001      	movs	r0, #1
 8007f98:	bd30      	pop	{r4, r5, pc}
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	d3f4      	bcc.n	8007f88 <__mcmp+0x18>
 8007f9e:	e7fb      	b.n	8007f98 <__mcmp+0x28>
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	e7f8      	b.n	8007f98 <__mcmp+0x28>
	...

08007fa8 <__mdiff>:
 8007fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	460d      	mov	r5, r1
 8007fae:	4607      	mov	r7, r0
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	f7ff ffdb 	bl	8007f70 <__mcmp>
 8007fba:	1e06      	subs	r6, r0, #0
 8007fbc:	d111      	bne.n	8007fe2 <__mdiff+0x3a>
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	f7ff fd57 	bl	8007a74 <_Balloc>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	b928      	cbnz	r0, 8007fd6 <__mdiff+0x2e>
 8007fca:	f240 2132 	movw	r1, #562	; 0x232
 8007fce:	4b3a      	ldr	r3, [pc, #232]	; (80080b8 <__mdiff+0x110>)
 8007fd0:	483a      	ldr	r0, [pc, #232]	; (80080bc <__mdiff+0x114>)
 8007fd2:	f000 fb2d 	bl	8008630 <__assert_func>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fdc:	4610      	mov	r0, r2
 8007fde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe2:	bfa4      	itt	ge
 8007fe4:	4623      	movge	r3, r4
 8007fe6:	462c      	movge	r4, r5
 8007fe8:	4638      	mov	r0, r7
 8007fea:	6861      	ldr	r1, [r4, #4]
 8007fec:	bfa6      	itte	ge
 8007fee:	461d      	movge	r5, r3
 8007ff0:	2600      	movge	r6, #0
 8007ff2:	2601      	movlt	r6, #1
 8007ff4:	f7ff fd3e 	bl	8007a74 <_Balloc>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	b918      	cbnz	r0, 8008004 <__mdiff+0x5c>
 8007ffc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008000:	4b2d      	ldr	r3, [pc, #180]	; (80080b8 <__mdiff+0x110>)
 8008002:	e7e5      	b.n	8007fd0 <__mdiff+0x28>
 8008004:	f102 0814 	add.w	r8, r2, #20
 8008008:	46c2      	mov	sl, r8
 800800a:	f04f 0c00 	mov.w	ip, #0
 800800e:	6927      	ldr	r7, [r4, #16]
 8008010:	60c6      	str	r6, [r0, #12]
 8008012:	692e      	ldr	r6, [r5, #16]
 8008014:	f104 0014 	add.w	r0, r4, #20
 8008018:	f105 0914 	add.w	r9, r5, #20
 800801c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008024:	3410      	adds	r4, #16
 8008026:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800802a:	f859 3b04 	ldr.w	r3, [r9], #4
 800802e:	fa1f f18b 	uxth.w	r1, fp
 8008032:	448c      	add	ip, r1
 8008034:	b299      	uxth	r1, r3
 8008036:	0c1b      	lsrs	r3, r3, #16
 8008038:	ebac 0101 	sub.w	r1, ip, r1
 800803c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008040:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008044:	b289      	uxth	r1, r1
 8008046:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800804a:	454e      	cmp	r6, r9
 800804c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008050:	f84a 3b04 	str.w	r3, [sl], #4
 8008054:	d8e7      	bhi.n	8008026 <__mdiff+0x7e>
 8008056:	1b73      	subs	r3, r6, r5
 8008058:	3b15      	subs	r3, #21
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	3515      	adds	r5, #21
 8008060:	3304      	adds	r3, #4
 8008062:	42ae      	cmp	r6, r5
 8008064:	bf38      	it	cc
 8008066:	2304      	movcc	r3, #4
 8008068:	4418      	add	r0, r3
 800806a:	4443      	add	r3, r8
 800806c:	461e      	mov	r6, r3
 800806e:	4605      	mov	r5, r0
 8008070:	4575      	cmp	r5, lr
 8008072:	d30e      	bcc.n	8008092 <__mdiff+0xea>
 8008074:	f10e 0103 	add.w	r1, lr, #3
 8008078:	1a09      	subs	r1, r1, r0
 800807a:	f021 0103 	bic.w	r1, r1, #3
 800807e:	3803      	subs	r0, #3
 8008080:	4586      	cmp	lr, r0
 8008082:	bf38      	it	cc
 8008084:	2100      	movcc	r1, #0
 8008086:	4419      	add	r1, r3
 8008088:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800808c:	b18b      	cbz	r3, 80080b2 <__mdiff+0x10a>
 800808e:	6117      	str	r7, [r2, #16]
 8008090:	e7a4      	b.n	8007fdc <__mdiff+0x34>
 8008092:	f855 8b04 	ldr.w	r8, [r5], #4
 8008096:	fa1f f188 	uxth.w	r1, r8
 800809a:	4461      	add	r1, ip
 800809c:	140c      	asrs	r4, r1, #16
 800809e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080a2:	b289      	uxth	r1, r1
 80080a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80080ac:	f846 1b04 	str.w	r1, [r6], #4
 80080b0:	e7de      	b.n	8008070 <__mdiff+0xc8>
 80080b2:	3f01      	subs	r7, #1
 80080b4:	e7e8      	b.n	8008088 <__mdiff+0xe0>
 80080b6:	bf00      	nop
 80080b8:	080092ff 	.word	0x080092ff
 80080bc:	08009310 	.word	0x08009310

080080c0 <__d2b>:
 80080c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80080c4:	2101      	movs	r1, #1
 80080c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80080ca:	4690      	mov	r8, r2
 80080cc:	461d      	mov	r5, r3
 80080ce:	f7ff fcd1 	bl	8007a74 <_Balloc>
 80080d2:	4604      	mov	r4, r0
 80080d4:	b930      	cbnz	r0, 80080e4 <__d2b+0x24>
 80080d6:	4602      	mov	r2, r0
 80080d8:	f240 310a 	movw	r1, #778	; 0x30a
 80080dc:	4b24      	ldr	r3, [pc, #144]	; (8008170 <__d2b+0xb0>)
 80080de:	4825      	ldr	r0, [pc, #148]	; (8008174 <__d2b+0xb4>)
 80080e0:	f000 faa6 	bl	8008630 <__assert_func>
 80080e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80080e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80080ec:	bb2d      	cbnz	r5, 800813a <__d2b+0x7a>
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	f1b8 0300 	subs.w	r3, r8, #0
 80080f4:	d026      	beq.n	8008144 <__d2b+0x84>
 80080f6:	4668      	mov	r0, sp
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	f7ff fd83 	bl	8007c04 <__lo0bits>
 80080fe:	9900      	ldr	r1, [sp, #0]
 8008100:	b1f0      	cbz	r0, 8008140 <__d2b+0x80>
 8008102:	9a01      	ldr	r2, [sp, #4]
 8008104:	f1c0 0320 	rsb	r3, r0, #32
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	430b      	orrs	r3, r1
 800810e:	40c2      	lsrs	r2, r0
 8008110:	6163      	str	r3, [r4, #20]
 8008112:	9201      	str	r2, [sp, #4]
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	bf14      	ite	ne
 800811a:	2102      	movne	r1, #2
 800811c:	2101      	moveq	r1, #1
 800811e:	61a3      	str	r3, [r4, #24]
 8008120:	6121      	str	r1, [r4, #16]
 8008122:	b1c5      	cbz	r5, 8008156 <__d2b+0x96>
 8008124:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008128:	4405      	add	r5, r0
 800812a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800812e:	603d      	str	r5, [r7, #0]
 8008130:	6030      	str	r0, [r6, #0]
 8008132:	4620      	mov	r0, r4
 8008134:	b002      	add	sp, #8
 8008136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800813e:	e7d6      	b.n	80080ee <__d2b+0x2e>
 8008140:	6161      	str	r1, [r4, #20]
 8008142:	e7e7      	b.n	8008114 <__d2b+0x54>
 8008144:	a801      	add	r0, sp, #4
 8008146:	f7ff fd5d 	bl	8007c04 <__lo0bits>
 800814a:	2101      	movs	r1, #1
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	6121      	str	r1, [r4, #16]
 8008150:	6163      	str	r3, [r4, #20]
 8008152:	3020      	adds	r0, #32
 8008154:	e7e5      	b.n	8008122 <__d2b+0x62>
 8008156:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800815a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800815e:	6038      	str	r0, [r7, #0]
 8008160:	6918      	ldr	r0, [r3, #16]
 8008162:	f7ff fd2f 	bl	8007bc4 <__hi0bits>
 8008166:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800816a:	6031      	str	r1, [r6, #0]
 800816c:	e7e1      	b.n	8008132 <__d2b+0x72>
 800816e:	bf00      	nop
 8008170:	080092ff 	.word	0x080092ff
 8008174:	08009310 	.word	0x08009310

08008178 <_calloc_r>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	fba1 5402 	umull	r5, r4, r1, r2
 800817e:	b934      	cbnz	r4, 800818e <_calloc_r+0x16>
 8008180:	4629      	mov	r1, r5
 8008182:	f000 f875 	bl	8008270 <_malloc_r>
 8008186:	4606      	mov	r6, r0
 8008188:	b928      	cbnz	r0, 8008196 <_calloc_r+0x1e>
 800818a:	4630      	mov	r0, r6
 800818c:	bd70      	pop	{r4, r5, r6, pc}
 800818e:	220c      	movs	r2, #12
 8008190:	2600      	movs	r6, #0
 8008192:	6002      	str	r2, [r0, #0]
 8008194:	e7f9      	b.n	800818a <_calloc_r+0x12>
 8008196:	462a      	mov	r2, r5
 8008198:	4621      	mov	r1, r4
 800819a:	f7fe f93f 	bl	800641c <memset>
 800819e:	e7f4      	b.n	800818a <_calloc_r+0x12>

080081a0 <_free_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4605      	mov	r5, r0
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d040      	beq.n	800822a <_free_r+0x8a>
 80081a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ac:	1f0c      	subs	r4, r1, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfb8      	it	lt
 80081b2:	18e4      	addlt	r4, r4, r3
 80081b4:	f000 fa98 	bl	80086e8 <__malloc_lock>
 80081b8:	4a1c      	ldr	r2, [pc, #112]	; (800822c <_free_r+0x8c>)
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	b933      	cbnz	r3, 80081cc <_free_r+0x2c>
 80081be:	6063      	str	r3, [r4, #4]
 80081c0:	6014      	str	r4, [r2, #0]
 80081c2:	4628      	mov	r0, r5
 80081c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c8:	f000 ba94 	b.w	80086f4 <__malloc_unlock>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d908      	bls.n	80081e2 <_free_r+0x42>
 80081d0:	6820      	ldr	r0, [r4, #0]
 80081d2:	1821      	adds	r1, r4, r0
 80081d4:	428b      	cmp	r3, r1
 80081d6:	bf01      	itttt	eq
 80081d8:	6819      	ldreq	r1, [r3, #0]
 80081da:	685b      	ldreq	r3, [r3, #4]
 80081dc:	1809      	addeq	r1, r1, r0
 80081de:	6021      	streq	r1, [r4, #0]
 80081e0:	e7ed      	b.n	80081be <_free_r+0x1e>
 80081e2:	461a      	mov	r2, r3
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b10b      	cbz	r3, 80081ec <_free_r+0x4c>
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d9fa      	bls.n	80081e2 <_free_r+0x42>
 80081ec:	6811      	ldr	r1, [r2, #0]
 80081ee:	1850      	adds	r0, r2, r1
 80081f0:	42a0      	cmp	r0, r4
 80081f2:	d10b      	bne.n	800820c <_free_r+0x6c>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	4401      	add	r1, r0
 80081f8:	1850      	adds	r0, r2, r1
 80081fa:	4283      	cmp	r3, r0
 80081fc:	6011      	str	r1, [r2, #0]
 80081fe:	d1e0      	bne.n	80081c2 <_free_r+0x22>
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	4401      	add	r1, r0
 8008206:	6011      	str	r1, [r2, #0]
 8008208:	6053      	str	r3, [r2, #4]
 800820a:	e7da      	b.n	80081c2 <_free_r+0x22>
 800820c:	d902      	bls.n	8008214 <_free_r+0x74>
 800820e:	230c      	movs	r3, #12
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	e7d6      	b.n	80081c2 <_free_r+0x22>
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	1821      	adds	r1, r4, r0
 8008218:	428b      	cmp	r3, r1
 800821a:	bf01      	itttt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	1809      	addeq	r1, r1, r0
 8008222:	6021      	streq	r1, [r4, #0]
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	6054      	str	r4, [r2, #4]
 8008228:	e7cb      	b.n	80081c2 <_free_r+0x22>
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	200003fc 	.word	0x200003fc

08008230 <sbrk_aligned>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	4e0e      	ldr	r6, [pc, #56]	; (800826c <sbrk_aligned+0x3c>)
 8008234:	460c      	mov	r4, r1
 8008236:	6831      	ldr	r1, [r6, #0]
 8008238:	4605      	mov	r5, r0
 800823a:	b911      	cbnz	r1, 8008242 <sbrk_aligned+0x12>
 800823c:	f000 f9e8 	bl	8008610 <_sbrk_r>
 8008240:	6030      	str	r0, [r6, #0]
 8008242:	4621      	mov	r1, r4
 8008244:	4628      	mov	r0, r5
 8008246:	f000 f9e3 	bl	8008610 <_sbrk_r>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	d00a      	beq.n	8008264 <sbrk_aligned+0x34>
 800824e:	1cc4      	adds	r4, r0, #3
 8008250:	f024 0403 	bic.w	r4, r4, #3
 8008254:	42a0      	cmp	r0, r4
 8008256:	d007      	beq.n	8008268 <sbrk_aligned+0x38>
 8008258:	1a21      	subs	r1, r4, r0
 800825a:	4628      	mov	r0, r5
 800825c:	f000 f9d8 	bl	8008610 <_sbrk_r>
 8008260:	3001      	adds	r0, #1
 8008262:	d101      	bne.n	8008268 <sbrk_aligned+0x38>
 8008264:	f04f 34ff 	mov.w	r4, #4294967295
 8008268:	4620      	mov	r0, r4
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	20000400 	.word	0x20000400

08008270 <_malloc_r>:
 8008270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008274:	1ccd      	adds	r5, r1, #3
 8008276:	f025 0503 	bic.w	r5, r5, #3
 800827a:	3508      	adds	r5, #8
 800827c:	2d0c      	cmp	r5, #12
 800827e:	bf38      	it	cc
 8008280:	250c      	movcc	r5, #12
 8008282:	2d00      	cmp	r5, #0
 8008284:	4607      	mov	r7, r0
 8008286:	db01      	blt.n	800828c <_malloc_r+0x1c>
 8008288:	42a9      	cmp	r1, r5
 800828a:	d905      	bls.n	8008298 <_malloc_r+0x28>
 800828c:	230c      	movs	r3, #12
 800828e:	2600      	movs	r6, #0
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	4630      	mov	r0, r6
 8008294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008298:	4e2e      	ldr	r6, [pc, #184]	; (8008354 <_malloc_r+0xe4>)
 800829a:	f000 fa25 	bl	80086e8 <__malloc_lock>
 800829e:	6833      	ldr	r3, [r6, #0]
 80082a0:	461c      	mov	r4, r3
 80082a2:	bb34      	cbnz	r4, 80082f2 <_malloc_r+0x82>
 80082a4:	4629      	mov	r1, r5
 80082a6:	4638      	mov	r0, r7
 80082a8:	f7ff ffc2 	bl	8008230 <sbrk_aligned>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	4604      	mov	r4, r0
 80082b0:	d14d      	bne.n	800834e <_malloc_r+0xde>
 80082b2:	6834      	ldr	r4, [r6, #0]
 80082b4:	4626      	mov	r6, r4
 80082b6:	2e00      	cmp	r6, #0
 80082b8:	d140      	bne.n	800833c <_malloc_r+0xcc>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	4631      	mov	r1, r6
 80082be:	4638      	mov	r0, r7
 80082c0:	eb04 0803 	add.w	r8, r4, r3
 80082c4:	f000 f9a4 	bl	8008610 <_sbrk_r>
 80082c8:	4580      	cmp	r8, r0
 80082ca:	d13a      	bne.n	8008342 <_malloc_r+0xd2>
 80082cc:	6821      	ldr	r1, [r4, #0]
 80082ce:	3503      	adds	r5, #3
 80082d0:	1a6d      	subs	r5, r5, r1
 80082d2:	f025 0503 	bic.w	r5, r5, #3
 80082d6:	3508      	adds	r5, #8
 80082d8:	2d0c      	cmp	r5, #12
 80082da:	bf38      	it	cc
 80082dc:	250c      	movcc	r5, #12
 80082de:	4638      	mov	r0, r7
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7ff ffa5 	bl	8008230 <sbrk_aligned>
 80082e6:	3001      	adds	r0, #1
 80082e8:	d02b      	beq.n	8008342 <_malloc_r+0xd2>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	442b      	add	r3, r5
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	e00e      	b.n	8008310 <_malloc_r+0xa0>
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	1b52      	subs	r2, r2, r5
 80082f6:	d41e      	bmi.n	8008336 <_malloc_r+0xc6>
 80082f8:	2a0b      	cmp	r2, #11
 80082fa:	d916      	bls.n	800832a <_malloc_r+0xba>
 80082fc:	1961      	adds	r1, r4, r5
 80082fe:	42a3      	cmp	r3, r4
 8008300:	6025      	str	r5, [r4, #0]
 8008302:	bf18      	it	ne
 8008304:	6059      	strne	r1, [r3, #4]
 8008306:	6863      	ldr	r3, [r4, #4]
 8008308:	bf08      	it	eq
 800830a:	6031      	streq	r1, [r6, #0]
 800830c:	5162      	str	r2, [r4, r5]
 800830e:	604b      	str	r3, [r1, #4]
 8008310:	4638      	mov	r0, r7
 8008312:	f104 060b 	add.w	r6, r4, #11
 8008316:	f000 f9ed 	bl	80086f4 <__malloc_unlock>
 800831a:	f026 0607 	bic.w	r6, r6, #7
 800831e:	1d23      	adds	r3, r4, #4
 8008320:	1af2      	subs	r2, r6, r3
 8008322:	d0b6      	beq.n	8008292 <_malloc_r+0x22>
 8008324:	1b9b      	subs	r3, r3, r6
 8008326:	50a3      	str	r3, [r4, r2]
 8008328:	e7b3      	b.n	8008292 <_malloc_r+0x22>
 800832a:	6862      	ldr	r2, [r4, #4]
 800832c:	42a3      	cmp	r3, r4
 800832e:	bf0c      	ite	eq
 8008330:	6032      	streq	r2, [r6, #0]
 8008332:	605a      	strne	r2, [r3, #4]
 8008334:	e7ec      	b.n	8008310 <_malloc_r+0xa0>
 8008336:	4623      	mov	r3, r4
 8008338:	6864      	ldr	r4, [r4, #4]
 800833a:	e7b2      	b.n	80082a2 <_malloc_r+0x32>
 800833c:	4634      	mov	r4, r6
 800833e:	6876      	ldr	r6, [r6, #4]
 8008340:	e7b9      	b.n	80082b6 <_malloc_r+0x46>
 8008342:	230c      	movs	r3, #12
 8008344:	4638      	mov	r0, r7
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	f000 f9d4 	bl	80086f4 <__malloc_unlock>
 800834c:	e7a1      	b.n	8008292 <_malloc_r+0x22>
 800834e:	6025      	str	r5, [r4, #0]
 8008350:	e7de      	b.n	8008310 <_malloc_r+0xa0>
 8008352:	bf00      	nop
 8008354:	200003fc 	.word	0x200003fc

08008358 <__ssputs_r>:
 8008358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	688e      	ldr	r6, [r1, #8]
 800835e:	4682      	mov	sl, r0
 8008360:	429e      	cmp	r6, r3
 8008362:	460c      	mov	r4, r1
 8008364:	4690      	mov	r8, r2
 8008366:	461f      	mov	r7, r3
 8008368:	d838      	bhi.n	80083dc <__ssputs_r+0x84>
 800836a:	898a      	ldrh	r2, [r1, #12]
 800836c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008370:	d032      	beq.n	80083d8 <__ssputs_r+0x80>
 8008372:	6825      	ldr	r5, [r4, #0]
 8008374:	6909      	ldr	r1, [r1, #16]
 8008376:	3301      	adds	r3, #1
 8008378:	eba5 0901 	sub.w	r9, r5, r1
 800837c:	6965      	ldr	r5, [r4, #20]
 800837e:	444b      	add	r3, r9
 8008380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008388:	106d      	asrs	r5, r5, #1
 800838a:	429d      	cmp	r5, r3
 800838c:	bf38      	it	cc
 800838e:	461d      	movcc	r5, r3
 8008390:	0553      	lsls	r3, r2, #21
 8008392:	d531      	bpl.n	80083f8 <__ssputs_r+0xa0>
 8008394:	4629      	mov	r1, r5
 8008396:	f7ff ff6b 	bl	8008270 <_malloc_r>
 800839a:	4606      	mov	r6, r0
 800839c:	b950      	cbnz	r0, 80083b4 <__ssputs_r+0x5c>
 800839e:	230c      	movs	r3, #12
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	f8ca 3000 	str.w	r3, [sl]
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b4:	464a      	mov	r2, r9
 80083b6:	6921      	ldr	r1, [r4, #16]
 80083b8:	f7ff fb4e 	bl	8007a58 <memcpy>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	6126      	str	r6, [r4, #16]
 80083ca:	444e      	add	r6, r9
 80083cc:	6026      	str	r6, [r4, #0]
 80083ce:	463e      	mov	r6, r7
 80083d0:	6165      	str	r5, [r4, #20]
 80083d2:	eba5 0509 	sub.w	r5, r5, r9
 80083d6:	60a5      	str	r5, [r4, #8]
 80083d8:	42be      	cmp	r6, r7
 80083da:	d900      	bls.n	80083de <__ssputs_r+0x86>
 80083dc:	463e      	mov	r6, r7
 80083de:	4632      	mov	r2, r6
 80083e0:	4641      	mov	r1, r8
 80083e2:	6820      	ldr	r0, [r4, #0]
 80083e4:	f000 f966 	bl	80086b4 <memmove>
 80083e8:	68a3      	ldr	r3, [r4, #8]
 80083ea:	2000      	movs	r0, #0
 80083ec:	1b9b      	subs	r3, r3, r6
 80083ee:	60a3      	str	r3, [r4, #8]
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	4433      	add	r3, r6
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	e7db      	b.n	80083b0 <__ssputs_r+0x58>
 80083f8:	462a      	mov	r2, r5
 80083fa:	f000 f981 	bl	8008700 <_realloc_r>
 80083fe:	4606      	mov	r6, r0
 8008400:	2800      	cmp	r0, #0
 8008402:	d1e1      	bne.n	80083c8 <__ssputs_r+0x70>
 8008404:	4650      	mov	r0, sl
 8008406:	6921      	ldr	r1, [r4, #16]
 8008408:	f7ff feca 	bl	80081a0 <_free_r>
 800840c:	e7c7      	b.n	800839e <__ssputs_r+0x46>
	...

08008410 <_svfiprintf_r>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	4698      	mov	r8, r3
 8008416:	898b      	ldrh	r3, [r1, #12]
 8008418:	4607      	mov	r7, r0
 800841a:	061b      	lsls	r3, r3, #24
 800841c:	460d      	mov	r5, r1
 800841e:	4614      	mov	r4, r2
 8008420:	b09d      	sub	sp, #116	; 0x74
 8008422:	d50e      	bpl.n	8008442 <_svfiprintf_r+0x32>
 8008424:	690b      	ldr	r3, [r1, #16]
 8008426:	b963      	cbnz	r3, 8008442 <_svfiprintf_r+0x32>
 8008428:	2140      	movs	r1, #64	; 0x40
 800842a:	f7ff ff21 	bl	8008270 <_malloc_r>
 800842e:	6028      	str	r0, [r5, #0]
 8008430:	6128      	str	r0, [r5, #16]
 8008432:	b920      	cbnz	r0, 800843e <_svfiprintf_r+0x2e>
 8008434:	230c      	movs	r3, #12
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	e0d1      	b.n	80085e2 <_svfiprintf_r+0x1d2>
 800843e:	2340      	movs	r3, #64	; 0x40
 8008440:	616b      	str	r3, [r5, #20]
 8008442:	2300      	movs	r3, #0
 8008444:	9309      	str	r3, [sp, #36]	; 0x24
 8008446:	2320      	movs	r3, #32
 8008448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800844c:	2330      	movs	r3, #48	; 0x30
 800844e:	f04f 0901 	mov.w	r9, #1
 8008452:	f8cd 800c 	str.w	r8, [sp, #12]
 8008456:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80085fc <_svfiprintf_r+0x1ec>
 800845a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800845e:	4623      	mov	r3, r4
 8008460:	469a      	mov	sl, r3
 8008462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008466:	b10a      	cbz	r2, 800846c <_svfiprintf_r+0x5c>
 8008468:	2a25      	cmp	r2, #37	; 0x25
 800846a:	d1f9      	bne.n	8008460 <_svfiprintf_r+0x50>
 800846c:	ebba 0b04 	subs.w	fp, sl, r4
 8008470:	d00b      	beq.n	800848a <_svfiprintf_r+0x7a>
 8008472:	465b      	mov	r3, fp
 8008474:	4622      	mov	r2, r4
 8008476:	4629      	mov	r1, r5
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff ff6d 	bl	8008358 <__ssputs_r>
 800847e:	3001      	adds	r0, #1
 8008480:	f000 80aa 	beq.w	80085d8 <_svfiprintf_r+0x1c8>
 8008484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008486:	445a      	add	r2, fp
 8008488:	9209      	str	r2, [sp, #36]	; 0x24
 800848a:	f89a 3000 	ldrb.w	r3, [sl]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80a2 	beq.w	80085d8 <_svfiprintf_r+0x1c8>
 8008494:	2300      	movs	r3, #0
 8008496:	f04f 32ff 	mov.w	r2, #4294967295
 800849a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800849e:	f10a 0a01 	add.w	sl, sl, #1
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	9307      	str	r3, [sp, #28]
 80084a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084aa:	931a      	str	r3, [sp, #104]	; 0x68
 80084ac:	4654      	mov	r4, sl
 80084ae:	2205      	movs	r2, #5
 80084b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b4:	4851      	ldr	r0, [pc, #324]	; (80085fc <_svfiprintf_r+0x1ec>)
 80084b6:	f7ff fac1 	bl	8007a3c <memchr>
 80084ba:	9a04      	ldr	r2, [sp, #16]
 80084bc:	b9d8      	cbnz	r0, 80084f6 <_svfiprintf_r+0xe6>
 80084be:	06d0      	lsls	r0, r2, #27
 80084c0:	bf44      	itt	mi
 80084c2:	2320      	movmi	r3, #32
 80084c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084c8:	0711      	lsls	r1, r2, #28
 80084ca:	bf44      	itt	mi
 80084cc:	232b      	movmi	r3, #43	; 0x2b
 80084ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d2:	f89a 3000 	ldrb.w	r3, [sl]
 80084d6:	2b2a      	cmp	r3, #42	; 0x2a
 80084d8:	d015      	beq.n	8008506 <_svfiprintf_r+0xf6>
 80084da:	4654      	mov	r4, sl
 80084dc:	2000      	movs	r0, #0
 80084de:	f04f 0c0a 	mov.w	ip, #10
 80084e2:	9a07      	ldr	r2, [sp, #28]
 80084e4:	4621      	mov	r1, r4
 80084e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ea:	3b30      	subs	r3, #48	; 0x30
 80084ec:	2b09      	cmp	r3, #9
 80084ee:	d94e      	bls.n	800858e <_svfiprintf_r+0x17e>
 80084f0:	b1b0      	cbz	r0, 8008520 <_svfiprintf_r+0x110>
 80084f2:	9207      	str	r2, [sp, #28]
 80084f4:	e014      	b.n	8008520 <_svfiprintf_r+0x110>
 80084f6:	eba0 0308 	sub.w	r3, r0, r8
 80084fa:	fa09 f303 	lsl.w	r3, r9, r3
 80084fe:	4313      	orrs	r3, r2
 8008500:	46a2      	mov	sl, r4
 8008502:	9304      	str	r3, [sp, #16]
 8008504:	e7d2      	b.n	80084ac <_svfiprintf_r+0x9c>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	1d19      	adds	r1, r3, #4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	9103      	str	r1, [sp, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfbb      	ittet	lt
 8008512:	425b      	neglt	r3, r3
 8008514:	f042 0202 	orrlt.w	r2, r2, #2
 8008518:	9307      	strge	r3, [sp, #28]
 800851a:	9307      	strlt	r3, [sp, #28]
 800851c:	bfb8      	it	lt
 800851e:	9204      	strlt	r2, [sp, #16]
 8008520:	7823      	ldrb	r3, [r4, #0]
 8008522:	2b2e      	cmp	r3, #46	; 0x2e
 8008524:	d10c      	bne.n	8008540 <_svfiprintf_r+0x130>
 8008526:	7863      	ldrb	r3, [r4, #1]
 8008528:	2b2a      	cmp	r3, #42	; 0x2a
 800852a:	d135      	bne.n	8008598 <_svfiprintf_r+0x188>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	3402      	adds	r4, #2
 8008530:	1d1a      	adds	r2, r3, #4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	9203      	str	r2, [sp, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	bfb8      	it	lt
 800853a:	f04f 33ff 	movlt.w	r3, #4294967295
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008600 <_svfiprintf_r+0x1f0>
 8008544:	2203      	movs	r2, #3
 8008546:	4650      	mov	r0, sl
 8008548:	7821      	ldrb	r1, [r4, #0]
 800854a:	f7ff fa77 	bl	8007a3c <memchr>
 800854e:	b140      	cbz	r0, 8008562 <_svfiprintf_r+0x152>
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	eba0 000a 	sub.w	r0, r0, sl
 8008556:	fa03 f000 	lsl.w	r0, r3, r0
 800855a:	9b04      	ldr	r3, [sp, #16]
 800855c:	3401      	adds	r4, #1
 800855e:	4303      	orrs	r3, r0
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008566:	2206      	movs	r2, #6
 8008568:	4826      	ldr	r0, [pc, #152]	; (8008604 <_svfiprintf_r+0x1f4>)
 800856a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800856e:	f7ff fa65 	bl	8007a3c <memchr>
 8008572:	2800      	cmp	r0, #0
 8008574:	d038      	beq.n	80085e8 <_svfiprintf_r+0x1d8>
 8008576:	4b24      	ldr	r3, [pc, #144]	; (8008608 <_svfiprintf_r+0x1f8>)
 8008578:	bb1b      	cbnz	r3, 80085c2 <_svfiprintf_r+0x1b2>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	3307      	adds	r3, #7
 800857e:	f023 0307 	bic.w	r3, r3, #7
 8008582:	3308      	adds	r3, #8
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	4433      	add	r3, r6
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	e767      	b.n	800845e <_svfiprintf_r+0x4e>
 800858e:	460c      	mov	r4, r1
 8008590:	2001      	movs	r0, #1
 8008592:	fb0c 3202 	mla	r2, ip, r2, r3
 8008596:	e7a5      	b.n	80084e4 <_svfiprintf_r+0xd4>
 8008598:	2300      	movs	r3, #0
 800859a:	f04f 0c0a 	mov.w	ip, #10
 800859e:	4619      	mov	r1, r3
 80085a0:	3401      	adds	r4, #1
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	4620      	mov	r0, r4
 80085a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085aa:	3a30      	subs	r2, #48	; 0x30
 80085ac:	2a09      	cmp	r2, #9
 80085ae:	d903      	bls.n	80085b8 <_svfiprintf_r+0x1a8>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0c5      	beq.n	8008540 <_svfiprintf_r+0x130>
 80085b4:	9105      	str	r1, [sp, #20]
 80085b6:	e7c3      	b.n	8008540 <_svfiprintf_r+0x130>
 80085b8:	4604      	mov	r4, r0
 80085ba:	2301      	movs	r3, #1
 80085bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085c0:	e7f0      	b.n	80085a4 <_svfiprintf_r+0x194>
 80085c2:	ab03      	add	r3, sp, #12
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	462a      	mov	r2, r5
 80085c8:	4638      	mov	r0, r7
 80085ca:	4b10      	ldr	r3, [pc, #64]	; (800860c <_svfiprintf_r+0x1fc>)
 80085cc:	a904      	add	r1, sp, #16
 80085ce:	f7fd ffcb 	bl	8006568 <_printf_float>
 80085d2:	1c42      	adds	r2, r0, #1
 80085d4:	4606      	mov	r6, r0
 80085d6:	d1d6      	bne.n	8008586 <_svfiprintf_r+0x176>
 80085d8:	89ab      	ldrh	r3, [r5, #12]
 80085da:	065b      	lsls	r3, r3, #25
 80085dc:	f53f af2c 	bmi.w	8008438 <_svfiprintf_r+0x28>
 80085e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085e2:	b01d      	add	sp, #116	; 0x74
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	ab03      	add	r3, sp, #12
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	462a      	mov	r2, r5
 80085ee:	4638      	mov	r0, r7
 80085f0:	4b06      	ldr	r3, [pc, #24]	; (800860c <_svfiprintf_r+0x1fc>)
 80085f2:	a904      	add	r1, sp, #16
 80085f4:	f7fe fa54 	bl	8006aa0 <_printf_i>
 80085f8:	e7eb      	b.n	80085d2 <_svfiprintf_r+0x1c2>
 80085fa:	bf00      	nop
 80085fc:	0800946c 	.word	0x0800946c
 8008600:	08009472 	.word	0x08009472
 8008604:	08009476 	.word	0x08009476
 8008608:	08006569 	.word	0x08006569
 800860c:	08008359 	.word	0x08008359

08008610 <_sbrk_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	2300      	movs	r3, #0
 8008614:	4d05      	ldr	r5, [pc, #20]	; (800862c <_sbrk_r+0x1c>)
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	f7f9 f9f8 	bl	8001a10 <_sbrk>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_sbrk_r+0x1a>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_sbrk_r+0x1a>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20000404 	.word	0x20000404

08008630 <__assert_func>:
 8008630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008632:	4614      	mov	r4, r2
 8008634:	461a      	mov	r2, r3
 8008636:	4b09      	ldr	r3, [pc, #36]	; (800865c <__assert_func+0x2c>)
 8008638:	4605      	mov	r5, r0
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68d8      	ldr	r0, [r3, #12]
 800863e:	b14c      	cbz	r4, 8008654 <__assert_func+0x24>
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <__assert_func+0x30>)
 8008642:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008646:	9100      	str	r1, [sp, #0]
 8008648:	462b      	mov	r3, r5
 800864a:	4906      	ldr	r1, [pc, #24]	; (8008664 <__assert_func+0x34>)
 800864c:	f000 f80e 	bl	800866c <fiprintf>
 8008650:	f000 faaa 	bl	8008ba8 <abort>
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <__assert_func+0x38>)
 8008656:	461c      	mov	r4, r3
 8008658:	e7f3      	b.n	8008642 <__assert_func+0x12>
 800865a:	bf00      	nop
 800865c:	20000014 	.word	0x20000014
 8008660:	0800947d 	.word	0x0800947d
 8008664:	0800948a 	.word	0x0800948a
 8008668:	080094b8 	.word	0x080094b8

0800866c <fiprintf>:
 800866c:	b40e      	push	{r1, r2, r3}
 800866e:	b503      	push	{r0, r1, lr}
 8008670:	4601      	mov	r1, r0
 8008672:	ab03      	add	r3, sp, #12
 8008674:	4805      	ldr	r0, [pc, #20]	; (800868c <fiprintf+0x20>)
 8008676:	f853 2b04 	ldr.w	r2, [r3], #4
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	f000 f895 	bl	80087ac <_vfiprintf_r>
 8008682:	b002      	add	sp, #8
 8008684:	f85d eb04 	ldr.w	lr, [sp], #4
 8008688:	b003      	add	sp, #12
 800868a:	4770      	bx	lr
 800868c:	20000014 	.word	0x20000014

08008690 <__ascii_mbtowc>:
 8008690:	b082      	sub	sp, #8
 8008692:	b901      	cbnz	r1, 8008696 <__ascii_mbtowc+0x6>
 8008694:	a901      	add	r1, sp, #4
 8008696:	b142      	cbz	r2, 80086aa <__ascii_mbtowc+0x1a>
 8008698:	b14b      	cbz	r3, 80086ae <__ascii_mbtowc+0x1e>
 800869a:	7813      	ldrb	r3, [r2, #0]
 800869c:	600b      	str	r3, [r1, #0]
 800869e:	7812      	ldrb	r2, [r2, #0]
 80086a0:	1e10      	subs	r0, r2, #0
 80086a2:	bf18      	it	ne
 80086a4:	2001      	movne	r0, #1
 80086a6:	b002      	add	sp, #8
 80086a8:	4770      	bx	lr
 80086aa:	4610      	mov	r0, r2
 80086ac:	e7fb      	b.n	80086a6 <__ascii_mbtowc+0x16>
 80086ae:	f06f 0001 	mvn.w	r0, #1
 80086b2:	e7f8      	b.n	80086a6 <__ascii_mbtowc+0x16>

080086b4 <memmove>:
 80086b4:	4288      	cmp	r0, r1
 80086b6:	b510      	push	{r4, lr}
 80086b8:	eb01 0402 	add.w	r4, r1, r2
 80086bc:	d902      	bls.n	80086c4 <memmove+0x10>
 80086be:	4284      	cmp	r4, r0
 80086c0:	4623      	mov	r3, r4
 80086c2:	d807      	bhi.n	80086d4 <memmove+0x20>
 80086c4:	1e43      	subs	r3, r0, #1
 80086c6:	42a1      	cmp	r1, r4
 80086c8:	d008      	beq.n	80086dc <memmove+0x28>
 80086ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086d2:	e7f8      	b.n	80086c6 <memmove+0x12>
 80086d4:	4601      	mov	r1, r0
 80086d6:	4402      	add	r2, r0
 80086d8:	428a      	cmp	r2, r1
 80086da:	d100      	bne.n	80086de <memmove+0x2a>
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086e6:	e7f7      	b.n	80086d8 <memmove+0x24>

080086e8 <__malloc_lock>:
 80086e8:	4801      	ldr	r0, [pc, #4]	; (80086f0 <__malloc_lock+0x8>)
 80086ea:	f000 bc19 	b.w	8008f20 <__retarget_lock_acquire_recursive>
 80086ee:	bf00      	nop
 80086f0:	20000408 	.word	0x20000408

080086f4 <__malloc_unlock>:
 80086f4:	4801      	ldr	r0, [pc, #4]	; (80086fc <__malloc_unlock+0x8>)
 80086f6:	f000 bc14 	b.w	8008f22 <__retarget_lock_release_recursive>
 80086fa:	bf00      	nop
 80086fc:	20000408 	.word	0x20000408

08008700 <_realloc_r>:
 8008700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008704:	4680      	mov	r8, r0
 8008706:	4614      	mov	r4, r2
 8008708:	460e      	mov	r6, r1
 800870a:	b921      	cbnz	r1, 8008716 <_realloc_r+0x16>
 800870c:	4611      	mov	r1, r2
 800870e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008712:	f7ff bdad 	b.w	8008270 <_malloc_r>
 8008716:	b92a      	cbnz	r2, 8008724 <_realloc_r+0x24>
 8008718:	f7ff fd42 	bl	80081a0 <_free_r>
 800871c:	4625      	mov	r5, r4
 800871e:	4628      	mov	r0, r5
 8008720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008724:	f000 fc64 	bl	8008ff0 <_malloc_usable_size_r>
 8008728:	4284      	cmp	r4, r0
 800872a:	4607      	mov	r7, r0
 800872c:	d802      	bhi.n	8008734 <_realloc_r+0x34>
 800872e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008732:	d812      	bhi.n	800875a <_realloc_r+0x5a>
 8008734:	4621      	mov	r1, r4
 8008736:	4640      	mov	r0, r8
 8008738:	f7ff fd9a 	bl	8008270 <_malloc_r>
 800873c:	4605      	mov	r5, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d0ed      	beq.n	800871e <_realloc_r+0x1e>
 8008742:	42bc      	cmp	r4, r7
 8008744:	4622      	mov	r2, r4
 8008746:	4631      	mov	r1, r6
 8008748:	bf28      	it	cs
 800874a:	463a      	movcs	r2, r7
 800874c:	f7ff f984 	bl	8007a58 <memcpy>
 8008750:	4631      	mov	r1, r6
 8008752:	4640      	mov	r0, r8
 8008754:	f7ff fd24 	bl	80081a0 <_free_r>
 8008758:	e7e1      	b.n	800871e <_realloc_r+0x1e>
 800875a:	4635      	mov	r5, r6
 800875c:	e7df      	b.n	800871e <_realloc_r+0x1e>

0800875e <__sfputc_r>:
 800875e:	6893      	ldr	r3, [r2, #8]
 8008760:	b410      	push	{r4}
 8008762:	3b01      	subs	r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	6093      	str	r3, [r2, #8]
 8008768:	da07      	bge.n	800877a <__sfputc_r+0x1c>
 800876a:	6994      	ldr	r4, [r2, #24]
 800876c:	42a3      	cmp	r3, r4
 800876e:	db01      	blt.n	8008774 <__sfputc_r+0x16>
 8008770:	290a      	cmp	r1, #10
 8008772:	d102      	bne.n	800877a <__sfputc_r+0x1c>
 8008774:	bc10      	pop	{r4}
 8008776:	f000 b949 	b.w	8008a0c <__swbuf_r>
 800877a:	6813      	ldr	r3, [r2, #0]
 800877c:	1c58      	adds	r0, r3, #1
 800877e:	6010      	str	r0, [r2, #0]
 8008780:	7019      	strb	r1, [r3, #0]
 8008782:	4608      	mov	r0, r1
 8008784:	bc10      	pop	{r4}
 8008786:	4770      	bx	lr

08008788 <__sfputs_r>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	4606      	mov	r6, r0
 800878c:	460f      	mov	r7, r1
 800878e:	4614      	mov	r4, r2
 8008790:	18d5      	adds	r5, r2, r3
 8008792:	42ac      	cmp	r4, r5
 8008794:	d101      	bne.n	800879a <__sfputs_r+0x12>
 8008796:	2000      	movs	r0, #0
 8008798:	e007      	b.n	80087aa <__sfputs_r+0x22>
 800879a:	463a      	mov	r2, r7
 800879c:	4630      	mov	r0, r6
 800879e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a2:	f7ff ffdc 	bl	800875e <__sfputc_r>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d1f3      	bne.n	8008792 <__sfputs_r+0xa>
 80087aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087ac <_vfiprintf_r>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	460d      	mov	r5, r1
 80087b2:	4614      	mov	r4, r2
 80087b4:	4698      	mov	r8, r3
 80087b6:	4606      	mov	r6, r0
 80087b8:	b09d      	sub	sp, #116	; 0x74
 80087ba:	b118      	cbz	r0, 80087c4 <_vfiprintf_r+0x18>
 80087bc:	6983      	ldr	r3, [r0, #24]
 80087be:	b90b      	cbnz	r3, 80087c4 <_vfiprintf_r+0x18>
 80087c0:	f000 fb10 	bl	8008de4 <__sinit>
 80087c4:	4b89      	ldr	r3, [pc, #548]	; (80089ec <_vfiprintf_r+0x240>)
 80087c6:	429d      	cmp	r5, r3
 80087c8:	d11b      	bne.n	8008802 <_vfiprintf_r+0x56>
 80087ca:	6875      	ldr	r5, [r6, #4]
 80087cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ce:	07d9      	lsls	r1, r3, #31
 80087d0:	d405      	bmi.n	80087de <_vfiprintf_r+0x32>
 80087d2:	89ab      	ldrh	r3, [r5, #12]
 80087d4:	059a      	lsls	r2, r3, #22
 80087d6:	d402      	bmi.n	80087de <_vfiprintf_r+0x32>
 80087d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087da:	f000 fba1 	bl	8008f20 <__retarget_lock_acquire_recursive>
 80087de:	89ab      	ldrh	r3, [r5, #12]
 80087e0:	071b      	lsls	r3, r3, #28
 80087e2:	d501      	bpl.n	80087e8 <_vfiprintf_r+0x3c>
 80087e4:	692b      	ldr	r3, [r5, #16]
 80087e6:	b9eb      	cbnz	r3, 8008824 <_vfiprintf_r+0x78>
 80087e8:	4629      	mov	r1, r5
 80087ea:	4630      	mov	r0, r6
 80087ec:	f000 f96e 	bl	8008acc <__swsetup_r>
 80087f0:	b1c0      	cbz	r0, 8008824 <_vfiprintf_r+0x78>
 80087f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087f4:	07dc      	lsls	r4, r3, #31
 80087f6:	d50e      	bpl.n	8008816 <_vfiprintf_r+0x6a>
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295
 80087fc:	b01d      	add	sp, #116	; 0x74
 80087fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008802:	4b7b      	ldr	r3, [pc, #492]	; (80089f0 <_vfiprintf_r+0x244>)
 8008804:	429d      	cmp	r5, r3
 8008806:	d101      	bne.n	800880c <_vfiprintf_r+0x60>
 8008808:	68b5      	ldr	r5, [r6, #8]
 800880a:	e7df      	b.n	80087cc <_vfiprintf_r+0x20>
 800880c:	4b79      	ldr	r3, [pc, #484]	; (80089f4 <_vfiprintf_r+0x248>)
 800880e:	429d      	cmp	r5, r3
 8008810:	bf08      	it	eq
 8008812:	68f5      	ldreq	r5, [r6, #12]
 8008814:	e7da      	b.n	80087cc <_vfiprintf_r+0x20>
 8008816:	89ab      	ldrh	r3, [r5, #12]
 8008818:	0598      	lsls	r0, r3, #22
 800881a:	d4ed      	bmi.n	80087f8 <_vfiprintf_r+0x4c>
 800881c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800881e:	f000 fb80 	bl	8008f22 <__retarget_lock_release_recursive>
 8008822:	e7e9      	b.n	80087f8 <_vfiprintf_r+0x4c>
 8008824:	2300      	movs	r3, #0
 8008826:	9309      	str	r3, [sp, #36]	; 0x24
 8008828:	2320      	movs	r3, #32
 800882a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800882e:	2330      	movs	r3, #48	; 0x30
 8008830:	f04f 0901 	mov.w	r9, #1
 8008834:	f8cd 800c 	str.w	r8, [sp, #12]
 8008838:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80089f8 <_vfiprintf_r+0x24c>
 800883c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008840:	4623      	mov	r3, r4
 8008842:	469a      	mov	sl, r3
 8008844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008848:	b10a      	cbz	r2, 800884e <_vfiprintf_r+0xa2>
 800884a:	2a25      	cmp	r2, #37	; 0x25
 800884c:	d1f9      	bne.n	8008842 <_vfiprintf_r+0x96>
 800884e:	ebba 0b04 	subs.w	fp, sl, r4
 8008852:	d00b      	beq.n	800886c <_vfiprintf_r+0xc0>
 8008854:	465b      	mov	r3, fp
 8008856:	4622      	mov	r2, r4
 8008858:	4629      	mov	r1, r5
 800885a:	4630      	mov	r0, r6
 800885c:	f7ff ff94 	bl	8008788 <__sfputs_r>
 8008860:	3001      	adds	r0, #1
 8008862:	f000 80aa 	beq.w	80089ba <_vfiprintf_r+0x20e>
 8008866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008868:	445a      	add	r2, fp
 800886a:	9209      	str	r2, [sp, #36]	; 0x24
 800886c:	f89a 3000 	ldrb.w	r3, [sl]
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 80a2 	beq.w	80089ba <_vfiprintf_r+0x20e>
 8008876:	2300      	movs	r3, #0
 8008878:	f04f 32ff 	mov.w	r2, #4294967295
 800887c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008880:	f10a 0a01 	add.w	sl, sl, #1
 8008884:	9304      	str	r3, [sp, #16]
 8008886:	9307      	str	r3, [sp, #28]
 8008888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800888c:	931a      	str	r3, [sp, #104]	; 0x68
 800888e:	4654      	mov	r4, sl
 8008890:	2205      	movs	r2, #5
 8008892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008896:	4858      	ldr	r0, [pc, #352]	; (80089f8 <_vfiprintf_r+0x24c>)
 8008898:	f7ff f8d0 	bl	8007a3c <memchr>
 800889c:	9a04      	ldr	r2, [sp, #16]
 800889e:	b9d8      	cbnz	r0, 80088d8 <_vfiprintf_r+0x12c>
 80088a0:	06d1      	lsls	r1, r2, #27
 80088a2:	bf44      	itt	mi
 80088a4:	2320      	movmi	r3, #32
 80088a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088aa:	0713      	lsls	r3, r2, #28
 80088ac:	bf44      	itt	mi
 80088ae:	232b      	movmi	r3, #43	; 0x2b
 80088b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b4:	f89a 3000 	ldrb.w	r3, [sl]
 80088b8:	2b2a      	cmp	r3, #42	; 0x2a
 80088ba:	d015      	beq.n	80088e8 <_vfiprintf_r+0x13c>
 80088bc:	4654      	mov	r4, sl
 80088be:	2000      	movs	r0, #0
 80088c0:	f04f 0c0a 	mov.w	ip, #10
 80088c4:	9a07      	ldr	r2, [sp, #28]
 80088c6:	4621      	mov	r1, r4
 80088c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088cc:	3b30      	subs	r3, #48	; 0x30
 80088ce:	2b09      	cmp	r3, #9
 80088d0:	d94e      	bls.n	8008970 <_vfiprintf_r+0x1c4>
 80088d2:	b1b0      	cbz	r0, 8008902 <_vfiprintf_r+0x156>
 80088d4:	9207      	str	r2, [sp, #28]
 80088d6:	e014      	b.n	8008902 <_vfiprintf_r+0x156>
 80088d8:	eba0 0308 	sub.w	r3, r0, r8
 80088dc:	fa09 f303 	lsl.w	r3, r9, r3
 80088e0:	4313      	orrs	r3, r2
 80088e2:	46a2      	mov	sl, r4
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	e7d2      	b.n	800888e <_vfiprintf_r+0xe2>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	1d19      	adds	r1, r3, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	9103      	str	r1, [sp, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bfbb      	ittet	lt
 80088f4:	425b      	neglt	r3, r3
 80088f6:	f042 0202 	orrlt.w	r2, r2, #2
 80088fa:	9307      	strge	r3, [sp, #28]
 80088fc:	9307      	strlt	r3, [sp, #28]
 80088fe:	bfb8      	it	lt
 8008900:	9204      	strlt	r2, [sp, #16]
 8008902:	7823      	ldrb	r3, [r4, #0]
 8008904:	2b2e      	cmp	r3, #46	; 0x2e
 8008906:	d10c      	bne.n	8008922 <_vfiprintf_r+0x176>
 8008908:	7863      	ldrb	r3, [r4, #1]
 800890a:	2b2a      	cmp	r3, #42	; 0x2a
 800890c:	d135      	bne.n	800897a <_vfiprintf_r+0x1ce>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	3402      	adds	r4, #2
 8008912:	1d1a      	adds	r2, r3, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	9203      	str	r2, [sp, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	bfb8      	it	lt
 800891c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80089fc <_vfiprintf_r+0x250>
 8008926:	2203      	movs	r2, #3
 8008928:	4650      	mov	r0, sl
 800892a:	7821      	ldrb	r1, [r4, #0]
 800892c:	f7ff f886 	bl	8007a3c <memchr>
 8008930:	b140      	cbz	r0, 8008944 <_vfiprintf_r+0x198>
 8008932:	2340      	movs	r3, #64	; 0x40
 8008934:	eba0 000a 	sub.w	r0, r0, sl
 8008938:	fa03 f000 	lsl.w	r0, r3, r0
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	3401      	adds	r4, #1
 8008940:	4303      	orrs	r3, r0
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008948:	2206      	movs	r2, #6
 800894a:	482d      	ldr	r0, [pc, #180]	; (8008a00 <_vfiprintf_r+0x254>)
 800894c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008950:	f7ff f874 	bl	8007a3c <memchr>
 8008954:	2800      	cmp	r0, #0
 8008956:	d03f      	beq.n	80089d8 <_vfiprintf_r+0x22c>
 8008958:	4b2a      	ldr	r3, [pc, #168]	; (8008a04 <_vfiprintf_r+0x258>)
 800895a:	bb1b      	cbnz	r3, 80089a4 <_vfiprintf_r+0x1f8>
 800895c:	9b03      	ldr	r3, [sp, #12]
 800895e:	3307      	adds	r3, #7
 8008960:	f023 0307 	bic.w	r3, r3, #7
 8008964:	3308      	adds	r3, #8
 8008966:	9303      	str	r3, [sp, #12]
 8008968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896a:	443b      	add	r3, r7
 800896c:	9309      	str	r3, [sp, #36]	; 0x24
 800896e:	e767      	b.n	8008840 <_vfiprintf_r+0x94>
 8008970:	460c      	mov	r4, r1
 8008972:	2001      	movs	r0, #1
 8008974:	fb0c 3202 	mla	r2, ip, r2, r3
 8008978:	e7a5      	b.n	80088c6 <_vfiprintf_r+0x11a>
 800897a:	2300      	movs	r3, #0
 800897c:	f04f 0c0a 	mov.w	ip, #10
 8008980:	4619      	mov	r1, r3
 8008982:	3401      	adds	r4, #1
 8008984:	9305      	str	r3, [sp, #20]
 8008986:	4620      	mov	r0, r4
 8008988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800898c:	3a30      	subs	r2, #48	; 0x30
 800898e:	2a09      	cmp	r2, #9
 8008990:	d903      	bls.n	800899a <_vfiprintf_r+0x1ee>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0c5      	beq.n	8008922 <_vfiprintf_r+0x176>
 8008996:	9105      	str	r1, [sp, #20]
 8008998:	e7c3      	b.n	8008922 <_vfiprintf_r+0x176>
 800899a:	4604      	mov	r4, r0
 800899c:	2301      	movs	r3, #1
 800899e:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a2:	e7f0      	b.n	8008986 <_vfiprintf_r+0x1da>
 80089a4:	ab03      	add	r3, sp, #12
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	462a      	mov	r2, r5
 80089aa:	4630      	mov	r0, r6
 80089ac:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <_vfiprintf_r+0x25c>)
 80089ae:	a904      	add	r1, sp, #16
 80089b0:	f7fd fdda 	bl	8006568 <_printf_float>
 80089b4:	4607      	mov	r7, r0
 80089b6:	1c78      	adds	r0, r7, #1
 80089b8:	d1d6      	bne.n	8008968 <_vfiprintf_r+0x1bc>
 80089ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089bc:	07d9      	lsls	r1, r3, #31
 80089be:	d405      	bmi.n	80089cc <_vfiprintf_r+0x220>
 80089c0:	89ab      	ldrh	r3, [r5, #12]
 80089c2:	059a      	lsls	r2, r3, #22
 80089c4:	d402      	bmi.n	80089cc <_vfiprintf_r+0x220>
 80089c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089c8:	f000 faab 	bl	8008f22 <__retarget_lock_release_recursive>
 80089cc:	89ab      	ldrh	r3, [r5, #12]
 80089ce:	065b      	lsls	r3, r3, #25
 80089d0:	f53f af12 	bmi.w	80087f8 <_vfiprintf_r+0x4c>
 80089d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089d6:	e711      	b.n	80087fc <_vfiprintf_r+0x50>
 80089d8:	ab03      	add	r3, sp, #12
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	462a      	mov	r2, r5
 80089de:	4630      	mov	r0, r6
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <_vfiprintf_r+0x25c>)
 80089e2:	a904      	add	r1, sp, #16
 80089e4:	f7fe f85c 	bl	8006aa0 <_printf_i>
 80089e8:	e7e4      	b.n	80089b4 <_vfiprintf_r+0x208>
 80089ea:	bf00      	nop
 80089ec:	080095e4 	.word	0x080095e4
 80089f0:	08009604 	.word	0x08009604
 80089f4:	080095c4 	.word	0x080095c4
 80089f8:	0800946c 	.word	0x0800946c
 80089fc:	08009472 	.word	0x08009472
 8008a00:	08009476 	.word	0x08009476
 8008a04:	08006569 	.word	0x08006569
 8008a08:	08008789 	.word	0x08008789

08008a0c <__swbuf_r>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	460e      	mov	r6, r1
 8008a10:	4614      	mov	r4, r2
 8008a12:	4605      	mov	r5, r0
 8008a14:	b118      	cbz	r0, 8008a1e <__swbuf_r+0x12>
 8008a16:	6983      	ldr	r3, [r0, #24]
 8008a18:	b90b      	cbnz	r3, 8008a1e <__swbuf_r+0x12>
 8008a1a:	f000 f9e3 	bl	8008de4 <__sinit>
 8008a1e:	4b21      	ldr	r3, [pc, #132]	; (8008aa4 <__swbuf_r+0x98>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	d12b      	bne.n	8008a7c <__swbuf_r+0x70>
 8008a24:	686c      	ldr	r4, [r5, #4]
 8008a26:	69a3      	ldr	r3, [r4, #24]
 8008a28:	60a3      	str	r3, [r4, #8]
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	071a      	lsls	r2, r3, #28
 8008a2e:	d52f      	bpl.n	8008a90 <__swbuf_r+0x84>
 8008a30:	6923      	ldr	r3, [r4, #16]
 8008a32:	b36b      	cbz	r3, 8008a90 <__swbuf_r+0x84>
 8008a34:	6923      	ldr	r3, [r4, #16]
 8008a36:	6820      	ldr	r0, [r4, #0]
 8008a38:	b2f6      	uxtb	r6, r6
 8008a3a:	1ac0      	subs	r0, r0, r3
 8008a3c:	6963      	ldr	r3, [r4, #20]
 8008a3e:	4637      	mov	r7, r6
 8008a40:	4283      	cmp	r3, r0
 8008a42:	dc04      	bgt.n	8008a4e <__swbuf_r+0x42>
 8008a44:	4621      	mov	r1, r4
 8008a46:	4628      	mov	r0, r5
 8008a48:	f000 f938 	bl	8008cbc <_fflush_r>
 8008a4c:	bb30      	cbnz	r0, 8008a9c <__swbuf_r+0x90>
 8008a4e:	68a3      	ldr	r3, [r4, #8]
 8008a50:	3001      	adds	r0, #1
 8008a52:	3b01      	subs	r3, #1
 8008a54:	60a3      	str	r3, [r4, #8]
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	701e      	strb	r6, [r3, #0]
 8008a5e:	6963      	ldr	r3, [r4, #20]
 8008a60:	4283      	cmp	r3, r0
 8008a62:	d004      	beq.n	8008a6e <__swbuf_r+0x62>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	07db      	lsls	r3, r3, #31
 8008a68:	d506      	bpl.n	8008a78 <__swbuf_r+0x6c>
 8008a6a:	2e0a      	cmp	r6, #10
 8008a6c:	d104      	bne.n	8008a78 <__swbuf_r+0x6c>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	f000 f923 	bl	8008cbc <_fflush_r>
 8008a76:	b988      	cbnz	r0, 8008a9c <__swbuf_r+0x90>
 8008a78:	4638      	mov	r0, r7
 8008a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <__swbuf_r+0x9c>)
 8008a7e:	429c      	cmp	r4, r3
 8008a80:	d101      	bne.n	8008a86 <__swbuf_r+0x7a>
 8008a82:	68ac      	ldr	r4, [r5, #8]
 8008a84:	e7cf      	b.n	8008a26 <__swbuf_r+0x1a>
 8008a86:	4b09      	ldr	r3, [pc, #36]	; (8008aac <__swbuf_r+0xa0>)
 8008a88:	429c      	cmp	r4, r3
 8008a8a:	bf08      	it	eq
 8008a8c:	68ec      	ldreq	r4, [r5, #12]
 8008a8e:	e7ca      	b.n	8008a26 <__swbuf_r+0x1a>
 8008a90:	4621      	mov	r1, r4
 8008a92:	4628      	mov	r0, r5
 8008a94:	f000 f81a 	bl	8008acc <__swsetup_r>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d0cb      	beq.n	8008a34 <__swbuf_r+0x28>
 8008a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8008aa0:	e7ea      	b.n	8008a78 <__swbuf_r+0x6c>
 8008aa2:	bf00      	nop
 8008aa4:	080095e4 	.word	0x080095e4
 8008aa8:	08009604 	.word	0x08009604
 8008aac:	080095c4 	.word	0x080095c4

08008ab0 <__ascii_wctomb>:
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	b141      	cbz	r1, 8008ac8 <__ascii_wctomb+0x18>
 8008ab6:	2aff      	cmp	r2, #255	; 0xff
 8008ab8:	d904      	bls.n	8008ac4 <__ascii_wctomb+0x14>
 8008aba:	228a      	movs	r2, #138	; 0x8a
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	4770      	bx	lr
 8008ac4:	2001      	movs	r0, #1
 8008ac6:	700a      	strb	r2, [r1, #0]
 8008ac8:	4770      	bx	lr
	...

08008acc <__swsetup_r>:
 8008acc:	4b32      	ldr	r3, [pc, #200]	; (8008b98 <__swsetup_r+0xcc>)
 8008ace:	b570      	push	{r4, r5, r6, lr}
 8008ad0:	681d      	ldr	r5, [r3, #0]
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	b125      	cbz	r5, 8008ae2 <__swsetup_r+0x16>
 8008ad8:	69ab      	ldr	r3, [r5, #24]
 8008ada:	b913      	cbnz	r3, 8008ae2 <__swsetup_r+0x16>
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 f981 	bl	8008de4 <__sinit>
 8008ae2:	4b2e      	ldr	r3, [pc, #184]	; (8008b9c <__swsetup_r+0xd0>)
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	d10f      	bne.n	8008b08 <__swsetup_r+0x3c>
 8008ae8:	686c      	ldr	r4, [r5, #4]
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008af0:	0719      	lsls	r1, r3, #28
 8008af2:	d42c      	bmi.n	8008b4e <__swsetup_r+0x82>
 8008af4:	06dd      	lsls	r5, r3, #27
 8008af6:	d411      	bmi.n	8008b1c <__swsetup_r+0x50>
 8008af8:	2309      	movs	r3, #9
 8008afa:	6033      	str	r3, [r6, #0]
 8008afc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	e03e      	b.n	8008b86 <__swsetup_r+0xba>
 8008b08:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <__swsetup_r+0xd4>)
 8008b0a:	429c      	cmp	r4, r3
 8008b0c:	d101      	bne.n	8008b12 <__swsetup_r+0x46>
 8008b0e:	68ac      	ldr	r4, [r5, #8]
 8008b10:	e7eb      	b.n	8008aea <__swsetup_r+0x1e>
 8008b12:	4b24      	ldr	r3, [pc, #144]	; (8008ba4 <__swsetup_r+0xd8>)
 8008b14:	429c      	cmp	r4, r3
 8008b16:	bf08      	it	eq
 8008b18:	68ec      	ldreq	r4, [r5, #12]
 8008b1a:	e7e6      	b.n	8008aea <__swsetup_r+0x1e>
 8008b1c:	0758      	lsls	r0, r3, #29
 8008b1e:	d512      	bpl.n	8008b46 <__swsetup_r+0x7a>
 8008b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b22:	b141      	cbz	r1, 8008b36 <__swsetup_r+0x6a>
 8008b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d002      	beq.n	8008b32 <__swsetup_r+0x66>
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7ff fb37 	bl	80081a0 <_free_r>
 8008b32:	2300      	movs	r3, #0
 8008b34:	6363      	str	r3, [r4, #52]	; 0x34
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b3c:	81a3      	strh	r3, [r4, #12]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6063      	str	r3, [r4, #4]
 8008b42:	6923      	ldr	r3, [r4, #16]
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f043 0308 	orr.w	r3, r3, #8
 8008b4c:	81a3      	strh	r3, [r4, #12]
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	b94b      	cbnz	r3, 8008b66 <__swsetup_r+0x9a>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5c:	d003      	beq.n	8008b66 <__swsetup_r+0x9a>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4630      	mov	r0, r6
 8008b62:	f000 fa05 	bl	8008f70 <__smakebuf_r>
 8008b66:	89a0      	ldrh	r0, [r4, #12]
 8008b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b6c:	f010 0301 	ands.w	r3, r0, #1
 8008b70:	d00a      	beq.n	8008b88 <__swsetup_r+0xbc>
 8008b72:	2300      	movs	r3, #0
 8008b74:	60a3      	str	r3, [r4, #8]
 8008b76:	6963      	ldr	r3, [r4, #20]
 8008b78:	425b      	negs	r3, r3
 8008b7a:	61a3      	str	r3, [r4, #24]
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	b943      	cbnz	r3, 8008b92 <__swsetup_r+0xc6>
 8008b80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b84:	d1ba      	bne.n	8008afc <__swsetup_r+0x30>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	0781      	lsls	r1, r0, #30
 8008b8a:	bf58      	it	pl
 8008b8c:	6963      	ldrpl	r3, [r4, #20]
 8008b8e:	60a3      	str	r3, [r4, #8]
 8008b90:	e7f4      	b.n	8008b7c <__swsetup_r+0xb0>
 8008b92:	2000      	movs	r0, #0
 8008b94:	e7f7      	b.n	8008b86 <__swsetup_r+0xba>
 8008b96:	bf00      	nop
 8008b98:	20000014 	.word	0x20000014
 8008b9c:	080095e4 	.word	0x080095e4
 8008ba0:	08009604 	.word	0x08009604
 8008ba4:	080095c4 	.word	0x080095c4

08008ba8 <abort>:
 8008ba8:	2006      	movs	r0, #6
 8008baa:	b508      	push	{r3, lr}
 8008bac:	f000 fa50 	bl	8009050 <raise>
 8008bb0:	2001      	movs	r0, #1
 8008bb2:	f7f8 feba 	bl	800192a <_exit>
	...

08008bb8 <__sflush_r>:
 8008bb8:	898a      	ldrh	r2, [r1, #12]
 8008bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	0710      	lsls	r0, r2, #28
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	d457      	bmi.n	8008c74 <__sflush_r+0xbc>
 8008bc4:	684b      	ldr	r3, [r1, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dc04      	bgt.n	8008bd4 <__sflush_r+0x1c>
 8008bca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dc01      	bgt.n	8008bd4 <__sflush_r+0x1c>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	d0fa      	beq.n	8008bd0 <__sflush_r+0x18>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008be0:	682f      	ldr	r7, [r5, #0]
 8008be2:	602b      	str	r3, [r5, #0]
 8008be4:	d032      	beq.n	8008c4c <__sflush_r+0x94>
 8008be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	075a      	lsls	r2, r3, #29
 8008bec:	d505      	bpl.n	8008bfa <__sflush_r+0x42>
 8008bee:	6863      	ldr	r3, [r4, #4]
 8008bf0:	1ac0      	subs	r0, r0, r3
 8008bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bf4:	b10b      	cbz	r3, 8008bfa <__sflush_r+0x42>
 8008bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bf8:	1ac0      	subs	r0, r0, r3
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c00:	4628      	mov	r0, r5
 8008c02:	6a21      	ldr	r1, [r4, #32]
 8008c04:	47b0      	blx	r6
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	d106      	bne.n	8008c1a <__sflush_r+0x62>
 8008c0c:	6829      	ldr	r1, [r5, #0]
 8008c0e:	291d      	cmp	r1, #29
 8008c10:	d82c      	bhi.n	8008c6c <__sflush_r+0xb4>
 8008c12:	4a29      	ldr	r2, [pc, #164]	; (8008cb8 <__sflush_r+0x100>)
 8008c14:	40ca      	lsrs	r2, r1
 8008c16:	07d6      	lsls	r6, r2, #31
 8008c18:	d528      	bpl.n	8008c6c <__sflush_r+0xb4>
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	6062      	str	r2, [r4, #4]
 8008c1e:	6922      	ldr	r2, [r4, #16]
 8008c20:	04d9      	lsls	r1, r3, #19
 8008c22:	6022      	str	r2, [r4, #0]
 8008c24:	d504      	bpl.n	8008c30 <__sflush_r+0x78>
 8008c26:	1c42      	adds	r2, r0, #1
 8008c28:	d101      	bne.n	8008c2e <__sflush_r+0x76>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	b903      	cbnz	r3, 8008c30 <__sflush_r+0x78>
 8008c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8008c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c32:	602f      	str	r7, [r5, #0]
 8008c34:	2900      	cmp	r1, #0
 8008c36:	d0cb      	beq.n	8008bd0 <__sflush_r+0x18>
 8008c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c3c:	4299      	cmp	r1, r3
 8008c3e:	d002      	beq.n	8008c46 <__sflush_r+0x8e>
 8008c40:	4628      	mov	r0, r5
 8008c42:	f7ff faad 	bl	80081a0 <_free_r>
 8008c46:	2000      	movs	r0, #0
 8008c48:	6360      	str	r0, [r4, #52]	; 0x34
 8008c4a:	e7c2      	b.n	8008bd2 <__sflush_r+0x1a>
 8008c4c:	6a21      	ldr	r1, [r4, #32]
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b0      	blx	r6
 8008c54:	1c41      	adds	r1, r0, #1
 8008c56:	d1c7      	bne.n	8008be8 <__sflush_r+0x30>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0c4      	beq.n	8008be8 <__sflush_r+0x30>
 8008c5e:	2b1d      	cmp	r3, #29
 8008c60:	d001      	beq.n	8008c66 <__sflush_r+0xae>
 8008c62:	2b16      	cmp	r3, #22
 8008c64:	d101      	bne.n	8008c6a <__sflush_r+0xb2>
 8008c66:	602f      	str	r7, [r5, #0]
 8008c68:	e7b2      	b.n	8008bd0 <__sflush_r+0x18>
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c70:	81a3      	strh	r3, [r4, #12]
 8008c72:	e7ae      	b.n	8008bd2 <__sflush_r+0x1a>
 8008c74:	690f      	ldr	r7, [r1, #16]
 8008c76:	2f00      	cmp	r7, #0
 8008c78:	d0aa      	beq.n	8008bd0 <__sflush_r+0x18>
 8008c7a:	0793      	lsls	r3, r2, #30
 8008c7c:	bf18      	it	ne
 8008c7e:	2300      	movne	r3, #0
 8008c80:	680e      	ldr	r6, [r1, #0]
 8008c82:	bf08      	it	eq
 8008c84:	694b      	ldreq	r3, [r1, #20]
 8008c86:	1bf6      	subs	r6, r6, r7
 8008c88:	600f      	str	r7, [r1, #0]
 8008c8a:	608b      	str	r3, [r1, #8]
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	dd9f      	ble.n	8008bd0 <__sflush_r+0x18>
 8008c90:	4633      	mov	r3, r6
 8008c92:	463a      	mov	r2, r7
 8008c94:	4628      	mov	r0, r5
 8008c96:	6a21      	ldr	r1, [r4, #32]
 8008c98:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c9c:	47e0      	blx	ip
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	dc06      	bgt.n	8008cb0 <__sflush_r+0xf8>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	e790      	b.n	8008bd2 <__sflush_r+0x1a>
 8008cb0:	4407      	add	r7, r0
 8008cb2:	1a36      	subs	r6, r6, r0
 8008cb4:	e7ea      	b.n	8008c8c <__sflush_r+0xd4>
 8008cb6:	bf00      	nop
 8008cb8:	20400001 	.word	0x20400001

08008cbc <_fflush_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	690b      	ldr	r3, [r1, #16]
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	b913      	cbnz	r3, 8008ccc <_fflush_r+0x10>
 8008cc6:	2500      	movs	r5, #0
 8008cc8:	4628      	mov	r0, r5
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	b118      	cbz	r0, 8008cd6 <_fflush_r+0x1a>
 8008cce:	6983      	ldr	r3, [r0, #24]
 8008cd0:	b90b      	cbnz	r3, 8008cd6 <_fflush_r+0x1a>
 8008cd2:	f000 f887 	bl	8008de4 <__sinit>
 8008cd6:	4b14      	ldr	r3, [pc, #80]	; (8008d28 <_fflush_r+0x6c>)
 8008cd8:	429c      	cmp	r4, r3
 8008cda:	d11b      	bne.n	8008d14 <_fflush_r+0x58>
 8008cdc:	686c      	ldr	r4, [r5, #4]
 8008cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0ef      	beq.n	8008cc6 <_fflush_r+0xa>
 8008ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ce8:	07d0      	lsls	r0, r2, #31
 8008cea:	d404      	bmi.n	8008cf6 <_fflush_r+0x3a>
 8008cec:	0599      	lsls	r1, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_fflush_r+0x3a>
 8008cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf2:	f000 f915 	bl	8008f20 <__retarget_lock_acquire_recursive>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	f7ff ff5d 	bl	8008bb8 <__sflush_r>
 8008cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d00:	4605      	mov	r5, r0
 8008d02:	07da      	lsls	r2, r3, #31
 8008d04:	d4e0      	bmi.n	8008cc8 <_fflush_r+0xc>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	059b      	lsls	r3, r3, #22
 8008d0a:	d4dd      	bmi.n	8008cc8 <_fflush_r+0xc>
 8008d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d0e:	f000 f908 	bl	8008f22 <__retarget_lock_release_recursive>
 8008d12:	e7d9      	b.n	8008cc8 <_fflush_r+0xc>
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <_fflush_r+0x70>)
 8008d16:	429c      	cmp	r4, r3
 8008d18:	d101      	bne.n	8008d1e <_fflush_r+0x62>
 8008d1a:	68ac      	ldr	r4, [r5, #8]
 8008d1c:	e7df      	b.n	8008cde <_fflush_r+0x22>
 8008d1e:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <_fflush_r+0x74>)
 8008d20:	429c      	cmp	r4, r3
 8008d22:	bf08      	it	eq
 8008d24:	68ec      	ldreq	r4, [r5, #12]
 8008d26:	e7da      	b.n	8008cde <_fflush_r+0x22>
 8008d28:	080095e4 	.word	0x080095e4
 8008d2c:	08009604 	.word	0x08009604
 8008d30:	080095c4 	.word	0x080095c4

08008d34 <std>:
 8008d34:	2300      	movs	r3, #0
 8008d36:	b510      	push	{r4, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d42:	6083      	str	r3, [r0, #8]
 8008d44:	8181      	strh	r1, [r0, #12]
 8008d46:	6643      	str	r3, [r0, #100]	; 0x64
 8008d48:	81c2      	strh	r2, [r0, #14]
 8008d4a:	6183      	str	r3, [r0, #24]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	2208      	movs	r2, #8
 8008d50:	305c      	adds	r0, #92	; 0x5c
 8008d52:	f7fd fb63 	bl	800641c <memset>
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <std+0x38>)
 8008d58:	6224      	str	r4, [r4, #32]
 8008d5a:	6263      	str	r3, [r4, #36]	; 0x24
 8008d5c:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <std+0x3c>)
 8008d5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d60:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <std+0x40>)
 8008d62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d64:	4b04      	ldr	r3, [pc, #16]	; (8008d78 <std+0x44>)
 8008d66:	6323      	str	r3, [r4, #48]	; 0x30
 8008d68:	bd10      	pop	{r4, pc}
 8008d6a:	bf00      	nop
 8008d6c:	08009089 	.word	0x08009089
 8008d70:	080090ab 	.word	0x080090ab
 8008d74:	080090e3 	.word	0x080090e3
 8008d78:	08009107 	.word	0x08009107

08008d7c <_cleanup_r>:
 8008d7c:	4901      	ldr	r1, [pc, #4]	; (8008d84 <_cleanup_r+0x8>)
 8008d7e:	f000 b8af 	b.w	8008ee0 <_fwalk_reent>
 8008d82:	bf00      	nop
 8008d84:	08008cbd 	.word	0x08008cbd

08008d88 <__sfmoreglue>:
 8008d88:	2268      	movs	r2, #104	; 0x68
 8008d8a:	b570      	push	{r4, r5, r6, lr}
 8008d8c:	1e4d      	subs	r5, r1, #1
 8008d8e:	4355      	muls	r5, r2
 8008d90:	460e      	mov	r6, r1
 8008d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d96:	f7ff fa6b 	bl	8008270 <_malloc_r>
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	b140      	cbz	r0, 8008db0 <__sfmoreglue+0x28>
 8008d9e:	2100      	movs	r1, #0
 8008da0:	e9c0 1600 	strd	r1, r6, [r0]
 8008da4:	300c      	adds	r0, #12
 8008da6:	60a0      	str	r0, [r4, #8]
 8008da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dac:	f7fd fb36 	bl	800641c <memset>
 8008db0:	4620      	mov	r0, r4
 8008db2:	bd70      	pop	{r4, r5, r6, pc}

08008db4 <__sfp_lock_acquire>:
 8008db4:	4801      	ldr	r0, [pc, #4]	; (8008dbc <__sfp_lock_acquire+0x8>)
 8008db6:	f000 b8b3 	b.w	8008f20 <__retarget_lock_acquire_recursive>
 8008dba:	bf00      	nop
 8008dbc:	20000409 	.word	0x20000409

08008dc0 <__sfp_lock_release>:
 8008dc0:	4801      	ldr	r0, [pc, #4]	; (8008dc8 <__sfp_lock_release+0x8>)
 8008dc2:	f000 b8ae 	b.w	8008f22 <__retarget_lock_release_recursive>
 8008dc6:	bf00      	nop
 8008dc8:	20000409 	.word	0x20000409

08008dcc <__sinit_lock_acquire>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__sinit_lock_acquire+0x8>)
 8008dce:	f000 b8a7 	b.w	8008f20 <__retarget_lock_acquire_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	2000040a 	.word	0x2000040a

08008dd8 <__sinit_lock_release>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__sinit_lock_release+0x8>)
 8008dda:	f000 b8a2 	b.w	8008f22 <__retarget_lock_release_recursive>
 8008dde:	bf00      	nop
 8008de0:	2000040a 	.word	0x2000040a

08008de4 <__sinit>:
 8008de4:	b510      	push	{r4, lr}
 8008de6:	4604      	mov	r4, r0
 8008de8:	f7ff fff0 	bl	8008dcc <__sinit_lock_acquire>
 8008dec:	69a3      	ldr	r3, [r4, #24]
 8008dee:	b11b      	cbz	r3, 8008df8 <__sinit+0x14>
 8008df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df4:	f7ff bff0 	b.w	8008dd8 <__sinit_lock_release>
 8008df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8008dfe:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <__sinit+0x68>)
 8008e00:	4a13      	ldr	r2, [pc, #76]	; (8008e50 <__sinit+0x6c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	bf08      	it	eq
 8008e0a:	2301      	moveq	r3, #1
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	bf08      	it	eq
 8008e10:	61a3      	streq	r3, [r4, #24]
 8008e12:	f000 f81f 	bl	8008e54 <__sfp>
 8008e16:	6060      	str	r0, [r4, #4]
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 f81b 	bl	8008e54 <__sfp>
 8008e1e:	60a0      	str	r0, [r4, #8]
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 f817 	bl	8008e54 <__sfp>
 8008e26:	2200      	movs	r2, #0
 8008e28:	2104      	movs	r1, #4
 8008e2a:	60e0      	str	r0, [r4, #12]
 8008e2c:	6860      	ldr	r0, [r4, #4]
 8008e2e:	f7ff ff81 	bl	8008d34 <std>
 8008e32:	2201      	movs	r2, #1
 8008e34:	2109      	movs	r1, #9
 8008e36:	68a0      	ldr	r0, [r4, #8]
 8008e38:	f7ff ff7c 	bl	8008d34 <std>
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	2112      	movs	r1, #18
 8008e40:	68e0      	ldr	r0, [r4, #12]
 8008e42:	f7ff ff77 	bl	8008d34 <std>
 8008e46:	2301      	movs	r3, #1
 8008e48:	61a3      	str	r3, [r4, #24]
 8008e4a:	e7d1      	b.n	8008df0 <__sinit+0xc>
 8008e4c:	08009248 	.word	0x08009248
 8008e50:	08008d7d 	.word	0x08008d7d

08008e54 <__sfp>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	4607      	mov	r7, r0
 8008e58:	f7ff ffac 	bl	8008db4 <__sfp_lock_acquire>
 8008e5c:	4b1e      	ldr	r3, [pc, #120]	; (8008ed8 <__sfp+0x84>)
 8008e5e:	681e      	ldr	r6, [r3, #0]
 8008e60:	69b3      	ldr	r3, [r6, #24]
 8008e62:	b913      	cbnz	r3, 8008e6a <__sfp+0x16>
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff ffbd 	bl	8008de4 <__sinit>
 8008e6a:	3648      	adds	r6, #72	; 0x48
 8008e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	d503      	bpl.n	8008e7c <__sfp+0x28>
 8008e74:	6833      	ldr	r3, [r6, #0]
 8008e76:	b30b      	cbz	r3, 8008ebc <__sfp+0x68>
 8008e78:	6836      	ldr	r6, [r6, #0]
 8008e7a:	e7f7      	b.n	8008e6c <__sfp+0x18>
 8008e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e80:	b9d5      	cbnz	r5, 8008eb8 <__sfp+0x64>
 8008e82:	4b16      	ldr	r3, [pc, #88]	; (8008edc <__sfp+0x88>)
 8008e84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e88:	60e3      	str	r3, [r4, #12]
 8008e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e8c:	f000 f847 	bl	8008f1e <__retarget_lock_init_recursive>
 8008e90:	f7ff ff96 	bl	8008dc0 <__sfp_lock_release>
 8008e94:	2208      	movs	r2, #8
 8008e96:	4629      	mov	r1, r5
 8008e98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ea0:	6025      	str	r5, [r4, #0]
 8008ea2:	61a5      	str	r5, [r4, #24]
 8008ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ea8:	f7fd fab8 	bl	800641c <memset>
 8008eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb8:	3468      	adds	r4, #104	; 0x68
 8008eba:	e7d9      	b.n	8008e70 <__sfp+0x1c>
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	f7ff ff62 	bl	8008d88 <__sfmoreglue>
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	6030      	str	r0, [r6, #0]
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d1d5      	bne.n	8008e78 <__sfp+0x24>
 8008ecc:	f7ff ff78 	bl	8008dc0 <__sfp_lock_release>
 8008ed0:	230c      	movs	r3, #12
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	e7ee      	b.n	8008eb4 <__sfp+0x60>
 8008ed6:	bf00      	nop
 8008ed8:	08009248 	.word	0x08009248
 8008edc:	ffff0001 	.word	0xffff0001

08008ee0 <_fwalk_reent>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	4688      	mov	r8, r1
 8008ee8:	2700      	movs	r7, #0
 8008eea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ef6:	d505      	bpl.n	8008f04 <_fwalk_reent+0x24>
 8008ef8:	6824      	ldr	r4, [r4, #0]
 8008efa:	2c00      	cmp	r4, #0
 8008efc:	d1f7      	bne.n	8008eee <_fwalk_reent+0xe>
 8008efe:	4638      	mov	r0, r7
 8008f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f04:	89ab      	ldrh	r3, [r5, #12]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d907      	bls.n	8008f1a <_fwalk_reent+0x3a>
 8008f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	d003      	beq.n	8008f1a <_fwalk_reent+0x3a>
 8008f12:	4629      	mov	r1, r5
 8008f14:	4630      	mov	r0, r6
 8008f16:	47c0      	blx	r8
 8008f18:	4307      	orrs	r7, r0
 8008f1a:	3568      	adds	r5, #104	; 0x68
 8008f1c:	e7e9      	b.n	8008ef2 <_fwalk_reent+0x12>

08008f1e <__retarget_lock_init_recursive>:
 8008f1e:	4770      	bx	lr

08008f20 <__retarget_lock_acquire_recursive>:
 8008f20:	4770      	bx	lr

08008f22 <__retarget_lock_release_recursive>:
 8008f22:	4770      	bx	lr

08008f24 <__swhatbuf_r>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	460e      	mov	r6, r1
 8008f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	2900      	cmp	r1, #0
 8008f30:	461d      	mov	r5, r3
 8008f32:	b096      	sub	sp, #88	; 0x58
 8008f34:	da08      	bge.n	8008f48 <__swhatbuf_r+0x24>
 8008f36:	2200      	movs	r2, #0
 8008f38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	061a      	lsls	r2, r3, #24
 8008f40:	d410      	bmi.n	8008f64 <__swhatbuf_r+0x40>
 8008f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f46:	e00e      	b.n	8008f66 <__swhatbuf_r+0x42>
 8008f48:	466a      	mov	r2, sp
 8008f4a:	f000 f903 	bl	8009154 <_fstat_r>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	dbf1      	blt.n	8008f36 <__swhatbuf_r+0x12>
 8008f52:	9a01      	ldr	r2, [sp, #4]
 8008f54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f5c:	425a      	negs	r2, r3
 8008f5e:	415a      	adcs	r2, r3
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	e7ee      	b.n	8008f42 <__swhatbuf_r+0x1e>
 8008f64:	2340      	movs	r3, #64	; 0x40
 8008f66:	2000      	movs	r0, #0
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	b016      	add	sp, #88	; 0x58
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f70 <__smakebuf_r>:
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f74:	079d      	lsls	r5, r3, #30
 8008f76:	4606      	mov	r6, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	d507      	bpl.n	8008f8c <__smakebuf_r+0x1c>
 8008f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	2301      	movs	r3, #1
 8008f86:	6163      	str	r3, [r4, #20]
 8008f88:	b002      	add	sp, #8
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	466a      	mov	r2, sp
 8008f8e:	ab01      	add	r3, sp, #4
 8008f90:	f7ff ffc8 	bl	8008f24 <__swhatbuf_r>
 8008f94:	9900      	ldr	r1, [sp, #0]
 8008f96:	4605      	mov	r5, r0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff f969 	bl	8008270 <_malloc_r>
 8008f9e:	b948      	cbnz	r0, 8008fb4 <__smakebuf_r+0x44>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	059a      	lsls	r2, r3, #22
 8008fa6:	d4ef      	bmi.n	8008f88 <__smakebuf_r+0x18>
 8008fa8:	f023 0303 	bic.w	r3, r3, #3
 8008fac:	f043 0302 	orr.w	r3, r3, #2
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	e7e3      	b.n	8008f7c <__smakebuf_r+0xc>
 8008fb4:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <__smakebuf_r+0x7c>)
 8008fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	6120      	str	r0, [r4, #16]
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	9b01      	ldr	r3, [sp, #4]
 8008fca:	b15b      	cbz	r3, 8008fe4 <__smakebuf_r+0x74>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd2:	f000 f8d1 	bl	8009178 <_isatty_r>
 8008fd6:	b128      	cbz	r0, 8008fe4 <__smakebuf_r+0x74>
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	f043 0301 	orr.w	r3, r3, #1
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	89a0      	ldrh	r0, [r4, #12]
 8008fe6:	4305      	orrs	r5, r0
 8008fe8:	81a5      	strh	r5, [r4, #12]
 8008fea:	e7cd      	b.n	8008f88 <__smakebuf_r+0x18>
 8008fec:	08008d7d 	.word	0x08008d7d

08008ff0 <_malloc_usable_size_r>:
 8008ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ff4:	1f18      	subs	r0, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfbc      	itt	lt
 8008ffa:	580b      	ldrlt	r3, [r1, r0]
 8008ffc:	18c0      	addlt	r0, r0, r3
 8008ffe:	4770      	bx	lr

08009000 <_raise_r>:
 8009000:	291f      	cmp	r1, #31
 8009002:	b538      	push	{r3, r4, r5, lr}
 8009004:	4604      	mov	r4, r0
 8009006:	460d      	mov	r5, r1
 8009008:	d904      	bls.n	8009014 <_raise_r+0x14>
 800900a:	2316      	movs	r3, #22
 800900c:	6003      	str	r3, [r0, #0]
 800900e:	f04f 30ff 	mov.w	r0, #4294967295
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009016:	b112      	cbz	r2, 800901e <_raise_r+0x1e>
 8009018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800901c:	b94b      	cbnz	r3, 8009032 <_raise_r+0x32>
 800901e:	4620      	mov	r0, r4
 8009020:	f000 f830 	bl	8009084 <_getpid_r>
 8009024:	462a      	mov	r2, r5
 8009026:	4601      	mov	r1, r0
 8009028:	4620      	mov	r0, r4
 800902a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800902e:	f000 b817 	b.w	8009060 <_kill_r>
 8009032:	2b01      	cmp	r3, #1
 8009034:	d00a      	beq.n	800904c <_raise_r+0x4c>
 8009036:	1c59      	adds	r1, r3, #1
 8009038:	d103      	bne.n	8009042 <_raise_r+0x42>
 800903a:	2316      	movs	r3, #22
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	2001      	movs	r0, #1
 8009040:	e7e7      	b.n	8009012 <_raise_r+0x12>
 8009042:	2400      	movs	r4, #0
 8009044:	4628      	mov	r0, r5
 8009046:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800904a:	4798      	blx	r3
 800904c:	2000      	movs	r0, #0
 800904e:	e7e0      	b.n	8009012 <_raise_r+0x12>

08009050 <raise>:
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <raise+0xc>)
 8009052:	4601      	mov	r1, r0
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	f7ff bfd3 	b.w	8009000 <_raise_r>
 800905a:	bf00      	nop
 800905c:	20000014 	.word	0x20000014

08009060 <_kill_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	2300      	movs	r3, #0
 8009064:	4d06      	ldr	r5, [pc, #24]	; (8009080 <_kill_r+0x20>)
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	4611      	mov	r1, r2
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	f7f8 fc4c 	bl	800190a <_kill>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	d102      	bne.n	800907c <_kill_r+0x1c>
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b103      	cbz	r3, 800907c <_kill_r+0x1c>
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	bf00      	nop
 8009080:	20000404 	.word	0x20000404

08009084 <_getpid_r>:
 8009084:	f7f8 bc3a 	b.w	80018fc <_getpid>

08009088 <__sread>:
 8009088:	b510      	push	{r4, lr}
 800908a:	460c      	mov	r4, r1
 800908c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009090:	f000 f894 	bl	80091bc <_read_r>
 8009094:	2800      	cmp	r0, #0
 8009096:	bfab      	itete	ge
 8009098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800909a:	89a3      	ldrhlt	r3, [r4, #12]
 800909c:	181b      	addge	r3, r3, r0
 800909e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090a2:	bfac      	ite	ge
 80090a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090a6:	81a3      	strhlt	r3, [r4, #12]
 80090a8:	bd10      	pop	{r4, pc}

080090aa <__swrite>:
 80090aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ae:	461f      	mov	r7, r3
 80090b0:	898b      	ldrh	r3, [r1, #12]
 80090b2:	4605      	mov	r5, r0
 80090b4:	05db      	lsls	r3, r3, #23
 80090b6:	460c      	mov	r4, r1
 80090b8:	4616      	mov	r6, r2
 80090ba:	d505      	bpl.n	80090c8 <__swrite+0x1e>
 80090bc:	2302      	movs	r3, #2
 80090be:	2200      	movs	r2, #0
 80090c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c4:	f000 f868 	bl	8009198 <_lseek_r>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	4632      	mov	r2, r6
 80090cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	4628      	mov	r0, r5
 80090d4:	463b      	mov	r3, r7
 80090d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090de:	f000 b817 	b.w	8009110 <_write_r>

080090e2 <__sseek>:
 80090e2:	b510      	push	{r4, lr}
 80090e4:	460c      	mov	r4, r1
 80090e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ea:	f000 f855 	bl	8009198 <_lseek_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	bf15      	itete	ne
 80090f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090fe:	81a3      	strheq	r3, [r4, #12]
 8009100:	bf18      	it	ne
 8009102:	81a3      	strhne	r3, [r4, #12]
 8009104:	bd10      	pop	{r4, pc}

08009106 <__sclose>:
 8009106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910a:	f000 b813 	b.w	8009134 <_close_r>
	...

08009110 <_write_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	2200      	movs	r2, #0
 800911a:	4d05      	ldr	r5, [pc, #20]	; (8009130 <_write_r+0x20>)
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7f8 fc2a 	bl	8001978 <_write>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_write_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_write_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000404 	.word	0x20000404

08009134 <_close_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	2300      	movs	r3, #0
 8009138:	4d05      	ldr	r5, [pc, #20]	; (8009150 <_close_r+0x1c>)
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	f7f8 fc36 	bl	80019b0 <_close>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_close_r+0x1a>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_close_r+0x1a>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20000404 	.word	0x20000404

08009154 <_fstat_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	2300      	movs	r3, #0
 8009158:	4d06      	ldr	r5, [pc, #24]	; (8009174 <_fstat_r+0x20>)
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7f8 fc30 	bl	80019c6 <_fstat>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_fstat_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_fstat_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000404 	.word	0x20000404

08009178 <_isatty_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	2300      	movs	r3, #0
 800917c:	4d05      	ldr	r5, [pc, #20]	; (8009194 <_isatty_r+0x1c>)
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f8 fc2e 	bl	80019e4 <_isatty>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_isatty_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_isatty_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000404 	.word	0x20000404

08009198 <_lseek_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	2200      	movs	r2, #0
 80091a2:	4d05      	ldr	r5, [pc, #20]	; (80091b8 <_lseek_r+0x20>)
 80091a4:	602a      	str	r2, [r5, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f7f8 fc26 	bl	80019f8 <_lseek>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_lseek_r+0x1e>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_lseek_r+0x1e>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	20000404 	.word	0x20000404

080091bc <_read_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	2200      	movs	r2, #0
 80091c6:	4d05      	ldr	r5, [pc, #20]	; (80091dc <_read_r+0x20>)
 80091c8:	602a      	str	r2, [r5, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	f7f8 fbb7 	bl	800193e <_read>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_read_r+0x1e>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_read_r+0x1e>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	20000404 	.word	0x20000404

080091e0 <_init>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr

080091ec <_fini>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr
